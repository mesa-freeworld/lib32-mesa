diff -Npur mesa-23.1.3/docs/relnotes/23.1.3.rst mesa-e2406205504bb728aec1a50692846c73c87dfac8/docs/relnotes/23.1.3.rst
--- mesa-23.1.3/docs/relnotes/23.1.3.rst	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/docs/relnotes/23.1.3.rst	2023-07-18 23:48:05.000000000 +0200
@@ -19,7 +19,7 @@ SHA256 checksum
 
 ::
 
-    TBD.
+    2f6d7381bc10fbd2d6263ad1022785b8b511046c1a904162f8f7da18eea8aed9  mesa-23.1.3.tar.xz
 
 
 New features
diff -Npur mesa-23.1.3/.pick_status.json mesa-e2406205504bb728aec1a50692846c73c87dfac8/.pick_status.json
--- mesa-23.1.3/.pick_status.json	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/.pick_status.json	2023-07-18 23:48:05.000000000 +0200
@@ -1,5 +1,10742 @@
 [
     {
+        "sha": "cfd24047a1d901d209b18828fd91f9ec36ef0fed",
+        "description": "radeonsi/vcn: Don't use chroma in AV1 encode with RGB input",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "64eab1f3ae231d61bb2b66ebbfda750e610d8b8d"
+    },
+    {
+        "sha": "2cb4c6aef0bb7a4d2156d39c1605acef38f19e3e",
+        "description": "frontends/va: Don't use EFC with scaling or filtering enabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b5fa9f992da7618a9fb08605b953b2051cf63e2d",
+        "description": "frontends/va: Skip processing buffers already converted with EFC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0e9affd2676bc65be0270d7198b38ac7d80a1739",
+        "description": "venus: reduce to use 4K mem suballoc align on platforms known to fit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "283e3acd3ad7c3a1c4467211d56799e93b5496e0",
+        "description": "iris: Re-emit 3DSTATE_DS for each primitive (workaround 14019750404)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4ad19c8310546a276ec7c68dfceb7c545ab13047",
+        "description": "anv: implement Wa_14019750404",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b0ded0b232a21c7459d3f90d766a8d0887a0517",
+        "description": "anv: ensure mesh is disabled on context init",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "50d68f74b503d3a65a89f10c32c199cdb4431054",
+        "description": "iris: ensure mesh is disabled on context init",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f48aa460a26c1d314a47978b8bb805a2a5a26000",
+        "description": "r600/sfn: Print more info if scheduling fails",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2a9348967ae1ca424e1c50ab2d3524656e3a5b51",
+        "description": "r600/sfn: Add some tests for proper register access",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "382e198503d7134cfaa482e515b12d8026acb7ad",
+        "description": "r600/sfn: reorder the value factory class member declaration a bit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "00417c216e2309e3f13d54e4ad8b330efdafc1cd",
+        "description": "r600/sfn: Add peephole optimization to move a dest to the previous op",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "197bc1ee07bb7dd6b6a7d95f44b631aa76fdbc2f",
+        "description": "r600/sfn: Increase LDS fetch schedule priority",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ddb167e81a18c09bd3a4c519e8728e2842d827f1",
+        "description": "r600/sfn: Handle indirect array load/store dependencies better",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d0beaf73d9b5323e8e76a5c4a5a0fad747f89bd3",
+        "description": "r600/sfn: Allow for larger ALU CF's",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d8291cc7ee8cc7c62d1241ea347dfcd777f4d16b",
+        "description": "r600/sfn/tests: add simple copy-prop test with register source",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "10938cddd7a19086f3b4bbafd8ce2a555fd4f7fb",
+        "description": "r600/sfn: Switch to register intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "886a7ae78688feb3a1e0afa8b5fdecce26794eb9",
+        "description": "r600/sfn: Remove nir_register unit tests",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f334d00a8a09a9e629164681f4385abc4e7e3d4b",
+        "description": "radv: make radv_get_pa_su_sc_mode_cntl() static",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9299a90cc1af860252f6cea6a8c2153ce916f3b0",
+        "description": "radv: remove support for VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4b93ae7e7a7559d70f62e2ce8f649c399e7733cb",
+        "description": "util/u_queue: always enable UTIL_QUEUE_INIT_SCALE_THREADS, remove the flag",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bfdfe5aa82f349d055d2e69aaf1b46325a6772ca",
+        "description": "util/u_queue: fix util_queue_finish deadlock by merging lock and finish_lock",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "3713dc6b2a7472a838885b9ff1e4e07f9b9b7713"
+    },
+    {
+        "sha": "c282f80c98831a2c41792eae39e843e9c3fb4809",
+        "description": "panfrost: Fix transform feedback on v9",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "75990e5564fc8f155c9f165517712a232a2100c8",
+        "description": "anv: ensure CFE_STATE is emitted for ray tracing pipelines",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ecb709c85351c8c127a1cd3577c74d6b2b0b706a"
+    },
+    {
+        "sha": "4cf94ce90efd4af20e24292e261038349923c64f",
+        "description": "ci/freedreno: add a530 flakes, remove one fail which recently started passing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a6edac376405ac0f3cf0ced7d85f0939b05006e7",
+        "description": "ci/microsoft: when re-enabling Windows Farm, always run the container",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d3b6635663f71ef65230ea4a8b321a22a64a9e26"
+    },
+    {
+        "sha": "1d9d72b3fb905e2a02abdc7fd87f6b0b78725cf0",
+        "description": "egl: Rename _eglAddDevice() to _eglFindDevice()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3a9e1014e134c705fbc94831cebe19aa3ea4cf34",
+        "description": "egl: Rename _eglAddDevice() to _eglFindDevice()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7d231f828294cc9e6187c78b236f9fba524f4498",
+        "description": "egl/android: Use EGL DeviceList instead drmGetDevices2()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a2aea2672792dcf5ce63b2278d6128db4c795ca2",
+        "description": "egl/surfaceless: Use EGL DeviceList instead of drmGetDevices2()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cd52762bb65586c547004fa26d372764e120d0ce",
+        "description": "egl: Refresh DeviceList during eglInitialize()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e0c97148de8c68c1461089c08a07e82f12e54210",
+        "description": "egl: Rename _eglRefreshDeviceList() to _eglDeviceRefreshList()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0e0adec81ec4a05c36ecb8f21fce7ce726a1e269",
+        "description": "egl: Expose access to DeviceList",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3a8aae9e6aa526367523c58dfe5046909776be74",
+        "description": "ci: drop leftover kernel configs",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "23158e9a3f7c1c3155bfc371ed562828661f9f18"
+    },
+    {
+        "sha": "5178c81e26ce7379a08c11a9d9f8026cd8373e14",
+        "description": "radv: Rely on workgroup_size initialization",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3fed1b4a9e22f3c910ef0d4ac9664c9c5e9b2b41",
+        "description": "v3dv: Rely on nir_builder setting workgroup size",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d0f0afc6a4f350edb43a67aed2050320a1c0d0af",
+        "description": "nir: Initialize workgroup_size in builder_init_simple_shader",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ce25668d020fc29a5815d1f2bedee44a796ea234",
+        "description": "ir3: Use NIR info to enable per sample shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79f7882fc604515302351282f5e01ec5907727f7",
+        "description": "ci: add quirk for GitLab assuming changes is always true for scheduled runs",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "16b080b5d8c1e1fc450c1190d794d7d1a9bb6857",
+        "description": "ir3: Use nir_lower_tess_coord_z",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2c8f884103382bac6ef61a401894a80d8dd31d43",
+        "description": "r600: Use nir_lower_tess_coord_xy",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4f0f76346e056ee8f555f45000c876d99fd1fd4f",
+        "description": "nir: Add nir_lower_tess_coord_z pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9109830bb04b1664bd19f9ab350602a869e048f7",
+        "description": "nir: Promote tess_coord_r600 to tess_coord_xy",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "74f8956f27a2eb8dc4fb39c61115fffaedcc0b8d",
+        "description": "ci: replace copy of nouveau rules with reference",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "005ffbe4b75e46f331673061d23dbd7010ffbfa6",
+        "description": "freedreno,lima,zink: update CI fixes and flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c97961a855ad1ae5c58d47634862b459e682e158",
+        "description": "mesa: fix 38% decrease in display list performance of Viewperf2020/NX8_StudioAA",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "3a294ff01fb9d1d8b4f984a364ed7ef469624c49"
+    },
+    {
+        "sha": "701b035179b61bf2d21a912132ec8408655bb1e8",
+        "description": "bin/ci: Ensure that all jobs have nodes in DAG",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5e4029bfe5accb0ce78345b9111bb69318ee2ae2",
+        "description": "nir/tests: add test for unsigned_upper_bound with loop header phis",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1139d870f38e7458155c192e1b5a3fe322a7c63c",
+        "description": "nir/unsigned_upper_bound: fix phi(bcsel)",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "72ac3f60261a8510512861b93e843e695331e2ab"
+    },
+    {
+        "sha": "34c4a195f9391fb8257a68ab6a2f9ec986c1c84d",
+        "description": "radeonsi: add AV1 profile to supported profile",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "36d4e832996c3e38452e98ffd3aa21e80fe32abb",
+        "description": "intel/perf: add perf query support for Intel Raptorlake",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "4e0eca7dc34942759638ab00eb006ba40284a7c5"
+    },
+    {
+        "sha": "6cda08416b10e43b0a75b4d0a649f8bf29a24a8a",
+        "description": "glthread: determine global locking once every 64 batches to fix get_time perf",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "3ed141e9d80bc2174e34afafb13b5bf07c802ef0"
+    },
+    {
+        "sha": "d4b211bf1b9db21d8bd2d01a3ea4a7c9c4d10caf",
+        "description": "ac/nir: always round cube array layers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e02f8b62af290c4f94a6e422521bba263d931819",
+        "description": "radv: don't unset TRUNC_COORD if conformant_trunc_coord=true",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "436df35c17b84424d9664e66cae8b3885491d9ad",
+        "description": "radv: add conformant_trunc_coord to cache UUID",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0cb26f31feb954e7a1c49d54930f83c002329c7d",
+        "description": "ac/llvm: skip ballot zext for 32-bit dest with wave32-as-wave64",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "47c9dea6ac63d70d261029588d618dd82527d992",
+        "description": "ac/llvm: fix wave32 ac_build_mbcnt_add with 64-bit mask",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a199a051e68e1fb41dd06943dc725d4c950bc16",
+        "description": "radv: fix radv_get_ballot_bit_size with CS",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "85d1159a2a7b09dd285376cbb62921126ba0fda2",
+        "description": "ac/llvm: fix AC_TM_CHECK_IR",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "3f272fd15e9f0776056699e90ce021f4766d3384"
+    },
+    {
+        "sha": "f7c74e35eef06b6b6f5b14eff4a129fb9592e562",
+        "description": "etnaviv: remove bogus comment about replacing resource storage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4b17bab6b4a1196d3001689e525acc69fb4ae1b3",
+        "description": "etnaviv: remove always true assert in etna_transfer_unmap",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ab1d4ac33871157e5c758105e7a72f9e696cec29",
+        "description": "etnaviv: remove superfluous braces",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bee2a8465774271b814dd7678397f7208a55fe08",
+        "description": "etnaviv: move buffer range tracking into the PIPE_MAP_WRITE clause",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e1c00ce5c9e21589da7a9872d77a422c941f419a",
+        "description": "etnaviv: remove huge outdated comment",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6638ba513b26aebb00e69f82db36d9cdb692a847",
+        "description": "etnaviv: reword comment about staging resource usage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f6222a4b927f2a7b6e8d31f9f0b17bfb6a319261",
+        "description": "etnaviv: check for valid TS as condition to create the staging resource",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "78a999ecfac9f4fe752efb16a8535c6a317a2d1a",
+        "description": "etnaviv: don't allocate full resource as transfer staging",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8c8741a17e218ea87b2637f4f14cf0705ec39e7d",
+        "description": "etnaviv: split etna_copy_resource_box levels parameter in src/dst",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "07a958589859300ab48260a184f717b869df55ba",
+        "description": "iris: fix iris for WA 16013000631",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "83716b08cf103622829d84e673584781ee8850f6"
+    },
+    {
+        "sha": "a303ff668471058cb9c317a9b7c7d50fa4b875d8",
+        "description": "isl: add a tool to query surface parameters",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dfd96fac41418ac85fd64ffb2973ff1a7ca2a363",
+        "description": "ci/freedreno: add another a530 flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f952756d1e28fdf4f0be9efa165e29e6eb20f035",
+        "description": "ci/freedreno: fix unexpectedpass flake on a630",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5b3cccaf6305bde6f27a7550a85bb8414ce0b240",
+        "description": "ci/lima: EGL testing was disabled when fp16 fail was removed",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "87439a8c7184bd222325ee0d028876e641086018",
+        "description": "ci/radeonsi: stoney arb_timer_query got fixed between kernel 6.3.1..13",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d3f26cbbe1a957b76804da44bbf5e30de2bac941",
+        "description": "Revert \"lima/ci: temporarily disable deqp-egl tests due to timeouts\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "be2619766be3f4ee0b22a10f8db179dc1e3c5773"
+    },
+    {
+        "sha": "c467d760cba654076dad7cebf3ba5f0ad3f1572c",
+        "description": "ci/freedreno: add fails introduced by upreving to 6.3.13",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bd2b31a89cc40e5dd6133dd6e2d90faee94e4bec",
+        "description": "ci: update kernel to 6.3.13",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "23158e9a3f7c1c3155bfc371ed562828661f9f18",
+        "description": "ci: build kernel in gfx-ci/linux and just use binaries in Mesa3D CI",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9bcdc45ee7e8c4ca0dbb18ba16077d474d5ebb31",
+        "description": "nir: Devendor load_sample_mask",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "56d61d9a644a9f3f6be55a424fc911fef051d8b5",
+        "description": "nir: Add fence_{pbe,mem}_to_tex(_pixel)_agx intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "259ba104f79f9f653130865b21bccfab62dd4829",
+        "description": "nv50/ir: Support vector movs",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6513c675ad31d192265a8286d712e8ae81c9f305"
+    },
+    {
+        "sha": "39824457283bf194c2e2773c19708848027121e1",
+        "description": "glx: Assign unique serial number to GLXBadFBConfig error",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e89e1f5049d3b78542fcd69b7d6106dd4bdafc39"
+    },
+    {
+        "sha": "9590bce3e249a34665b2c42b20bfdbdc7f32147f",
+        "description": "radeonsi: prefix function with si_ to prevent name collision",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "27d30fe3c0e71efd90fcfe209d8515b195b0075f",
+        "description": "isl: Disable MCS compression just on ACM platform",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "efa65945360586e37d22d30d5d1e250a6b696594",
+        "description": "intel/compiler: Look at 2 register worth of data instead of 4",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b93fa149bfbe1ca1a59d89ec53d576aa4ede2ec",
+        "description": "iris: migrate WA 14016118574 to use the WA framework",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "58829d9f112809cabaec471a2961ac42bb529ae6"
+    },
+    {
+        "sha": "83716b08cf103622829d84e673584781ee8850f6",
+        "description": "iris: migrate WA 14013910100 to use the WA framework",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "eeb3f4594d5acc40c1febf22f97ddb51517a0c88"
+    },
+    {
+        "sha": "e85a18a9afe78ea6611b511bde602bb8c567fdf2",
+        "description": "Update radeon_vcn_enc.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "64eab1f3ae231d61bb2b66ebbfda750e610d8b8d",
+        "description": "radeonsi: enable vcn encoder rgb input support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "043dcfad04d89c5b68a82f0c68638f38a85fdb05",
+        "description": "Revert \"ac/nir/ngg: Follow intrinsic sources when analyzing before culling.\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "411f69b9c5b884f6802758347e72a10ec5564df1"
+    },
+    {
+        "sha": "d408ae88db6df25463f6ba0165f7b5b004346658",
+        "description": "radeonsi: Use DIV_ROUND_UP instead of ALIGN_POT",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "ba83c1e254d8a968c166610765ab92ce4cf0778e"
+    },
+    {
+        "sha": "6d312c616004a6063621fa6c8fe155fac9233fc9",
+        "description": "etnaviv: optimize transfers when whole resource level is discarded",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f8f0f1c5cb51511083c0d7bf48a0f079a4d71c8e",
+        "description": "etnaviv: optimize render resource update",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "61e27debf5b13e792ec74bc79fb0abf9f83a4d71",
+        "description": "etnaviv: keep blit destination tile status valid if possible",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dce4aa83e4f07aba08bbdf70889e1be74c9c7b27",
+        "description": "etnaviv: allow sampler TS even if the resource is flushed",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fdedc0b3b37c29ac2d75cd0cf6795323d3944b65",
+        "description": "etnaviv: optimize sampler source update",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "995e34840f03598fd71bc8eaef32e2e470b5002f",
+        "description": "etnaviv: add tile status buffer status into TS metadata",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "49d2f9f918a398f0f2c13ee838e1b267d99fbe6f",
+        "description": "etnaviv: move TS meta into etna_resource_level",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "97aec88c7939f8c30f936d0c28a8d6e4109b0c0b",
+        "description": "etnaviv: add helper to set TS validity",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0f2df7d361520aa2c88c51a3990e05f8849cbf35",
+        "description": "etnaviv: add helper to get TS validity",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9af3b368a761cd0ffac45e7740f7d3d331b95b4",
+        "description": "etnaviv: add helper to transfer resource level age to another",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2d2d0e803dbc522bb66d9c9a9f407aedc9d95abf",
+        "description": "etnaviv: add helper to mark resource level as changed",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "99daab8bf06fafb2d8f70dd1586db1b0396db1e6",
+        "description": "etnaviv: add helper to mark resource level as flushed",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "83a05447c58ee4bea2aa899633baea1486848c51",
+        "description": "etnaviv: optimize resource copies by skipping clean levels",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "87021531a321804998f80f7836b1c61f50131839",
+        "description": "etnaviv: flush destination before executing blit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ff3741eee1d2eb50226d75315ca0bc48d9848f1c",
+        "description": "etnaviv: move resource seqnos to level",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "73c1eb50dc33d46d50a9dacfe0245e538dae4256",
+        "description": "ci/etnaviv: update ci expectation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1e9f4b967a5b70a5c6864d30ddf8da21a028f64d",
+        "description": "ir3: Convert to register intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ad9416c6118843f7f2b18ad8aa7032ec25d1987",
+        "description": "ac/llvm: Remove subgroup_id and num_subgroups intrinsics.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9fb9e54d69969a0dda83c9b34d2f38156e6ff897",
+        "description": "aco: Remove subgroup_id and num_subgroups intrinsics.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2468874bf00d0b2119781b4e33bba05bec7eccd5",
+        "description": "radeonsi: Use ac_nir_lower_intrinsics_to_args.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7000cd83620f812b68c080209ce4f22c977e9559",
+        "description": "radeonsi: Move si_select_hw_stage to si_shader_info.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9bade0205adf331e8ba0010ff41575733e8f385c",
+        "description": "radv: Use ac_nir_lower_intrinsics_to_args.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6551be9c6e5a802cfe39dddfd04c38f1e941a245",
+        "description": "radv: Move radv_select_hw_stage to radv_shader_info.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5825e20dbf59f687973303ede2ac0836d6f405a2",
+        "description": "ac/nir: Add new pass to lower intrinsics to shader args.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a7f2d821ecf8a3bf670df6431fb5aaf1f39b98f3",
+        "description": "ac/nir: Simplify arg unpacking when shift is zero.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dc3bbd351a081a90b57a8772ade8d693048f6403",
+        "description": "aco: Fix subgroup_id intrinsic on GFX10.3+.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3798f99c4693dbf83e93512f47b8af55c651ebba",
+        "description": "pvr: Submit PR commands",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3c9d1a6cfac717a0aef39f09505a62a0966f7fc9",
+        "description": "pvr: Restructure `rogue_kmd_stream.xml`",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "87e7f6abbe195689d7302d0844e5b25d920809a8",
+        "description": "pvr: Remove some magic numbers and increments from km stream",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f1e45f4bbdd8218af8aa8b25d71e51630ad23f19",
+        "description": "pvr: Use the SPM EOT on barrier stores",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ad0ca7a8794b1a9ad4e9dd9cecbb98354fcdae61",
+        "description": "pvr: Compile SPM EOT shader",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bf5c529f974a1eec09c77263751517e8dc881f7a",
+        "description": "pvr: Remove mrt setup from SPM EOT",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "36ff6c0004a0d7820abb56c07a80b40184d096ec",
+        "description": "intel/compiler: remove NV_mesh_shader support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "87dd96bbbe595905643afdf699dfd62bda81eeb8",
+        "description": "anv: drop support for VK_NV_mesh_shader",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed72d6e2a798e7c0a526e900426c41d93798bfec",
+        "description": "hasvk: remove dead code & comments related to mesh shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "55e75d89e31d247e66b77829fe6148eee3a1d088",
+        "description": "iris: avoid duplicating validation entries",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b470d931dc2da66a4d6d726891bf2e508025f99d",
+        "description": "pvr: skip setting up SPM consts buffer when no const shared regs are used",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1dfd5351249c957edab895bdf3f667106eaaa39a"
+    },
+    {
+        "sha": "5f5be9e4e10a487e60dc7a04affa5405e51c06bd",
+        "description": "ntt: Switch to new-style registers and modifiers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d54aa28b970ab09302cba67d5502cb0b4b702a79",
+        "description": "nir/legacy: Fix handling of fsat(fabs)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "34fcf6d479baafbff5e41a1e50993b8ce581bd50",
+        "description": "nir/legacy: Fix fneg(load_reg) case",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2e23d8c885e07612659b913ce7432378206413a2",
+        "description": "zink: remove venus from renderpass optimizations",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a608f5804c3fe62f9f05c0be15f9e3f3a9feeac2",
+        "description": "compiler: Remove blend enums duplicating util",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3748d143a7514bcb694d57443554913e447d4887",
+        "description": "gallium: Remove pipe->compiler BLEND enum translation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f55efb4ae68e9f0e08c2fe749d662c5f2ad8d450",
+        "description": "panfrost: Convert to PIPE_BLEND enums internally",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a2d56c4c738fc531dc6aa59746e87e97f0044d24",
+        "description": "nir/lower_blend: Use util enums",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eb1112ae7a6e1724c26059072aee916ea7304c25",
+        "description": "lvp: Use common blend/logicop translation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "31001c61840e07c510e7fadc3013b929a63b900c",
+        "description": "vulkan: Add helpers for blend enum translation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "521d596d2718214b2c37c0bf0487fa38f7fe99aa",
+        "description": "util/blend: Add helpers for normalizing inverts",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5764071f95fd077eb1da157c784e0fcba4526412",
+        "description": "gallium,util: Move util_blend_dst_alpha_to_one",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "02868c9e77d3a89afab4caedb53d81a0ad5c8f30",
+        "description": "gallium,util: Move blend enums to util/",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b0313d9f09a6d7dacd3f9850822aedab130e7157",
+        "description": "gallium/trace: Collect enums from multiple files",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cef578c5fc7789598d71b9e3e52ecd3636b28b61",
+        "description": "docs: truncate feature list for 23.3-devel",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7220deff90c20d3495b92e7363b1360054d1ce24",
+        "description": "afuc: Rework and significantly expand README.rst",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "426708796c71a43d67bc99ac14e87c71452cda08",
+        "description": "turnip: Add debug option to allow non-conforming features.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "576a4e85f0022dd5b573e35254b8f427f583a88e",
+        "description": "freedreno: Add support for devices not supporting double thread size.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0f57d7c0c39c98382ca600003342853369695d57",
+        "description": "ir3: handle non-uniform case for atomic image/ssbo intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7373ab7f95b1c67897b6ddf2027e9e214e25a087",
+        "description": "freedreno, turnip: set correct reg_size_vec4 for a6xx_gen1_low",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "49ed69369ee3c931bc8b595d5ebc6048e63b8a47",
+        "description": "turnip: make sampler_minmax support configurable.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f78bce1b59cd47741b88a349ebe22050f9d3726b",
+        "description": "turnip: Add support for devices not supporting double thread size.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9d2fd39f84674709b131942a11062a587a2fb827",
+        "description": "ir3: make wave_granularity configurable",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e58f28f3dadf236896979a56c69f879d27067154",
+        "description": "ir3: Make FS tex prefetch optimization optional",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9ed32b386aa7d717100ac0557212a715b85b8e42",
+        "description": "turnip: Make multiview support configurable per generation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3d299bc7ef8ee2514f2c760e71d4402ead82c5de",
+        "description": "freedreno: Add A605, A608, A610, A612 GPUs definition",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "02ea3e4e10a0cffcbbc5da200e77095dd8fac56e",
+        "description": "freedreno,turnip: Make VS input attr/binding count configurable",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4a43ab3019232f323117c9d067bf57b5955096c5",
+        "description": "freedreno,turnip: Make CS shared memory size configurable",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05fffc7b25379700548afe64466de1fd7b95de93",
+        "description": "freedreno,turnip: Make number of VSC pipes configurable",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0814c2c7a6dbbb456facfd6c21a768d4461115ae",
+        "description": "freedreno: Set magic writes per-GPU, using existing data",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c8ce3e50967e74138afb750e97fad7925b13ef54",
+        "description": "freedreno, turnip: Clarify some RB_CCU_CNTL fields",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "67a8b70c57b12a54dcb465feed67f808691a85b5",
+        "description": "anv: hide exec_flags selection inside the i915 backend",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f6dddcef79bb6836037be2f27794c4d379c9c705",
+        "description": "util: Blake3 - Identify arm64ec as aarch64 instead of x64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6e87b277bde71e30c98ab9dda7bd2f2017b77ed5",
+        "description": "crocus: Avoid fast-clear with incompatible view",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4fa02c5c8e60a2ae13165563fb0d3b4c69155b21",
+        "description": "freedreno/cffdec: Decode CP_DRAW_AUTO",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0a2a7bfd19b66a4bd29e1ef112659a2976e6d61c",
+        "description": "r300: update RV370 failures",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0bf6dcb785ce82006f9757217153735e39127834"
+    },
+    {
+        "sha": "953c04ebd39c52d457301bdd8ac803949001da2d",
+        "description": "pvr: clang-format fixes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "39f547381cc84db8e2d3cf4908146ba2a949cc31",
+        "description": "isl: Set MOCS to uncached for MTL stream-out",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fa47c82fbe8d61cfa2f83ad00b7624aa8f305f16",
+        "description": "isl/dev: Add uncached MOCS value",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ef105f8ccee32c8aeefeaf31b61fa5d091d60e2e",
+        "description": "genxml/chv: Add MEMORY_OBJECT_CONTROL_STATE_CHV to document compared to BDW",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "90535d7aef0bc3f54069453807e76d3cd40c42ce",
+        "description": "genxml/hsw: Add additional MOCS field enumerations",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "492b07625d46e53dd6fa1c81c8385994ae3ee390",
+        "description": "anv,iris,hasvk: Use ISL_SURF_USAGE_STREAM_OUT_BIT for setting stream-out MOCS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6b5082f5d5d77afa2a2ca5fb0cfebceb14bbbf04",
+        "description": "isl: Add ISL_SURF_USAGE_STREAM_OUT_BIT",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0dc961645c4f0241f8512cb0ec3ad59635842072",
+        "description": "docs/ci: Add docs for EXTRA_LOCAL_PACKAGES",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a3d10300b0b0e4cbfd6b9774fa3ee244087329d1",
+        "description": "ci: add EXTRA_LOCAL_PACKAGES to apt-get install",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "afaefb20f30f31df6d1493d547a1f145871b1518",
+        "description": "ci: re-add EXTRA_LOCAL_PACKAGES to rootfs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "29de65206094d3d184b580937ea0646e47fcb9d0",
+        "description": "ci/freedreno: update a530 flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6b64c27a976b6aef566505934b7f3e6e4f2f3370",
+        "description": "docs: Update release calendar for 23.2.0-rc1",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c136a22b60091cb11cfd115be8a0816652c859a5",
+        "description": "nv50/ir: Convert to new-style NIR registers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a151d26513a9d89af70c8c9e475b5451db61e696",
+        "description": "venus: refactor query feedback cmd record",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed79b30639899e1815ecfbb4411ea5fd59b77867",
+        "description": "venus: add a missing barrier before copying query feedback",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "de4593faa193f575b8524c49b8e64f2dc12b498a"
+    },
+    {
+        "sha": "c4c258e19eb3ad45fada2f122cacecc9f1dfe57c",
+        "description": "vulkan/util: Use ycbcr_info for multiplane helpers in vk_format.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d5b6edec0f062aadf55a16520224d06ed52773fb",
+        "description": "vulkan/util: Support VK_EXT_ycbcr_2plane_444_formats color formats in vk_format.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c263e5307fd082c82b13ebb915766f082fb8fc49",
+        "description": "vulkan/util: Support 10-bit and 12-bit color formats in ycbcr_info in vk_format.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b44880e3e22380ca3835eeeaffadc6d7dfec737",
+        "description": "venus: ensure consistency of query overflow behavior",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e6cffa1f0e4e54616629177e09881784e33328db"
+    },
+    {
+        "sha": "c55d43df04e5291c1754324e34f8bc2f38ffddda",
+        "description": "venus: handle query feedback creation failure",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e6cffa1f0e4e54616629177e09881784e33328db"
+    },
+    {
+        "sha": "d810d67a8cc0f8c9751fe2491b8272d83898039f",
+        "description": "radv/ci: Set DRIVER_NAME in LAVA raven vkcts jobs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bdaee9e09daf2ca1850fbb0ea44d8ac545647e5b",
+        "description": "ci: avoid running hardware jobs if lint fails - now on Windows too!",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a1c1cce9dfc2d8400a6726affed80997514fefa0"
+    },
+    {
+        "sha": "fd35e5913955e6b9c15d7c96c9919916ca9d8c42",
+        "description": "ci: avoid running hardware jobs if lint fails - now on LAVA too!",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a1c1cce9dfc2d8400a6726affed80997514fefa0"
+    },
+    {
+        "sha": "ef80f81c8f93f16af0ddc1152cd0139b898676a8",
+        "description": "zink: Switch to register intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fac4f526acfa300139c37e7270dd8ec84b31ce0f",
+        "description": "VERSION: bump to 23.3.0-devel",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2c48ce81a82436d2aff3e0d6b9169d83e33038bf",
+        "description": "api/icd: drop static lifetime from `get_ref` return type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d653eb8a9a06af1c9e9001698def1bb09ab4a87c",
+        "description": "rusticl/device: make it &'static",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "afe95b613c076835ff1dfc99ec427e2db3f7e251",
+        "description": "rusticl: Replace &Arc<Device> with &Device",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5bd235189ad71712bf04beb8672d2df58f77df4b",
+        "description": "rusticl/kernel: silence newer clippy warning",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a1c1cce9dfc2d8400a6726affed80997514fefa0",
+        "description": "ci: avoid running hardware jobs if there are already trivial issues",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "feaa12c7c66f62629c6af814cd8e535fc95fc9b2",
+        "description": "freedreno/regs: Document a7xx CP_BV_BR_COUNT_OPS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "271ba7476694beb2939fdda5b69b71624574e55f",
+        "description": "freedreno/regs: Properly document a7xx CP_EVENT_WRITE, CP_WAIT_TIMESTAMP",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "aceb82b80e385b16a4e22a775d8cb276a4a45a23",
+        "description": "tu: Use reg usage tables for stale reg dbg option",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "aecb73232079ff03cdbe85d389aa99f07b172a90",
+        "description": "tu: Allow reg stomping of compute related registers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dac8d371e14e687da36ef7d7be62a9988fd038a3",
+        "description": "freedreno/regs: Define usage for all a6xx/a7xx regs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c62b0cd4f8f25a95df0a46cbfff8399b78a46ed5",
+        "description": "freedreno/regs: Generate per-gen reg usage tables",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "463db34258624fec6e82750f40bafc79013fa6b6",
+        "description": "freedreno/regs: Fix a7xx SP_FS_PREFETCH definition",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6f3117fbce365f988c42c2a94c0c2fb8c6238138",
+        "description": "freedreno/regs: Add more a7xx regs and reg fields",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "95354ab679978e1e0959f689c79e860cfd2af57a",
+        "description": "freedreno/regs: Add some new a7xx events",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5928ac6b642e2a4e0677e2cfffc9a9e49e9d71e9",
+        "description": "freedreno/regs: Add 2 new a7xx modes to CP_COND_REG_EXEC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "27312eb38600f47efe92cee2fabc734bb582d732",
+        "description": "freedreno/regs: a7xx has a new source type CP_REG_TEST",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "853d64ae551f9443b4e65cf936750612a2110901",
+        "description": "freedreno/regs: Add a7xx pseudo-regs to CP_SET_PSEUDO_REG",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1dc044764da9b886b58e5d36a6109a7bb6234c6e",
+        "description": "freedreno/regs: Clarify polling on a7xx for CP_WAIT_REG_MEM/CP_COND_WRITE5",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1f192e49b628b1b628d9ea6a950f9a11856170cb",
+        "description": "freedreno/regs: Document a7xx CP_MODIFY_TIMESTAMP",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed6394fda707c3f07d3daf8387bbe3d12319ee76",
+        "description": "freedreno/regs: Document CP_MEM_TO_SCRATCH_MEM",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "912bafbdd5cc84f05817a00b784388c476c12d3d",
+        "description": "freedreno/regs: Document a7xx CP_FIXED_STRIDE_DRAW_TABLE",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8185fac66b56cc6bab2b0f38ec4e100946342439",
+        "description": "freedreno/regs: More CP commands are the same on a7xx as on a6xx",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "11cc4561178026909187b57d5d968d274c6a10a8",
+        "description": "freedreno/regs: Change a7xx regs to have open range for generation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3ba1d230ad202dfbbed078925768ea9ada1155f3",
+        "description": "freedreno/rnn: Take into account array's variant for regs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dfe650f3f9b3454b78323fb4ad8743f766a80280",
+        "description": "freedreno/rnn: Make addvariant work for fields in the same reg",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "15db60fbbc7e4c659a933ebda7a18cb6f78c19ce",
+        "description": "freedreno/rnn: Fix addvariant being set effectively once",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "148f214dae546983ef99036a1afae53773cd4e43",
+        "description": "freedreno/regs: Print xml validation error if validation fails",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "431bbea84098e322e067a304c5fc204962e9d885",
+        "description": "meson: clarify what \"off-screen rendering\" means",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4ef16e34a8a1f15ef5596b68cc0772fb29c5fe7b",
+        "description": "meson: clarify description of `opengl` option",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a762fa27db35f5852e42a234026c58cf14ca2f6f",
+        "description": "anv: limit stack usage for anv_surface_state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "deaf4f2d574ba340cee3e39dcd137455ad4bb6d9",
+        "description": "anv: pass anv_surface_state using a pointer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fb070b1dfd8dff3e5df037d9b3c97a0f3fa139ea",
+        "description": "anv: fix how NULL buffer_view is handled in anv_descriptor_set_write_buffer_view",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "127999989a75c8d3e7825d5f20bbaff680bce758",
+        "description": "aco: Add MESA_SHADER_KERNEL to instruction selection setup.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6934efc15df0cc740909ac669e42080636fabea9",
+        "description": "broadcom/ci: add the renderonly folder to things that can affect v3d & vc4",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f831883af6389097624d0f9d8b067eb59b2c4780",
+        "description": "nir/lower_tex: optimize offset lowering for has_texture_scaling",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "938300980946526926bdd2082178133d6081f4df",
+        "description": "nir: rename has_txs to has_texture_scaling",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9ddedf45540bc73d343db3dd7eadd0e165fe22c0",
+        "description": "nir: rename intrinsic to have a more generic nameing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dd81c03ab1381fd3d70ed0e4b616d8119fb5cdc9",
+        "description": "etnaviv/ci: drop duplicate line in etnaviv files list",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2c3b62430024ab00d09e6d9ea448f18a73e129d7",
+        "description": "nvc0: backport fp helper invocation fix to 2nd gen Maxwell+",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0c778ec3c8ea98699d5419588ae50aed801aae6a",
+        "description": "anv: Adds a workaround for HEVC decoding on some old platforms.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ad980dc699ef59d68716039e661c9230d6652769",
+        "description": "ci: update fails for fixed tests due to llvmpipe linear changes.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a07fa6516b0157aaae1213b284e3817c2148bf52",
+        "description": "llvmpipe/linear: add support for rgba color buffers.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f96b6027a1a480d4de84c3d4409791c4210e62e1",
+        "description": "llvmpipe/linear: add support for sampling when cbuf order is different.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a3f586685db3add2a49087a73e07a6b2edd9d5cb",
+        "description": "llvmpipe/linear: add sample routines for swapping r/b channels",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "70f49c78cc73be0dfe96fbc68bfc07e17466db39",
+        "description": "llvmpipe/linear/tgsi: calculate num_texs properly for nir.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e43804ba65d525b61e9a5c783fdfd43e08af16e3",
+        "description": "llvmpipe/linear: refactor linear samplers into templated code.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0230179f8b5868ed17b74f050b251c05b9c056b7",
+        "description": "freedreno/ci: Update pixmark piano checksums",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "69f8daca16607a891842d4517542719759ba22dd",
+        "description": "pan/mdg: Ingest new-style registers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "35030fc79c38ac91d327a956ee870aea5114e11e",
+        "description": "gallivm: Switch to reg intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fded7e7b66ef33ef6d96ccdcef66a0d0e0c475a2",
+        "description": "nir: Remove nir_register-based unit tests",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e96a9a1b71cff109f945565a04a3d6ce1453b469",
+        "description": "nir: Remove nir_lower_regs_to_ssa",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9eab1e7521bb7359d552c5652d56bd76507fbfa6",
+        "description": "nir/lower_shader_calls: Convert to register intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "002f8b657eb15fa35a1289c6bfdc174ff302f2d6",
+        "description": "mesa: Convert PTN to register intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b55836a74dfabfe22b0210a24500b44b39e99069",
+        "description": "mesa: Return SSA defs from PTN ALU helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5b835f1a08a6f142273362f94b71f1d29ccad7ae",
+        "description": "mesa: Simplify ptn_log() a bit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2198eedd045d4ed66bd835f77dc746e757b04da2",
+        "description": "gallium: Convert TTN to register intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a6d9f168ce1b7c78f41798e1e72dc4db385ae84a",
+        "description": "gallium: Return SSA values from TTN ALU helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "61010e52554ee832a149139bd56276191b849fd7",
+        "description": "nir: Add lower_vec_to_regs pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "aea8a702008d72798383759cca86c7846bdba503",
+        "description": "nir: Add intrinsics version of locals_to_regs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ae0408be1bdc7c6edba24e3a36b728a016292b45",
+        "description": "nir/from_ssa: Support register intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "29b2ace18454e8d1b06f938132a30710e899dc1c",
+        "description": "nir/from_ssa: Make additional assumptions in coalescing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "36b29201faa19263a5f95e056e9cb3c3590747ec",
+        "description": "nir: Produce intrinsics in lower_{phis,ssa_defs}_to_regs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "73e191924c09875f6118bb040343d87965fbba8e",
+        "description": "nir: Add a reg_intrinsics flag to nir_convert_from_ssa",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bcf3a622d1d9e964a3446ffad1ce4c4ace41ad22",
+        "description": "nir: Add new version of lower_regs_to_ssa",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2eb554af4820eddae2988bc6fc88a80173206986",
+        "description": "nir: Add legacy data structures & helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d313eba94ef0aebf6ee5217fc128f359e0ce1265",
+        "description": "nir: Add pass for trivializing register access",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1d6c06e4b972274155000c768a30fd02f231bafe",
+        "description": "nir: Add helpers for walking register uses",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7229bffcb133b68f91607fb6bccbe0e48b6a55bd",
+        "description": "nir: Add intrinsics for register access",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "80c10b2a4b05e519144cdd811bae5eef7f898056",
+        "description": "ci: split farm rules out of test-source-dep.yml",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9c1948a21dbb91594cd9a04ffe74f2d4babeebb",
+        "description": "llvmpipe/linear: don't allow linear path for shader output with location frac",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fb925c92600c869d2a326037508336eda6e5869b",
+        "description": "ci: fix .valve-farm-manual-rules",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "28667995e4c3437868eea3a51525a6176e105294"
+    },
+    {
+        "sha": "f160f7c525c8412f55caa11bc005818fcb502355",
+        "description": "nir/opt_dead_cf: Clarify comment",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4b5737b785c105c925fb841a31b5a8ec19bcc305",
+        "description": "nir/opt_dead_cf: Run dead_cf_block while it makes progress",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6532751e4d2757bd65871442b5116955affd69d7",
+        "description": "nir/lower_shader_calls: Remat derefs after shader calls",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e81a47cfa246848f28f9c878f1337df8bd0da007",
+        "description": "freedreno/drm/virtio: Trigger host side wait boost",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a85b84ba1e205f665787ea643aa20912bebaca09",
+        "description": "anv: fix utrace signaling with Xe",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "fdea48df5ed22c1f54338b779125b1894c239295"
+    },
+    {
+        "sha": "6b2fa965c6cb062d7a30ed056bf905fc6fd7cc72",
+        "description": "gallium: Remove `PIPE_CAP_RGB_OVERRIDE_DST_ALPHA_BLEND`",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "99e58460efb975f7acf91cf32b044bc55a77b936",
+        "description": "tu: Fix zombie VMAs array not initialized when first BOs may be freed",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "63904240f21b192a5fb1e79046a2c351fbd98ace"
+    },
+    {
+        "sha": "8e383e6d9ee08db3a540880b8d5ed9c38c7e4463",
+        "description": "ci: set priority:low tag only on non-Marge pipelines",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c56528b450b8622cc99b8dd0da9b144bda4d6894",
+        "description": "ci: document workflow rules",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "12c75922d5dcd6ff742f397fe1b7c0e88780e472",
+        "description": "radeonsi/gfx11: fix a regression with PAIRS packets due to shader changes",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1753b321f8766783b73f153131c575b868c5cd12"
+    },
+    {
+        "sha": "7e4870e8e5bd1694fbc7f210d8fdf8460fb3c1b3",
+        "description": "amd: Do shader binary alignment for prefetch at memory allocation time.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "437bf4fccb8c54a9204ba6d13f389f6bcf86cb99",
+        "description": "amd: move end-of-code marker padding to ACO.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0ffcfdba9e95788ae25427a4181cc3048dabe5cd",
+        "description": "radeonsi: fix gfx9 regression causing GPU hangs",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "283be8ac3b8610a77b28ebe9e44b946b979f0381"
+    },
+    {
+        "sha": "1c21f6c90d9c99e09270203e0d2738d9970203f5",
+        "description": "etnaviv: linker: clean up etna_link_shader(..)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a11501e014c82a51e606df079cc0dec2538fd860",
+        "description": "etnaviv: linker: handle scenario where there are FS inputs without matching VS output",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ba0ceb3be33766e2d96d50be6827e709c25f57dc",
+        "description": "ci/freedreno: another batch of a530 flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9b72ece4ec8b05f5c897fe8f555729334370122d",
+        "description": "docs: Add inital PowerVR driver documentation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e88c0bb945c99e11ee944f27ebfc2403b157ea83",
+        "description": "radv: migrate radv_shader hash to BLAKE3",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8740fb00264a500ae0d0f9d54eae6f98db8d7b77",
+        "description": "radv/meta: disable disk cache for meta shaders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2efa5ad0f69eb346ee02f287cf7870063b5722bf",
+        "description": "vulkan/pipeline_cache: add 'skip_disk_cache' option",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c778803d673f8db16df5951637258405b2d7e0a6",
+        "description": "aco/assembler: change prefetch mode on GFX10.3+ during loops if beneficial",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b9c5b273b0a9b12c9f962e511dac801b3732f8fd",
+        "description": "aco/assembler: align loops if it reduces the number of cache lines",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "de8ecc127efd793a49e5df85df507e9ce4b6a6fa",
+        "description": "aco/assembler: align resume shaders with cache lines",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f4ed778cc1bcff5acdbbe70b7d24dc07673753be",
+        "description": "aux/trace: fix (u)int dump",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d29bb6467e2a37b480fc7ff8bf0334d68c74c3a3"
+    },
+    {
+        "sha": "77b76074fc49069b5b473660d6e15067e8f79c45",
+        "description": "zink: drop linear D32_SFLOAT_S8_UINT requirement",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5c2f6d3f8e8bdabf93ceb6e5c34e4fffa865bd41",
+        "description": "virgl/video: Fix out-of-bounds access in fill_mpeg4_picture_desc()",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6b5aecb19558200fd39fda46db08456ba7acc180"
+    },
+    {
+        "sha": "3c520892b10ca249723f11d3e4858cc41e072e0c",
+        "description": "zink: fix batch disambiguation on first submit",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9b572ce8ebd727ea108c70b11b8f8636b1e0e42c",
+        "description": "zink: update profile vulkan version requirements",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "005a4ec9e8c4245eb953decef900e017f69f48c9",
+        "description": "radeonsi/vcn: Remove unnecessary type conversion",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9790350e9dd9450786c2449c445fff5177bf230b",
+        "description": "frontends/va: Fix memory leak of decrypt_key",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "deb7dc82f626e92525d01829d88f0ac348de03b8"
+    },
+    {
+        "sha": "55d9ffc99ed03c903e2e33283384b3722d54023b",
+        "description": "gallium/va: fix superres av1 decoding.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "85ec6ecf820ee954de3e76275957ea9af7640b5a",
+        "description": "ci/zink+radv: fix flake definition",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "741bfb52e674950e773160d2180b95ec557d8fb7"
+    },
+    {
+        "sha": "e17535829372d4f43969a89388c6c7bc1a171029",
+        "description": "ci/traces: switch from xvfb to Weston XWayland",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "69614e859e6b39df75652bb4266be525d6f5819c",
+        "description": "ci/container: we need to keep the wine inside",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a0ae98f345c970947f40cba8d3192181f7acc301",
+        "description": "ci/container: add weston into Vulkan container",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "97014036a9520e881639f1556808dbd2875b5c5c",
+        "description": "nir: Remove nir_builder_init, it's not used anymore",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bd27faf0833c5cf28e2d865d43d7e8cc51653f39",
+        "description": "treewide: remove unused nir_builder",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "48a25ef700a7aa29697579b5ca8ea6d9d385f7ea",
+        "description": "treewide: Remove all usage of nir_builder_init with nir_builder_create and nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "df91080389006dd4131c9408d886adccb3c20c71",
+        "description": "docs: update etnaviv extensions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e034ba1c44ac662699026bdadfa68af61bb6c1be",
+        "description": "radv/rt: Miss rays that hit the triangle's v edge",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a096cf784fd18454250c6483574dd487ad5f87f1",
+        "description": "radv/rt: Enable exact on software intersection functions",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "34ef0c15db05e40f344bd7bdd9ab72a1b4b93670",
+        "description": "iris: Drop depth cache flush requirement after depth clear/resolve",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "66a6f48747266f9adb4c36ea3e846dae3e0647b7",
+        "description": "anv: Drop depth cache flush requirement after depth clear/resolve",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bcae3128193047e82c3e2b110f424cf2a77eef56",
+        "description": "freedreno/ci: add KHR-GL46.buffer_storage.map_persistent_flush to flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ec260cb7a2f78d80713f9006bc78242e89986189",
+        "description": "mesa/main: add PIPE_FORMAT_VYUY and PIPE_FORMAT_B8R8_G8R8",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8c3c9c36f33d2bcb44893ec9ad450d60ce799229",
+        "description": "mesa/main: add PIPE_FORMAT_YVYU and PIPE_FORMAT_R8B8_R8G8",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "26e3be513dc855f235ee12c8ebc0e7d1a82cd4cf",
+        "description": "gallium/st: add support for PIPE_FORMAT_NV21 and PIPE_FORMAT_G8_B8R8_420",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "65d6f5aed2843d322dda9bd21d0540629347f892",
+        "description": "nir: add options to lower y_vu, yv_yu, yx_xvxu and xy_vxux",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f49587386679df7443ca37d9a551d6a1841bc279",
+        "description": "ci/freedreno: add execution@varying-struct-copy-return-vs flake",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2dab9b37f85c697ddbec48a63540955626cc9821",
+        "description": "ci/freedreno: add KHR-GL46.buffer_storage flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7fba2b1fe1fd6963a67ce4d768d93d30cd4017fc",
+        "description": "d3d12/ci: add piglit arb_clear_texture-integer fail to CI expectations",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "40e3055efdfc0e05da76ee105d1ae19ee97299ec",
+        "description": "lima/ci: add some ARB_clear_texture piglit tests to lima-fails.txt",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a1eabeff6607cf1466df3486d2585b51909e7450",
+        "description": "gallium: remove PIPE_CAP_CLEAR_TEXTURE",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "491110f02ed6fc7eeccc80ae01a1e8e92d92a2dd",
+        "description": "gallium: cleanup util_blitter_clear_render_target",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3d9438ecd63b64a304df8b800484bfc52eb16a90",
+        "description": "clover: use fallback path when pipe->clear_texture is not available",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6c444ac12f621b3699880254733a3798dde8eafd",
+        "description": "rusticl: use fallback path when pipe->clear_texture is not available",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "29a64f677a26026a8e1006046f0d1b828ff87537",
+        "description": "mesa/st: use fallback path when pipe->clear_texture is not available",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2594436c7a66449d699e8f48b25280089076225a",
+        "description": "gallium: rename util_clear_texture to util_clear_texture_sw",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3a044b16812f9d992036b3f571f24ff250fbfecb",
+        "description": "gallium: use u_default_clear_texture where applicable",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "28837ac970f103a54b877340030d8f080d63337b",
+        "description": "gallium: implement u_default_clear_texture",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f4ab32941174d33b52f60e9c2a9ec8723ac9436c",
+        "description": "d3d12: fix clear_depth_stencil texture deref",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f326479acc5d9fd710177d09c7fc220587ef6a17",
+        "description": "vc4: implement clear_render_target and clear_depth_stencil",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b094332303fc6b3350ee09e745b3956e16c29b6b",
+        "description": "v3d: implement clear_render_target and clear_depth_stencil",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9a88064162ad0a8815a40eb21e03090beddd22ec",
+        "description": "freedreno: implement clear_render_target and clear_depth_stencil",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b0bbd9c0d3310b80e20f2414311d4c14677d6558",
+        "description": "nir: do not needlessly rely on optimizations",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6d42711043ca7661d989264a8b01e30a505e8797",
+        "description": "radv: do not rely on constant-folding",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1f9a3ee011193f853e5a1ad69a2c366b77cc5a59",
+        "description": "nir: use nir_intrinsic_get_var",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "67a7b66b90371fa38e2c3a83c8509165584d1de7",
+        "description": "nir: constify intrin",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "15b4670305295a4e8f62789d07c16843a39be0ba",
+        "description": "ci: Uprev virglrenderer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0695ead057b221d025213d0f2042dd35b69b3613",
+        "description": "rogue: Remove commented convert_from_ssa call",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e51364241a8d69fe46989fe49952d8dbcee43ae9",
+        "description": "virgl: remove check of VIRGL_CAP_V2_UNTYPED_RESOURCE",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "80c001013ce83c679a3b9a59e27f9a72b70a45ea",
+        "description": "glsl: do vs attribute validation in NIR linker",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9cbdf5c9e5a0e940810217e9c0c10245fa1d9aae",
+        "description": "glsl: remove dead varyings before assigning attr locations",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a8534c7b4cfc0f8450da2c03d8ffb74cdafee4c6"
+    },
+    {
+        "sha": "689f38b2b452a8b8bad5ab9388c7f71ff9074cec",
+        "description": "panfrost: fix refcnt imbalance related to blitter",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "146a92dd9f7094b3be40db4d2cfbc25a0395da6c",
+        "description": "radeonsi/gfx11: only use SET_*_PAIRS* packets on dGPUs",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "22f3bcfb5a3311a2c61ad26c943976e66b68b09c"
+    },
+    {
+        "sha": "d3662ba461e15bbefc5f8887bee58e016f69f281",
+        "description": "wgl: Fix depth/stencil image support when using zink kopper",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "544c0b572eaac6744d387d801b23854a70fda395",
+        "description": "ci/zink+radv: document another flake",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d92520e19c3ce6e97cdbb6e1eaad3760f4615e9f",
+        "description": "Revert \"Revert \"radv: Enable ray tracing pipelines by default\"\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "49b400423ce2ac3f0d868a38a51bcd9d02cccd1b"
+    },
+    {
+        "sha": "816ed055acf81042f6513842913d5232d9d9592e",
+        "description": "Revert \"radv/rt: Enable RT pipelines on GFX10_3+ excluding vangogh\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7f3874981dd11821a4001671b5ee505868f9aa7d"
+    },
+    {
+        "sha": "0804e150e49be49f623d74cf2875857c052cd63f",
+        "description": "radv/ci: Skip ray tracing tests on vangogh",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6934f6603576a91b01603a4d897037fe20cb3d5d",
+        "description": "ci/freedreno: document number of a630 devices available",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "15cddb7035ac90d16d855cfdeaa96b12e86e0569",
+        "description": "ci/freedreno: re-enable a530 as it's now stable with multiple skips",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "69a14f3f7db3e455b1b43a96cce340735dfb1e5d",
+        "description": "ci/freedreno: switch a630_{piglit,skqp} and a618_gl to Weston",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "591ce8f185b6123fd95dd77880c706c2d7e25666",
+        "description": "add initial .git-blame-ignore-revs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "98ed583a6d794937e32a312e84f4907bbca9bdd9",
+        "description": "clang-format: enforce formatting of egl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e85983d7726f8d2fe4e3014afc8dcc94f56809ac",
+        "description": "egl: re-format using clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f30081e5868add81c7579585287ec120869840d1",
+        "description": "egl: prevent clang-format from reordering some headers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f2300eeb67ada8fedcf3c6d6e106f7b522ad4293",
+        "description": "egl: protect the formatting in a couple of places",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "659bace01a5e69633fd8ca756793f93eac59ec42",
+        "description": "egl: add a few trailing commas",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "35d8db96ed2f714d8164d1b048f75da2a77fe558",
+        "description": "egl: change a couple of clang-format settings",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f5eec48799b40c92ade1a928305996a654bc25c7",
+        "description": "clang-format: add wayland foreach macros",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d4575d7fcb128d0137a727c538a3552dca9b57a6",
+        "description": "clang-format: add egl foreach macro",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "66a01b9377b4849c69080591323f81124534f8ab",
+        "description": "ci/amd: switch all possible jobs from X11 to Wayland",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a6740ee7a4de17ce05fa10c872d6a6f08b39b77c",
+        "description": "d3d12: Fix indexing of local_reference_state",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "7edae456e2c64d0328037c42b61fd829e29c97c2"
+    },
+    {
+        "sha": "8166c1f8c1a99c08097219c25849b5f03fdde818",
+        "description": "intel/genxml: Drop incorrect compute aux-inv register entry",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cc6c35518fe5049b831a69b99c2e5f0cf9c7bab8",
+        "description": "intel/genxml: Fix typo in CCS cache flush enable",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a126ba0cbd0bbb19d975032ab661d25614afec37",
+        "description": "iris: Use correct CCS0 aux-map register offset",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c328638b3b2e156ca53c904bff0c15b1a649c54f",
+        "description": "anv: Use correct CCS0 aux-map register offset in pipe flush",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1fb946091378654dc9c1630e93807022e88f4fc4",
+        "description": "anv: Program compute aux-map base address during queue init",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b4ab4e85498f1bd318c26360d4060b32058a6261",
+        "description": "intel/genxml: Add COMPCS0 aux-table registers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0908adf567a82a8e98dad20010ead367c9079ff0",
+        "description": "ci/windows: Re-enable Windows builds",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ea3c73b33c6bbd40b0525027304f9c9e53d32cad",
+        "description": "microsoft/clc: Fix usage of nir_builder_at",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "12a268ea813ba3caaee9cc34d0fe597d66a2d574"
+    },
+    {
+        "sha": "511116d6307a033ab3a08506246115e95c905999",
+        "description": "radv: Fix label name",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "158813816e7a9b16eb92786f9137ae7c84013544",
+        "description": "virgl/ci: fix skips definition",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5b2e672bb0bc1f2b798b2ced52348e88c192cf64",
+        "description": "v3dv/ci: skip more tests that are timing out",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fb7c9745141e1e27f98641d05ae423593fded9c6",
+        "description": "v3dv/ci: fix skipping of vk tests",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d5e01e67a4f12870144d56007fd4146ec1d36da4",
+        "description": "vc4/ci: fix skipping of gles3 piglit tests",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "975a8ecc881873744d851ab0ef45ad7698eaa0ef",
+        "description": "frontends/va: use resources instead of views",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "025dcbea661e25a6eb9ad99d11459f5913cd1ce0",
+        "description": "d3d12: implementation for get_resources()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e4389fe0eeca196c62e8ea3be5f506a4f162f492",
+        "description": "nouveau: implementation for get_resources()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8e147746c40625ee8b1638237f8d4204a47cba37",
+        "description": "gallium/vl: implementation for get_resources()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "815e8cee7d3a7592c34a93dbaaabefd1c51b8cae",
+        "description": "gallium/pipe: Add get_resources() to pipe_video_buffer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a5ccb4dafbabd7d54d0b7b8f8b7e1c751ee46763",
+        "description": "ci/lava: Use an alpine image for SSH client container",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "db3b5370ecdf65f7789350df7851908915c22871",
+        "description": "ci/lava: Add LAVA SSH client container",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d222502624203286c60000bb645e0b79ab1218cf",
+        "description": "ci/lava: Increase Docker action failure_retry counter",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ec819a16b92c42b54f052cd487822426f9fb2c6a",
+        "description": "iris: Convert to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7471bc2574dfb0f22555210f1da317572ff30a02",
+        "description": "intel/vulkan: Convert to use nir_foreach_function_impl when possible",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b6cfb9aa9d8c9d913b8c37f2c202f004725e4aab",
+        "description": "zink: The result should be assigned a value when returned",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2ad2af19cea83e260c409866a8ae2e4b688fada6",
+        "description": "lavapipe: Always advertise formatless storage image OPs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d681cdf4a6d94021c9a75c8aedff32b01c441606",
+        "description": "rusticl: support subgroups",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0fd1b21db2b222a9afbecdf6a8d8b820c69f9d83",
+        "description": "rusticl: deal with compute_param returning 0",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8df5cfa3a66a647b5fe78ae962ec060003dc799",
+        "description": "gallium: change PIPE_COMPUTE_CAP_SUBGROUP_SIZE to a bitfield of sizes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "13df23bd67edf388d856328de4afd2e8c5f5c5b3",
+        "description": "rusticl/device: rework subgroups to subgroup_sizes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "af98c5c77cb0b9089e58e86665eaea872230029d",
+        "description": "rusticl/util: add div_round_up",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8dbccadb71edcd1569468fc18c6b7fac056f8a4d",
+        "description": "rusticl/util: add an Iterator to iterate over set bits in an integer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b5f8ddee58fefc91a8d2f0ae1d58377c582c4939",
+        "description": "iris: implement get_compute_state_subgroup_size",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f0b2944a0bf63abde981e742984ff10a0c034c70",
+        "description": "gallium: add PIPE_COMPUTE_CAP_MAX_SUBGROUPS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "98d6edc6ad87e63bbac90e33869b98293c3250b1",
+        "description": "gallium: add get_compute_state_subgroup_size",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b72d9509392174caf88f6e90b3a2725e047706f4",
+        "description": "gallium: add simd_sizes to pipe_compute_state_object_info",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5afed0661524a14758210ee5dc524fa7fa1b4ac0",
+        "description": "llvmpipe: report the proper subgroup size",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1e655b2f2550aacd768138d74ce857cc25bf9fae",
+        "description": "clc: rework optional subgroup feature",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "17e749dc0026b178254cf2c069a213f326681960",
+        "description": "vtn: more CL subgroups",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "11cb1a7bd7a82acd7c0875fc12f5ba9838790d01",
+        "description": "docs: add missing get_compute_state_info documentation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6562e898936a99bc2fcc0a1760f7a0a9ff24b9b9",
+        "description": "v3dv: Use vk_index_type_to_bytes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6d5979f1cdef1e51e763d58261d3169d4938f76f",
+        "description": "lavapipe: Use vk_index_type_to_bytes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b733fcb3370fa6a80d461764aeaecf07f8ed6d10",
+        "description": "vulkan: Add vk_index_type_to_bytes helper",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ce2252d2659d4086047bd3308d1b6aadc5ef2e60",
+        "description": "etnaviv: Convert to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1c268196b848a4c5b48ba4ecfa802d9ce578bcaf",
+        "description": "meson: Prefix Vulkan \"Ray Tracing\" summary with \"Intel\"",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "334bcb31a51a18b0da942a14164b474a5686fee4",
+        "description": "etnaviv: blt: fix multisampled blits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7552f481dc168f744c675eee21a4433a16819234",
+        "description": "etnaviv: rs: fix multisampled blits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "12e4988e8260150b831bc11f9d7e31c97c413b29",
+        "description": "etnaviv: move resource level dimension members to make comments line up",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8f3e298a588b1027c8d7ce30d2eb457e507eb8bb",
+        "description": "r600/sfn: Shorten array elements live range",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "409486aa5749534494c6d895d2ed1d02aec05d93",
+        "description": "r600/sfn: Be more conservative with AR re-use",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d21054b4bc92a1a9240841dca719f81a142fd5cc"
+    },
+    {
+        "sha": "91fa1970c9978edb6de4da1066f1b213e9bd2868",
+        "description": "r600: Pre-EG  - Set wrap texture modes to repeat when seemless cube is used",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "bf3027c3916ad5be172c22851e7172671709a9bc"
+    },
+    {
+        "sha": "75fd29036f1e4b401bf519e126df0848d008fb15",
+        "description": "venus: recheck valid bit after acquiring lock to init ahb mem type bits",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "432ffaf10a5720e6a254da64d438ae9efe0f69bb"
+    },
+    {
+        "sha": "ee7e440743fd48c8e38981ddcbf248c957a26a9a",
+        "description": "ci/radv: Add testing of the GLES CTS using ANGLE on stoney.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8d7d2aeba29115d9d717b3c9f58ab23e8e37a878",
+        "description": "ci/radv+radeonsi: Fix the combo rules to include core vulkan changes.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2e3c445b680ed5dfbf65e85a3484a8e60c4abccc",
+        "description": "ci/anv: Add testing of the GLES CTS using ANGLE on TGL.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ebec1e36778911ca52158a593e427b74b64357d8",
+        "description": "ci/x86: Build ANGLE for testing layering on VK drivers.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0811a51e9ab8b7382f976bf3e92334abc70386ef",
+        "description": "ci/amd: Report flakes to #amd-ci on OFTC.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6bf4b89fcb0e71957eb7266abb8ce2b08d867cf9",
+        "description": "ci: Clean up .intel-rules definition.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cc7aaa2c54532032daadd4d990eb2ff7cea9a15e",
+        "description": "ci/anv: Make anv-manual-rules actually manual on anv-only changes.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "26d83ae255945177e25cd9a071db22d177c7a2cc",
+        "description": "venus: refactor query batch handling",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c3ad8c2f94f3abf9ecf642ad415361c654b8d0fd",
+        "description": "venus: cache query batches at cmd pool",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a74b6061423ccc5772bde61c58dc16827ea17423",
+        "description": "venus: refactor vn_cmd_add_query_feedback and miscs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5889995fbdfa9364fdc3f14b261aca7812b25c5c",
+        "description": "venus: cmd to reuse alloc copy from cmd pool",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "81aa680b3ceffda693c40d89287e16dee00b1de9",
+        "description": "venus: track pool in cmd and track device in pool",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fe4cf26687cc9a2abd737b0a3fb368a1832cc3b8",
+        "description": "venus: fix leaks from tracked present src images",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ee3f17ca7909412fc9ce1288324edea3bc2e312a",
+        "description": "venus: fix a cmd tmp storage leak",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "87b99bf47040045cc6bca57c447a55acc220bfc3",
+        "description": "venus: extend VkBuffer cache to cover concurrent sharing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1e172342608f549a83e5b730493a922a701628b5",
+        "description": "venus: refactor buffer cache related bits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "432ffaf10a5720e6a254da64d438ae9efe0f69bb",
+        "description": "venus: refactor ahb buffer mem type bits cache to be lazy",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eaab20c58f1b04ec1979910f035a8ff467e74a3c",
+        "description": "ci/etnaviv: update ci expectation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5ebbb937af6cadd63e5e9223d6fae837d6db8058",
+        "description": "docs/features: add hasvk entries",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1bed67dc3a9662a31055dbaca994e2515d08642b",
+        "description": "docs/features: add more missing extensions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "80731c4b437ad093f970f5d520211e7c0f5516c1",
+        "description": "frontend/va: Remove fence_server_sync for surface in vlVaHandleVAProcPipelineParameterBufferType",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "fb1783616e3950837b59f3e611235c0b6d288f62"
+    },
+    {
+        "sha": "52647bd221f859d313fbad7159b17a5ecea5eeef",
+        "description": "frontend/va: Fix vaSyncSurface and vaQuerySurface status for drivers not implementing get_processor_fence",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bcc1e3396658ad08f766f7c2c482d0b487c5e275",
+        "description": "docs/codingstyle: fix clang-format command",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "209a347a8c3341318981cd5bf64d7792c19542d0",
+        "description": "zink/ci: fix skips & flakes for zink+radv on vangogh & navi10",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "827e7182a5b6a25da67c5d88666653244eadb59c",
+        "description": "etnaviv/ci: fix skips definition",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "703102d7cbd1a72169eb439cbf4fd768894845d1",
+        "description": "intel/ci: fix skips definitions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "42df7131ba9870a81559fc2f67f5842bb05aebfe",
+        "description": "panfrost/ci: drop invalid skips that are already marked as known flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6686a1e7ea449a88596e91c9e495c1484ffe28b4",
+        "description": "zink: fix anv ci flakes (for real this time)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1c29200a15e3e70b03c21501635bdf392104fd0a",
+        "description": "vk/wsi: add error logging for syncfile import/export failures",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a69a4f393b0b0ae36241c8ced2c47438386a529e",
+        "description": "vk/wsi: unify dmabuf exporting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2b885b233f7a6300ae88732c179888c02788493d",
+        "description": "vk/wsi/x11: stop roundtripping on presentation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "36d5b58317179e5db32800743ef0faed4655b9fb",
+        "description": "vk/wsi/x11: handle geometry updating more asynchronously",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fb9f697fbb8f836aaf12a269195841e36b93adf2",
+        "description": "vk/wsi/x11: move surface alpha check from get_caps to creation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "776f258ddbaa6e9ebabbda6e99285f7b23c4ac09",
+        "description": "zink: Free the cdt when an error occurs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0a6dd797ea7fef18eb9e4665bb442e02c4340be0",
+        "description": "nir/opt_shrink_vectors: enable sparse intrinsics shrinking",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c26c0a36d3468c438261801c87f53e96b93efc64",
+        "description": "intel/fs: disable coarse pixel shader with interpolater messages at sample",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "30163c59f70c0624b7326f7b2a2e2185f4fae05c",
+        "description": "rusticl: Drop Program::kernel_count",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3dde5c231e15480466e7aa08ebbd1d7e5a2dd9e4",
+        "description": "rusticl: Drop some Kernel data and have a NirKernelBuild ref instead",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "005b41fd3915146494434c2ab5d1909bda2b5943",
+        "description": "tgsi: uint -> unsigned",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a42dc4ef5e59ee98743a4c9e2e74a06fdb210a68",
+        "description": "tgsi: uint -> uint32_t",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dcbca3e3b3f72297dc237bc62b181bb43592e0f5",
+        "description": "tgsi: use enum for interpolate-mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "733ed06e94038d35da5be4f5cb305554e36451df",
+        "description": "tgsi: use enum for shader-type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e4b86e76cf76f136ce67aa3246ac00ed6f925366",
+        "description": "tgsi: use enum for property-name",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5ccf63dc9d8b8d37e93410f843201172c06e4c8d",
+        "description": "tgsi: use enum for tgsi-file type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "32f40b2e81346132ee1446d58393a9fb20980af9",
+        "description": "tgsi: use stdint.h types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a65da48b6ccbbac286ee6286acec50268f63472f",
+        "description": "tgsi: use enum instead of defines",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e8114fe9a74843398b1050248b6d9135192bc486",
+        "description": "aux/util: uint -> unsigned",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "284151262fde82ca88a349de6ce7cae318b42bc6",
+        "description": "aux/util: use stdint.h types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3f79b51dcd6bdb23eca5f7bbaaf0d9099977d038",
+        "description": "aux/util: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ae0df2a52faa49230adca955ac068d545f1a7653",
+        "description": "aux/util: use enum for primitive-type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "70e153e8d088a77dc362f925ff597b29e881e7f3",
+        "description": "aux/util: match type of pipe_draw_start_count_bias::start/count",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0f98f750db30d2b650d319e6f21f44c7fcb19409",
+        "description": "aux/util: use enum for render-condition",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "647241a770c365a77ad8354145d3f2a1f0f44ec8",
+        "description": "aux/pp: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "872719d15cfcf45059f8107746929851677e21d3",
+        "description": "gallivm: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c3ec99bf9a5c8248cf0d12b3f232209611022fd8",
+        "description": "pipebuffer: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d29bb6467e2a37b480fc7ff8bf0334d68c74c3a3",
+        "description": "aux/trace: use stdint.h types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d941078129bad10f87cb93e4d2164904adc77cff",
+        "description": "math: drop MAT_[ST][XYZ] defines",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4a00e4ff6122afda320ed5ab1a3abbab5cb52027",
+        "description": "math: remove unused defines",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "386a365645828ea455bbe4670c79209843edbdb0",
+        "description": "math: fix indentation in m_matrix.[ch]",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a4c5d0ebea5d1b16c8f778cc6b3f727065e886fd",
+        "description": "lima: use u_pipe_screen_lookup_or_create in the renderonly path too",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a57dc77482d9723cc1e1a459bff19d4616f90b22",
+        "description": "docs/features.txt(fix): mark VK_EXT_pipeline_robustness as supported on radv",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b10877078b1a68791ae807c76bf2de519208723",
+        "description": "vbo: correctly restore _VaryingInputs for display list fast path",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "3a294ff01fb9d1d8b4f984a364ed7ef469624c49"
+    },
+    {
+        "sha": "5c1d91d5da45000a62b273ecfc8ac1c7f4bdc7ca",
+        "description": "st/glsl: merge st_glsl_to_ir.cpp with st_glsl_to_nir.cpp",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c6fe8b7cba031a0b694dc304e76b58b55ac72b8a",
+        "description": "st/glsl: merge st_link_glsl_to_nir() into st_link_nir()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "692c97c70a827f1b7c29722b6fa7676e90ef0f1f",
+        "description": "st/glsl: merge link_shader() into st_link_nir()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ac2b3cf7ef48fccf17f43ae1df6f762122df4f8e",
+        "description": "glsl: remove glsl ir optimisation loop from linker",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed3fe89562ff6dcf56ccbc4f69862a4797e3fb89",
+        "description": "glsl: move store_fragdepth_layout() to nir linker",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e8c2c59372ad7d7a8d1a6a464455147be81aa0ca",
+        "description": "glsl: drop link_invalidate_variable_locations()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ee68c633e942dad39ed3be51984e83946b6762b5",
+        "description": "glsl: set last_vert_prog in the nir linker",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0d7b5f8b309fcc1af310a7d97acf40036b022f23",
+        "description": "glsl: inline link_varyings()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bc66c2588ac96ab41f95e3bb2e9b1999de472e05",
+        "description": "glsl: remove the always_active_io flag from GLSL IR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "06f3988c582b8761a5eebe13d9c252d03955c03d",
+        "description": "glsl: move disable_varying_optimizations_for_sso() to NIR linker",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7cff8d85c0617d8bafa69d7f23ae124dcaa0969b",
+        "description": "nir/glsl: add nir_var_declared_implicitly enum",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8534c7b4cfc0f8450da2c03d8ffb74cdafee4c6",
+        "description": "glsl: drop the dce of global vars from GLSL IR linker",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8c485efee4f7fb50faff0c56b59dc3c9d66dd41",
+        "description": "glsl: remove unused system vars",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cbff8f8c5c5e9a9712733105ff6d42c11a72271d",
+        "description": "glsl: remove unused buffer objects with packed layout",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fa56e911b8bf16529031814f6753fc052d2fb3c4",
+        "description": "glsl: call assign_attribute_or_color_locations() in NIR linker",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f3c6718f73c458aaae553f7d826956cb1fe8802a",
+        "description": "glsl: port assign location code for VS inputs or FS outputs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6786a39940eb93c656af184fb3990f8e96c01ed4",
+        "description": "glsl: move lowering linker code out of st",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a5131074247cc020bae657ac0aa2ad53b3501cbb",
+        "description": "glsl: move some compiler code out of st",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ef5893687659a6ee43866c0044ea9ce542a6fb9e",
+        "description": "mesa: add some new constants",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5f26c647fbfbb015e516017b0ab75a02dbe67d4d",
+        "description": "glsl: add some more c wrappers for string_to_uint_map",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "be91133f8767cd37325403f599038a5841370f68",
+        "description": "broadcom/compiler: don't leak v3d_compile when finding a new best strategy",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dcc6288a137fc8f1eed1cb1e7431e2f8640ac972",
+        "description": "broadcom/compiler: free defin and defout arrays if they already exist",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b9de7da421d2dde4e473c50cc9293e693836d7f7",
+        "description": "tu: Add missing dbg reg stomping to tu_CmdBeginRendering",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "39427352f6e040b9f8d9d0f3a615d9e481c8d89c",
+        "description": "llvmpipe,lavapipe: Relayout lp_descriptor",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b1a1e21632231baa3b386cf6be20a1bf8957708",
+        "description": "llvmpipe: Allocate more dummy sample functions for FORMAT_NONE",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91d090f0e7fe33c32238822388d2845cb28bf319",
+        "description": "llvmpipe: Allow comparison sampling for float formats",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9caf625490bbfc1ff7ea591f8257a225d036c55a",
+        "description": "lavapipe: Set the descriptor count to what vkd3d-proton requires",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f281290005119ddd2dc82e0b7a4cc22551d7fc71",
+        "description": "gallivm: Fix atomic_global types",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "791785c2b4c01abf1a0207fb4697789ff03af218",
+        "description": "glsl: Fix yylloc.source propagation in YYLLOC_DEFAULT",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a0cfe8c44085032fd982bbbff1f02252ffaa7114"
+    },
+    {
+        "sha": "80ccc3f822d32f014ccb7ab7283a1a80e6f7d9ca",
+        "description": "radeonsi: fix refcnt imbalance related to util_blitter_save_fragment_constant_buffer_slot()",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "03bc7503d471dd2d2795a8f18a7212e98209a051"
+    },
+    {
+        "sha": "fb5ecbb4fe9d9f58afee341116def699f3bb8341",
+        "description": "clc: llvm 17 requires opaque pointers.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b392d3ac27be026feab32da0d803a229b52c812d",
+        "description": "r300: assert that every writer has a reader",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5716700bbf9f88839a32eee1fd6f669e6d89b015",
+        "description": "r300: disable ntt regalloc for vertex shaders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7c291fca156be75be0726af411282dcd40bf6da3",
+        "description": "r300: remove most of backend contant folding",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "41f1dd89a35a3396f562e7a07d8234439f87a6aa",
+        "description": "r300: add some early safe bool lowering",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0bf6dcb785ce82006f9757217153735e39127834",
+        "description": "r300: lower undefs to zero",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ba83c1e254d8a968c166610765ab92ce4cf0778e",
+        "description": "radeonsi: Use ALIGN_POT instead ALIGN_TO",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4880c827d63a1fd674b1b7cd5050c5e837316cde",
+        "description": "radv: Re-enable RT pipeline capture/replay handles",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "169583a4addf7fd5a59b3897386d561c23b36a60",
+        "description": "radv/rt: Rework radv_GetRayTracingCaptureReplayShaderGroupHandlesKHR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fccf6fbeec6301590b6fe2a64169fbea26ab2386",
+        "description": "radv/rt: Replay shader allocations according to capture/replay handle",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3e9bd821f15a5fa10bbe303e2b2fd4c2c6e0dc1a",
+        "description": "radv/rt: Associate capture/replay handles with stages",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eee0068943f586a2d1344e2b9880414f1b17dbfb",
+        "description": "radv/rt: Only compare the non-recursive capture/replay handle",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "59d269c48e6e094c04f6a25a7796099dc76a699d",
+        "description": "radv: Add radv_rt_capture_replay_handle",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e3bd54d2a82e83c052ed3f1360f8bb2e5428ea2e",
+        "description": "radv: Add support for creating capture/replay shaders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4f192b9af4472c157e59646153c0c3ed59cbeebc",
+        "description": "radv: Split up implementation of radv_shader_create",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "51f2fa1a5ef0e05fb4b95ba914fbee787d983fee",
+        "description": "radv: Break up radv_shader_nir_to_asm",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "878a731c77b17b05f06e1179e43195165ea45cac",
+        "description": "radv: Add radv_shader_reupload",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "744357477efaa0190c25f77fc15b744ff3931786",
+        "description": "radv: Add utilities to serialize and deserialize shader allocation info",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d23e41de6cd9d87e820b07a0353780dc771e39a1",
+        "description": "radv: Add option to allocate shaders in replayable VA range",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ec9f5b77779350ac066930250e0e0ac129663a76",
+        "description": "radv: Move shader arena allocation to a separate function",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91241014e886d5f72af5373331cc61bc1b6581e1",
+        "description": "radv: Add radv_shader_free_list",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5cc9569b5b9d8e5c696c70af3cc79f13184a5474",
+        "description": "iris: Convert slab address to canonical",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0e7e6f2a0d67af0533572b2d9a7ce7149830f225",
+        "description": "nir: Fix breaking in nir_foreach_phi(_safe)",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7dc297cc14196ec1f9a4908395d89dfd00de859a"
+    },
+    {
+        "sha": "ee62f4629a4da6a4e0e1ea011941d7cccb7b41a9",
+        "description": "kmsro: assert that scanout refcount is larger than 0",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "279d08a18a3ad52c0636674ba0aed65368cfe01d",
+        "description": "panfrost: remove BO from cache before closing GEM",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a0033a1c9c2c0bdf291fa44fb608357bf2f88dc",
+        "description": "winsys/panfrost: Make sure we reset scanout on error in create_kms_dumb_buffer_for_resource()",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ad4d7ca8332488be8a75aff001f00306a9f6402e"
+    },
+    {
+        "sha": "45a27adc3b9c45e04945add803de58cc9d285a50",
+        "description": "renderonly: Make sure we reset scanout on error in create_kms_dumb_buffer_for_resource()",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ad4d7ca8332488be8a75aff001f00306a9f6402e"
+    },
+    {
+        "sha": "8568a46c1ca64092dd2f3f8f140ea1f261db2b1c",
+        "description": "renderonly: Fix potential NULL deref in the error path",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ad4d7ca8332488be8a75aff001f00306a9f6402e"
+    },
+    {
+        "sha": "8087f784e4268476411a6c3b944731bee2315d10",
+        "description": "winsys/panfrost: Fix a scanout resource leak",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ad4d7ca8332488be8a75aff001f00306a9f6402e"
+    },
+    {
+        "sha": "46b488151f299581ba3a6acc303e1c16777c84c7",
+        "description": "aux/trace: fix bindless texture dumping",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a28f9738e1781ebdfb6e485284544905793d42d3",
+        "description": "asahi: Use txf_ms for MSAA background programs",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "d4424950ace16da00cc660e0c4106d19e169b04b"
+    },
+    {
+        "sha": "02ac7305a01a25b43ca06c8a47beb947ddbb0f11",
+        "description": "agx: Don't leak ssa_to_reg_out",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "6b13616cba27fe4566dfc475ead9a8000b469a2a"
+    },
+    {
+        "sha": "2a334a9f4d90d38208488a99716352de39fc72f5",
+        "description": "asahi: Take ownership of compute shader NIR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a004d968742ea8788f2bdf6984c1f74b4305e399",
+        "description": "asahi: Use ralloc harder",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "56461bc0a2e0f8535b7219badd007d09801172d5",
+        "description": "asahi: Fix scissor_culls_everything check",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "98de1b1b9586b1d2f6cb37b620a14316b160f95c",
+        "description": "asahi: Assert we don't transition shared resources",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1140bdb783b7a99d3380dcabcaa2c9ac525bc252",
+        "description": "asahi: Arrange VS varyings in the correct order",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2055e0324342b4e2a98f71937c77299d5507df66",
+        "description": "asahi: Add flat/linear shaded varyings mask to the VS shader key",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4a65b4bb1446201fab8ba2f99b5e5109896ca8bf",
+        "description": "asahi: Fix type confusion for fragment shader keys",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "90834353a1041a03ce033974c1505fea4d3e06db",
+        "description": "asahi: Gather flat/linear shaded input info from uncompiled FS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "49994dc8cb5555dfc35be67d2852acc2d7274331",
+        "description": "asahi: Identify the separate varying count fields",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d9bf52e00f5909b81dd5dcfafaa9a5326ec6fa4b",
+        "description": "agx: Assert that barriers are not used in the preamble",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9bf7d14b2cf5ae98dba7ed43846aec037712a8a0",
+        "description": "agx: Use nir_opt_shrink_vectors",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c81a14c7541f3c8c0a672d7f9b3d33014b0d0e1b",
+        "description": "agx: Use nir_opt_shrink_stores",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "45cbe122821730609ec1ff12f1b2f6aeeea5896b",
+        "description": "asahi: Remove ; in perf_debug_ctx",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b57faede7156c90f355f57ad0c4543ee1212c7b3",
+        "description": "asahi: Identify PBE::sRGB flag",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6dc6991930311ee55077e307d55a761592bc33f9",
+        "description": "asahi: Rename 'Render Target' to 'PBE'",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "75b5bf8dbccf26dd87aa0323b29fe6a7d98efa1e",
+        "description": "asahi: Strip ? in GenXML",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "850380cbf5e6c24975195e05af6590cf45ae7ce8",
+        "description": "asahi: match_soa: Treat offsets as signed",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a90b0743f3b085970f95121738950de76f7c78a8",
+        "description": "agx: Smarten discard_agx -> sample_mask lowering",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5a4c9136cd851cb276a507752a189b13122a5be3",
+        "description": "agx: Add algebraic opt to help with discard lowering",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "54bd804ad30e0c465762d5a5e06ee40b817c317c",
+        "description": "zink: don't destroy swapchain on initial CreateSwapchainKHR fail",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2fc2597fe533f4303fe6c1ab33f86a615730fb3b",
+        "description": "gallivm: make block_size use discrete values.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c0123d792ceb20cef60fbe065348e09de98dc240",
+        "description": "gallivm: convert grid_size to discrete values.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e021973f5a4051f33661d3ab66a940c411d3750b",
+        "description": "gallivm: convert block_id to discrete values.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bcb5dbf23227f59980bb67f8a7099f79a7a033a9",
+        "description": "gallivm: store thread id in separate values.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d0e6809ee5e0b68140313cab20422fd2ea861afb",
+        "description": "anv/video: fix to support HEVC 10bit on some of 9th gens.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "649e12c8973fad650b307f5075dd2cae12ce2481"
+    },
+    {
+        "sha": "59cf3702c4bf3734e42a8ad5e086a3a6ed59d4b7",
+        "description": "radv: Remove unused pipeline param from radv_generate_pipeline_key",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5ca8390e5f18f68ff5eef357b600db415429eaae",
+        "description": "radv: Advertise VK_EXT_pipeline_robustness",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c9ac960b6a7ea37840ec151e05335caea6c740ff",
+        "description": "radv: Implement VK_EXT_pipeline_robustness",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3e269c7a4e309a232177bf15a7994ae0270b8627",
+        "description": "radv: Rename radv_required_subgroup_info to radv_shader_stage_key",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2c6125c1c5336ce6b8aa20ca63428afc1335b7a8",
+        "description": "radv: Split and move buffer robustness to shader key",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3e36b47b962535fdf3561ca9db94ce9e6dad64b4",
+        "description": "radv: Rename radv_nir_compiler_options::robust_buffer_access to robust_buffer_access_llvm",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f52ebc8b40efedff21281aeedf23ff7b5d9aae39",
+        "description": "radv: Refactor buffer robustness to an enum",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "59aa49494c45b5a38484d7aed1147416e9eaf479",
+        "description": "anv: Drop unnecessary intel_canonical_address() calls around bo->offset",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "27e20c87265136be549ae7d012cd15c425d1b829",
+        "description": "anv: Drop unnecessary intel_canonical_address() call around anv_address_physical()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2fa4fe2c8580e78ce0a162003da580b00727f840",
+        "description": "anv: Fix some mismatches of canonical and regular addresses around anv_bo_vma_alloc_or_close()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f948393005e45592aac0a7167b951d0a1ca1d49c",
+        "description": "Revert \"ci/fdno: Pause a660 testing\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "e207458ad509c6dc670bfdef9e1a3685aa4ee5f4"
+    },
+    {
+        "sha": "a775b9cb640138c96142f7f1efc9360411bc639d",
+        "description": "ci: restore lima farm",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bbdb615a868f3bc9fc04f7c2f603ee49f2b31031",
+        "description": "v3dv/device: update conformanceVersion",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8f8ea2dd6894d4d30c01304a67f8e81a77c87415",
+        "description": "broadcom: Switch to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "edb607ed9fae6bf407b1e814dba082033a14fcfa",
+        "description": "v3d: Switch to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9cfded7f1b3f9469a0906b783751229f8e534016",
+        "description": "vc4: Convert to use nir_foreach_function_impl when possible",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ed9ec70c0166147b52774727496ebbbcb0ce182",
+        "description": "intel/compiler: simplify reading of gl_NumWorkGroups in task/mesh",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1ac1d5d62e26764720c44ecca90537baa8132b17",
+        "description": "anv,intel/compiler: enable shortcut in wg id to wg idx lowering on >= gfx12.5",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3d7513ee8ea0c5c0b14b39dd2ab8f4dc23781bc1",
+        "description": "nir: add cheap shortcut for wg id to wg idx lowering",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ec1ef75d346000b694984847ec36e4433f5eed6",
+        "description": "intel/compiler: pass num_workgroups from task to mesh shaders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e7ca9d70f5fc6e4bce0f699a016e7fce4e87ec45",
+        "description": "nir: lower num_workgroups to constants",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b9eeee8554cf1bd6c97e29e0ee1fc106a6b8b24d",
+        "description": "nir: use constant components of num_workgroups in wg id to wg idx lowering",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ebfbc97a86e90ef67672ed6117e3cf45bbdf1bb",
+        "description": "nir: use wg id to wg idx shortcut if two dims of num_workgroups are 1",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b5792c1a3421572c86667b6fbb9878531caed4de",
+        "description": "nir: extract try_lower_id_to_index_1d",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1f8ecd3ae0e43c17361de75f338060c3e2bcb6e8",
+        "description": "broadcom: use nir info to keep track of implicit sample shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "59e2760d8f76882a0b20540ed9ed60d1a0878e19",
+        "description": "pvr: Use alignas instead of ALIGN_ATTR and remove ALIGN_ATTR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dadb7244bb3df10b1418146b5a5c1cffa8364973",
+        "description": "etnaviv: support OES_texture_half_float_linear",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3f726f4ca5a8cee66fbf7f277223a63b2d6684bc",
+        "description": "docs: mark OES_texture_half_float done on etnaviv",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fd4d0e1cc23ff64d4d9b852e3f5cc7454c7b2018",
+        "description": "st/mesa: Set gl_config.floatMode based on color_format",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "649e12c8973fad650b307f5075dd2cae12ce2481",
+        "description": "anv_video: reject decoding of unsupported profiles and formats",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "832c408b63f5ef24fbb1d4bd9e1934c253a22799",
+        "description": "lavapipe: expose subgroups in mesh/task shaders.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c142736f52f537fb0dcef959b1a6bc2ac2e8335e",
+        "description": "anv: Fix compute maximum number of threads value",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "608504c7747c6b38e840f4134c9092191c68f90b",
+        "description": "nir/print: Reformat the preds/succs block information",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a188337972e712232032d0edce68821ec8421c1c",
+        "description": "nir/print: Print div/con annotation first",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "884debdee3f21ae6281d21f11414506aa67deaae",
+        "description": "nir/print: Use 4-space indentation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9215aad7daa72569031e78bfde5470d0d54c5a9d",
+        "description": "nir/print: Use `//` for comments",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1c0038d5d589286f320e989ad6b994404208b838",
+        "description": "nir/print: Don't use comment syntax for deref_cast properties",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "88c411c6388ef1dfe793d38502eddbe28ffff72e",
+        "description": "nir/print: Rename print_tabs() to print_indentation() and use it more",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "761d90341fd1b7e19857c2de494b714e47b98243",
+        "description": "nir/print: Align instructions around `=`",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "58e3abc4a37027cd0fd315b5ed3752e7dd3fdfbe",
+        "description": "nir/print: Use BITSIZExELEMENTS for SSA sizes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "252a6140ead27cb314397c544bd838523428d498",
+        "description": "nir/print: Use `bN` instead of `block_N` for identifying basic blocks",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ea44879d2d9353685fd94d9b97c73ec294f4f185",
+        "description": "nir/print: Use symbols % for SSA and @ for intrinsic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c4d3bc03c4e76759e7297a9d3a8d10b5000c84b5",
+        "description": "nir: Add nir_foreach_function_safe and use it",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0fbec6dd79ee02989b5541f272a23fd32f0fa797",
+        "description": "radv: Use nir_remove_non_entrypoints in radv_shader.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c545c39c7e5af7808fcd58409f9f266c013535ff",
+        "description": "glsl: Use nir_remove_non_entrypoints to simplify the code",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1238a652510c1035865ba44effd3e0430819cfc8",
+        "description": "nir: Update the comment to call nir_remove_non_entrypoints directly",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "823a1047e91d05629f77e776c8d39a5e5722a787",
+        "description": "dxil: Use nir_remove_non_entrypoints",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "20beebb0414a53b85556d2750bba83847aa776a8",
+        "description": "amd: Move ac_hw_stage to its own file",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "82aaf1893ddd711b61339e2ace4c56b99fb8e9c9",
+        "description": "nir/builder_opcodes: Do not generate empty intrinsic indices",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e379b9ad8c37edb4a583aefa876ab5f11a36b572",
+        "description": "nir/opt_dead_cf: Handle if statements ending in a jump correctly",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7be8d0f7f490ea58c89798efca7e45b84dc395da",
+        "description": "tu: Use common dirty tracking for PC_PRIMITIVE_CNTL_0",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "97da0a7734188f4b666bc38833bfadc8b4c53f84",
+        "description": "tu: Rewrite to use common Vulkan dynamic state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "56cd6a8b6474f78ca61fdd34139ae854e1611cb4",
+        "description": "tu: Split pipeline struct into different types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "db1ea9f749eabd99c442b9d37f65b93ed9d87a19",
+        "description": "freedreno/a6xx: Fix name of A6XX_PC_PRIMITIVE_CNTL_0::TESS_UPPER_LEFT_DOMAIN_ORIGIN",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5704d0ad275fea1e50526a3fdc268a63a731bf80",
+        "description": "tu: Don't use A6XX_PC_PRIMITIVE_CNTL_0::TESS_UPPER_LEFT_DOMAIN_ORIGIN",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "df7be7323a300fe7f146ce07dd3d804849cd628a",
+        "description": "vk/graphics_state: Don't track each vertex input field",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2a8e627e3a41dbf7e363c81cc55ea939bc6a2afe",
+        "description": "vulkan: Fix renderpass flags with driver-specific renderpass",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "f3876db1ee5a6362ad301a236db767862b93c648"
+    },
+    {
+        "sha": "ea52d0d9e07ccbe662d798d6cd12c7c66ddb41d1",
+        "description": "vk/graphics_state: Track attachment count as state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d322a80170f605e16a09b7034dc0e4a86340b71f",
+        "description": "radv: Fix radv_pipeline_is_blend_enabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f497cc9d56e173c62a87b81b02a284e20eff9345",
+        "description": "vk/graphics_state: Add helpers for pre-baking state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5405c9ed5057c5f1e8dc2a362afeda2078abec0f",
+        "description": "vk/graphics_state: Fix some assertions when copying state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7da44ef671f9b61b3b1a52c86ba6aa2ff9add69e",
+        "description": "vk/graphics_state: Add VI_BINDINGS_VALID state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ea4257be32db088aaa4893f07943eb1a611a77d0",
+        "description": "vk/graphics_state: Add feedback_loop_input_only",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1d5eeefd9b10df5d12eb2961d29bbae8a35befc8",
+        "description": "vk/graphics_state: Remove vk_subpass_info",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "282e73118d59ad1204ccc1aaff3aa8b267bc2ed2",
+        "description": "util/bitset: Add some extra functions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5be8f98f5ac5cbdb314bdd88d6b6f51642d7701c",
+        "description": "compiler/clc: Switch to use nir_foreach_function_impl in function nir_lower_libclc",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0dd0f35205c7442fb41e205d543465aea6d8eb4f",
+        "description": "v3d/ci: add new flake",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d2719c317779041887ce89205842eb1a5dd334c0",
+        "description": "d3d12: Video Decode - Refactor and style fixes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5a8d8dad9a890a19ecf4734a28043d5188fdb33b",
+        "description": "d3d12: Video Process - Implement get_processor_fence and async queing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c875028b02827e3acdac6cb917756c1d5a40243f",
+        "description": "d3d12: Video Encode - GPU wait on input surface fence",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9510c11c6fe6dd6d5791f32db192985442ac46b2",
+        "description": "d3d12: Video Decode - Sync 3D context copy with decode work for texture array case",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4b15eaeba8b5670089991f4db0c59de278dce4b7",
+        "description": "d3d12: Apply style format to d3d12_video_dec.cpp",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "af0b4eacab74e37bb682cccccd7d24fc41482614",
+        "description": "d3d12: Video Decode - Implement get_decoder_fence and async queing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fb1783616e3950837b59f3e611235c0b6d288f62",
+        "description": "frontend/va: Add video processing async fence support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c78611c0ab660dd6af0cc2d99c146692a733dbea",
+        "description": "frontend/va: Pass surf->fence in PIPE_VIDEO_ENTRYPOINT_ENCODE contexts for driver to wait on input surface pending work",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6b09f8f453e4bc1fe23c2611828ef1723bbb655c",
+        "description": "zink/ci: Add ext_transform_feedback@api-errors to fail list.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "94b92718d9fedd6cfb3b1b097558cf87a45906fc",
+        "description": "radv: Enable weak reference cache for device->mem_cache.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3bd72eec1e45eb7b215b4b0ffa0441ecd2c7121d",
+        "description": "radv: reference pipeline cache object in radv_pipeline",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05269047d3c50907dfffa18dfc409938aaabd44f",
+        "description": "intel: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed083055492a5936bf2972758dde48d29148fe1f",
+        "description": "panfrost: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "12a268ea813ba3caaee9cc34d0fe597d66a2d574",
+        "description": "microsoft: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b606d534709696ece7cf9f20a7da45dee1750ae",
+        "description": "lavapipe: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "47934ecf07cccf44a9a95ca7ef254ac6b11bedbf",
+        "description": "zink: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b8486673a024a6cb23d36ebc7479c212b90d72be",
+        "description": "vc4: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "364edfefe4e06c0f3813996191d48cd6285140ed",
+        "description": "radeonsi: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "977f385e65600a97e213849e23e3108a873f3495",
+        "description": "r600: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fba5c97bc1a3bdaac0897ac35a41270e7924006a",
+        "description": "etnaviv: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7f9e790d429fef4f427a987c16f20d3b73be9ffa",
+        "description": "crocus: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2c413ed86f0e1f25be319bb6c6db93d1605590b8",
+        "description": "gallium,st: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79a37ceda099445a4c73d713bb617b80874c76ad",
+        "description": "freedreno: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "be45d4fa6ef4c5b67b2d4e9b4fb27113b922797d",
+        "description": "spirv: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "574079e354e5dcd664c837c892d70ddc09524466",
+        "description": "nir: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c1b472c834f3c89e048e6c0f82809f03d9d8f083",
+        "description": "glsl: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5c8c2ec85c6ed80e2a83ced8678ecf579707bdfd",
+        "description": "v3d: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8ce27e7ed284c3df219f52d7aa869908b4ccd6f9",
+        "description": "asahi: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1ea963c00b7120d260fa67116d290e23134d25d6",
+        "description": "radv: Use nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a7cd20693706c9c0d1a66bad22736e7efd79beba",
+        "description": "nir: Add nir_builder_at",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b774d5f9d5e740b06590eed81c55cb0d5fbe59df",
+        "description": "freedreno/fdperf: Use common device info helpers",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "00900b76e0f45a98d073e04fd51cff759fa870a5"
+    },
+    {
+        "sha": "a9c6f7ffdff88ddedaf5798a2b955610763b763b",
+        "description": "vulkan/pipeline_cache: Introduce weak reference mode.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "47c9fba3221a3e157fba05fcdb6bd8c47fbe604c",
+        "description": "vulkan/pipeline_cache: Move cache_object_unref out of header.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "44bfeb77d9f19c236c86e60c69c42cf56e558040",
+        "description": "vulkan/pipeline_cache: Move locking outside of remove_object.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "64c959e46c7a04aba4853173fe35edb033eb07cd",
+        "description": "vulkan/pipeline_cache: Do not consume object passed into remove_object.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3774c3232c4d655b0ad7dcdfec4bb1e897aac4a8",
+        "description": "docs/features: update anv entries",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eb0610c4012506bd7e7c6fb0feb86e3ef51c3529",
+        "description": "Revert \"ci: disable Collabora's LAVA lab for maintance\"",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d3b6635663f71ef65230ea4a8b321a22a64a9e26",
+        "description": "ci/microsoft: partly revert rename from container-rules to manual-rules",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c9de0d297743ce193010dab8ca451a353dd8299e"
+    },
+    {
+        "sha": "80a140953d91e88c597d2cb91dd3c0cdbc00b337",
+        "description": "ci: when touching farms, never run manual jobs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ece34ec12763068f5a71cd5631dff9d004ba1d99",
+        "description": "tu/kgsl: Fix memory overwrite with vkFlushMappedMemoryRanges when more than 1 range",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5a594109623fff43fcd3b874b160c711e81bf55d"
+    },
+    {
+        "sha": "ae48fae658a510e4fd6fdd4f529694645c421194",
+        "description": "aco: remove 64-bit integer conversion opcodes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1194a3baa98cad3378bf6b22d04349fa075d5c0f",
+        "description": "radeonsi: use nir_lower_conv64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b3b9b22c95365cd359efcfd9b42091340fb23858",
+        "description": "radv: call nir_lower_int64 later",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "38cff03e58b4ae2f7b8275e429cde1c355ab1b07",
+        "description": "radv: use nir_lower_conv64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3d0e997e99e5c61724ef4b56a4e76043513633b5",
+        "description": "nir: split nir_lower_mov64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bd43d9e3d9050d10c728c1e009d317e4c765801a",
+        "description": "radv: Enable required subgroup size on mesh/task.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "34ace6688ac9baaf07f997307ecfd129116518e9",
+        "description": "radv: Use required subgroup info for graphics shaders.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8982bd60453cb4a76c7693fe41d3d802d1f0f0d3",
+        "description": "radv: Refactor required subgroup size in pipeline key.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b8fbce045e6789042f9f5f4e9a0ed42b7d43939b",
+        "description": "etnaviv: nir: do a late nir_opt_cse run",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8d49f66ee91109a5c11c1486869fd41c135492e4",
+        "description": "ci: disable Collabora's LAVA lab for maintance",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1fc98414b6b054bef17a5c5e172dd80465564300",
+        "description": "ci/traces: print version of apps used for replaying traces",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ae69494be00f97b9b6b05a40f06362c16807928e",
+        "description": "ci/apitrace: include version with LTO enabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "40c7262c40747112865cda7146297ab76cd38ff2",
+        "description": "ci/traces: guard DXVK and VK behind VK_DRIVER",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "28667995e4c3437868eea3a51525a6176e105294",
+        "description": "ci: create manual farm rules",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c9de0d297743ce193010dab8ca451a353dd8299e",
+        "description": "ci/microsoft: rename manual rules according to rest introduced rules",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4403797b716af9c7eb93092d1d9962064bdf3f2e",
+        "description": "ci/microsoft: uploading artifacts gets stuck currently (retried)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ea9f8c26bc952c6e0e24e086e364d16aa7841bd9",
+        "description": "docs(fix): remove last ref to i965 in features.txt",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ee69c56c8ca99b678258c06748c47cd1d58c6a66",
+        "description": "sfn: indent fixes after switch to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2b64f29f0fb5c6226a9042732da6bcdf04bc175c",
+        "description": "sfn: Convert to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8410468d2307b0c9f4ae92d48c244dfa65b20680",
+        "description": "llvmpipe: Convert to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0554eec4939f88fd7b6228e0e96531a33c379128",
+        "description": "mesa: Convert to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d86bcc39d64f39d2822b641e7b8ea7f1ea4cf1a1",
+        "description": "panfrost: Convert to use nir_foreach_function_impl when possible",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9b6dbb2a2b15a36e5fb8d066fc3975f5d6d1e319",
+        "description": "panfrost: Convert to use nir_foreach_function_with_impl in function midgard_compile_shader_nir",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "21a0ca7ce58e7a71bfa24114a319a7839261f5b7",
+        "description": "nir: Strip the const modifier on nir_function * in nir_foreach_function_with_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e32cb99dcb9ccb96965b314a3e9257113ad31c81",
+        "description": "util/disk_cache: fix ~/.cache/ permissions",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "87ab26b2ab35a29d446ae66f1795d40c184c0739"
+    },
+    {
+        "sha": "384c8677f590df290c442b378b077fe8e8c365b9",
+        "description": "draw/gs: handle extra shader outputs in geometry.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7e42fdac6b29b33e63904167f07011f40e4ba538",
+        "description": "nir: Rename nir_reg_{src,dest} -> nir_register_{src,dest}",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bed2f3f8e69208bfd97f3bc72c96ed06ea1cf3df",
+        "description": "nir: Rename load/store_reg -> load/store_register",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9a0423a20a3d94874404ef026e71c280e001ef8",
+        "description": "pan/mdg: Propagate modifiers in the backend",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0e97dc25d7736dc4c2a1d8e82cc62b64d003825a",
+        "description": "pan/mdg: Copy-prop even with swizzle restrictions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d78c4c44c311d045bcddfb21f1014854fc3b0762",
+        "description": "pan/mdg: Reset predicate.exclude while scheduling",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "056e8ec8c3c166d6dc16a796760caa725eae252f",
+        "description": "pan/mdg: Lower special reads better",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "23010acc10a344297c1f5791487fb60e42d0bc3e",
+        "description": "pan/mdg: Fix temp count calculation",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7da1e4c326d9f3213060c45ddeb1c65afcba7bff",
+        "description": "pan/mdg: Fix 2-const CSEL at block beginning",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b66b122e0376bfbc81e167141e46f92384869dcc",
+        "description": "pan/mdg: Fix IR from scheduling conditions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "080a1a4cc4f58bfd591a48242bc6dc0f662e7664",
+        "description": "pan/mdg: Add is_ssa helper",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "50449167d5d66c778654d4e79cf2abe087907d46",
+        "description": "pan/mdg: Constant fold after algebraic_late",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e8ffbc77b5c2e843e2d54465e4a37ab46e95a33f",
+        "description": "pan/mdg: Lower isub in common code",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "074e5700cc4434d66a8555a5e4161add6b163760",
+        "description": "pan/mdg: Type CSEL with a NIR pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "311bfd0623d8d20d90c6d693ec31483a1f682a02",
+        "description": "pan/mdg: Optimize b32csel(inot) in NIR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d1f6bcd1d05ab6b9c118dd173f8439866a843827",
+        "description": "nir: Add b32fcsel_mdg opcode for Midgard",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "feea00a6c429e5d8656d62123d5923de69da3f10",
+        "description": "anv: retry batchbuffer submission with i915",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e6cffa1f0e4e54616629177e09881784e33328db",
+        "description": "venus: use feedback for vkGetQueryPoolResults",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "38b1c39b59527c2afadb66c7c14664c7641660cb",
+        "description": "venus: batch query feedback and defer until after render pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e96428d588e4e5494899c29533b3af48311403ca",
+        "description": "venus: track render pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fb537262c2aee22469acd21d96dd12aa014d5c0c",
+        "description": "venus: track viewMask",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "de4593faa193f575b8524c49b8e64f2dc12b498a",
+        "description": "venus: add query pool feedback cmds",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5d88a3db8b413969b7061d68c69ad636dd5fcf50",
+        "description": "venus: expose vn_feedback_buffer_create()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a26a51d1d4e021286bf37916fb01684137cf7618",
+        "description": "venus: factor out flush barrier cmd",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6788aade62ccac2087171ecd888d2c58ab0ef04e",
+        "description": "meson: Add back execmem option as a deprecated option",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1dd1147408e8fcfb9cbd08d5a5651152d288ef41"
+    },
+    {
+        "sha": "25c49e491fd9821cb687012c7d7b5bd68c31400b",
+        "description": "aco,ac/llvm,ac/nir,vtn: unify cube opcodes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dd3f756204de359a2834661d3bde39a5f20a2097",
+        "description": "docs: update lavapipe extensions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4e380616430ce000bc4454f137265ec6e65b6afb",
+        "description": "zink: fix separate shader program refcounting",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "e3b746e3a31e350e9f0962717e49acba28efee30"
+    },
+    {
+        "sha": "84bb6078f44a8518bd7080ae2362ae1a8a6383c8",
+        "description": "zink: do initial program unref during program creation",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "a0e69e7601a3f7cb6bfa578ccc4ec52abb9ee662"
+    },
+    {
+        "sha": "d5884d5bd5cef1f6f9b5badedc6f57ff54deb5e2",
+        "description": "llvmpipe/ci: Update expectations",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9a0c9c3ce49f2ff23e1a7ce4454c4f3fe30c5b97",
+        "description": "lavapipe/ci: Update CI expectations for new extensions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1eca25cacc7f577e51c3ba531ef795e243ecdaae",
+        "description": "venus/ci: Update fails",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "16151a597a0fe4e8d030757159218835afe25e25",
+        "description": "zink/ci: Update lavapipe expectations",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "01357b4da7c315453bd372f67574c4c48360f483",
+        "description": "zink: Increase ZINK_FBFETCH_DESCRIPTOR_SIZE to 280",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8f003569dd69251afa9b4adb5b3d430d073b8430",
+        "description": "lavapipe: Make shader compilation thread safe",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "83a7a88d6bad3e2faeb3904d965f5042e37a50da",
+        "description": "llvmpipe: flush/reference fs ubos on bind",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b9c588b47b7b6f923ac894775bc77d401fbbbc61",
+        "description": "llvmpipe: Use lp_jit_buffer_from_pipe_const in setup",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "63d09d2437da020d54e6a6ec1bc8fbbf27416803",
+        "description": "lavapipe: VK_EXT_mutable_descriptor_type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91eb0f5b082c881f42328f6d5bfeb3ed80cda881",
+        "description": "lavapipe: EXT_descriptor_indexing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ea848d37216b1f8cfd6b5d8df470735e64feba46",
+        "description": "lavapipe: Lower non uniform access",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b9d774fe22253b9dbf3025765bbb209b033cb59e",
+        "description": "lavapipe: EXT_descriptor_buffer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9d876505bc0a72a34990badd73e0c73fb7c1db71",
+        "description": "lavapipe: split out descriptor stage setting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "180f0090e515af9a030d97db652fadd65a830d91",
+        "description": "lavapipe: create a desc set for immutable sampler layouts",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "12a7fc51c77925a5562fd104a8fbd664a46ffc8b",
+        "description": "lavapipe: Rework descriptor handling",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9b12e0ec02ff748adc4f44f205710c39efef7432",
+        "description": "lavapipe: Make pipeline_lock generic for accessing the queue",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "001a3769a6fdf6c2cd5221d2b06915383e988598",
+        "description": "lavapipe: Lower more texture OPs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8adbaf9651264e01673f8573129aaddab2ed502",
+        "description": "lavapipe: Include llvmpipe",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d361a0be28646b5689c583609d98208c505faaf4",
+        "description": "llvmpipe: Disable the linear path when running vulkan",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "61d94f243cd3d2fd9b249bc49477bf3b4fc2df33",
+        "description": "gallivm: Implement vulkan images",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "573b8f23c295d57507de7a36a9177f5e9a6ee1cd",
+        "description": "gallivm: Implement vulkan textures",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eb140fa936d1be22835ed9fd228d2ae8106bf20d",
+        "description": "gallivm: Implement vulkan SSBOs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3f5f807125727d0c4eede1465ba3eb65908d586f",
+        "description": "gallivm: Implement vulkan UBOs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "62b4eb9d741a216ea0794301c7d493eb02b6b74c",
+        "description": "gallivm: Add a function for loading vulkan descriptors",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f675e4ee82319db31a9a70d65063290e4f151b4f",
+        "description": "llvmpipe: Pre compile sample functions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7d4135ac10601f0f6efb44cc0b0b7cb77983bdad",
+        "description": "gallivm: Clamp the texel buffer size",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "14486001712b7072f7fd74563cf89924ee72767b",
+        "description": "gallivm: Propagate vulkan resources",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9aa28ae09de8135f91301b893fe02953ffed2b83",
+        "description": "gallivm: Expose lp_build_texel_type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ee32d636a1bf68c7d7eb6e9e4d65e8c66586202",
+        "description": "llvmpipe: Add LP_TOTAL_IMAGE_OP_COUNT",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b7e85f838aa80fe75a0af1e779d04c0da8867c11",
+        "description": "gallivm: Expose LP_MAX_TEX_FUNC_ARGS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0814f5477961744847a7043ef0956cb574920528",
+        "description": "gallivm: Add LP_IMG_OP_COUNT",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "12bd6242e533b58ec49b8eaed292a9b20bc8f3e5",
+        "description": "llvmpipe: Add lp_build_image_soa_dynamic_state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4654a9949755929d8acb291e7b8cedd477ba780c",
+        "description": "llvmpipe: Add lp_build_sampler_soa_dynamic_state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e1f603b0924aaadd70c6c116b123a78ca03053ce",
+        "description": "gallivm: Expose lp_build_sample_soa_code",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e11e8289dde7834eb1c5e9ab2ea1869fd73df772",
+        "description": "gallivm: Add lp_descriptor struct",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0ab04247dc706500f5b42650eeb4fbd4c18bd8f5",
+        "description": "gallivm: Add missing includes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c2e639e74b2d1f69ca9355855c0a4924c83b6bab",
+        "description": "llvmpipe: Add BDA jit type helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d63549a64293b3a35a90f8a165ce3a903265c39b",
+        "description": "ac/nir/ngg: Follow tex sources when analyzing before culling.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "411f69b9c5b884f6802758347e72a10ec5564df1",
+        "description": "ac/nir/ngg: Follow intrinsic sources when analyzing before culling.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91b28fc6218c0d702d8c30dc33d320921a59938c",
+        "description": "ac/nir/ngg: Add upper limit to reusable uniforms.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ddeabcc19b022c1137ec41701dc819ef446fa717",
+        "description": "ac/nir/ngg: Call nir_convert_to_lcssa before divergence analysis.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ac61162e2a903f973d0f98979c2b974346820d8b",
+        "description": "r600/sfn: Fix filling FS output gaps",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "201b46e487d3aecda005973b0b46a514184eec4b"
+    },
+    {
+        "sha": "48737626c80f17590889612df8ec0d38322e2a48",
+        "description": "docs/cl: timer sync is implemented",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2df351562560f5bc416c4f5394af9814f3301d84",
+        "description": "docs/cl: move vec3 support under OpenCL C 1.1",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9784b525793292df0d64999395ada44eb129da48",
+        "description": "docs/cl: remove cl_khr_byte_addressable_store from extension list.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c3110ef1e973af3237fac89758549ee8cd15f6a4",
+        "description": "intel/compiler: reuse previously computed bitsize",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7f48c70babd2e5ce1f561fc51635fae588a8573a",
+        "description": "intel/compiler: construct masks instead of using magic values",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0925b07f4f54e66cf3f7c2b9b4571262a4f0f3da",
+        "description": "pvr: fixup transfer primary sub-command list",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b544a6d6c3569b15abd9e99c82f69277a5b1b3bd",
+        "description": "radv: emit PA_SC_SCREEN_SCISSOR_BR with the actual fb extent",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c881e4167e4e438fb5557004978ce640c5e4dec3",
+        "description": "glsl: remove old lower_blend_equation_advanced() code",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c02252950ca69cf4fba7b90ffc117938305099bb",
+        "description": "glsl: call nir version of lower_blend_equation_advanced()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7f3f429308183c58eb8f3f7aaec576c87d75057f",
+        "description": "glsl: port lower_blend_equation_advanced() to nir",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "34072923a9f3be316c12875a5ff11f33eb896b0c",
+        "description": "util: Remove redundant #if !defined(XF86_LIBC_H) in u_string.h",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2aafd9d7e294721a5e850e7b6d7a52ae98527133",
+        "description": "util: Remove redundant defined(_WIN32) in u_string.h",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e385913c21d8c85eab5127a466bedb6b99338519",
+        "description": "lavapipe: check sampler pointer before deref",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d2a7ddf066a7f8c69f6e5df50e34736f146bd1f4",
+        "description": "zink: get new bda when rebinding invalidated buffers",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "041591d972d022810afa89590375a33d8e5dcd35",
+        "description": "zink: fix unbinding generated gs on real gs bind",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a30379488e27865a380ae9eecc41e3ea0b476130",
+        "description": "zink: fix assert for inline uniform invalidation with generated gs bound",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eeb6515096481d8e8a66f6d76a050e69716d791a",
+        "description": "intel/isl: tile 64 calculations work with 1D surfaces",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7c43c2ac49bb0db2602682ade2936b7cdb100586",
+        "description": "iris: also avoid isl_memcpy_linear_to_tiled for Tile64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a64f860acbb4c349e68f7849440c2afe423554eb",
+        "description": "broadcom/compiler: Use nir_steal_tex_src",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5623f6571b555c7f9b617ed9b7cdd5ab0546da46",
+        "description": "broadcom/compiler: Remove unused #define",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4601517f54c1b634bba03a4da3abdcd1c0a35238",
+        "description": "broadcom/compiler: Remove v3d_nir_lower_robust_access",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "596176a72086f4f7a247bd33edd4715fbfe5135a",
+        "description": "broadcom/compiler: Use nir_lower_robust_access",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f0fb8d05e30c51e070155c957f3b71cf31c4b784",
+        "description": "nir: Add nir_lower_robust_access pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bafbfc57ea836716a76a286c93f53641b315e274",
+        "description": "anv: flush data cache before emitting availability",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6535b0c0ea1421c1f047a47fdcfafcc5d6c97404",
+        "description": "intel/genxml: Update RENDER_SURFACE_STATE Fields",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4affaced9db5017f92336d552041bc385610d359",
+        "description": "intel/genxml: Fix gen_sort_tags.py to handle mbz/mbo",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "12f93d06e97c70807bd8f1863afc4189151dedb9",
+        "description": "isl: Don't set \"Enable Unorm Path in Color Pipe\" on Alchemist",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "38935d97898e31bfc31118b94f932f3f9ed5ce0c",
+        "description": "broadcom: replace redefined ALIGN() macro with common util functions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9a8a7aaf1d17c4586ca7006a40b8ca53700dba05",
+        "description": "ci: split valve farm in two",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1ab22f788d31a6cff3651f44d0ad2c7ce9c50df1",
+        "description": "ci: remove unused tag DEBIAN_X86_64_TEST_IMAGE_PATH",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1faac35866a68994f4e1b1156356c39d3c57ec5b",
+        "description": "etnaviv: make use nir_shader_clear_pass_flags(..)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "36b0cff7749b04c3681f97fd76c6ab59c6eac7ab",
+        "description": "nir/lower_amul: make use nir_shader_clear_pass_flags(..)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fada46cf99a04bd4d4ff2249444e5173fbc54a96",
+        "description": "nir: add helper to clear all pass_flags",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "690549f1b65a6828e6478f2d834b3682bc81e354",
+        "description": "amd/ci: add another dEQP-VK.dynamic_rendering.primary_cmd_buff.basic.* flake",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "33ee59af1def0dc2c46051d160cb39f940f544ab",
+        "description": "radv: fix incorrect size for primitives generated query",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "1ebf463a5a64af54a18b69ccaa2453449938df61"
+    },
+    {
+        "sha": "4f3890dd87b8b279951f3f5da510af031c589a10",
+        "description": "anv: move WA 1607854226 to use the WA infrastructure",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2bd2c03b0ee6c877df5a088eebad5e32f8048213",
+        "description": "lavapipe: handle multiview queries",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e81b5b972ec318241be99a2eb14859f9f7831249",
+        "description": "nir/validate: Assert txf(_ms) matches dimension",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5099137612cdbfd0d39c672d4698375f56113eb4",
+        "description": "aco/optimizer: delete s_bitcmp optimization",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "130fbda71b9281c373cacf046facd224564ca37b",
+        "description": "radv: set has_bit_test for aco",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "44d0b785ccfcd797ab6d0d34ee8e04d0544054b5",
+        "description": "nir/opt_algebraic: combine bitz/bitnz",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "573e98f34ac99028934e273585baf9e3cbf76b3a",
+        "description": "aco: implement nir_op_bitz/bitnz",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6585209cdd938b24418b606b1c4de68753f89dc7",
+        "description": "nir/lower_bit_size: mask bitz/bitnz src1 like shifts",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "481a34e82e4a50e4ba2f8923c3d469fa506a1006",
+        "description": "nir: add single bit test opcodes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9ca1bb3cf8f2f4d9378ceb8ae39e6f853fb900b0",
+        "description": "util/blitter: revert util_blitter_clear_buffer()",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "23c003b88c54e00436b4e2684e6227e79538cf5a"
+    },
+    {
+        "sha": "625215dbe17899bdc693ade6a6c4f28844f91b2b",
+        "description": "ci/fdno: Pause a660 testing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "68b8aa788dc2e6146b138401a6225388f2311e95",
+        "description": "intel/compiler: Switch to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "46df42c4e80578512cc0051f8f5d82800a2a4d70",
+        "description": "crocus: Switch to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e1bf96dd567a485a041f5ca48a1630755afba400",
+        "description": "glsl: Remove the extra scope in gl_nir_link_uniforms.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dcf9cfd2973f0938e1ddcc640eaaf73a69ac6be3",
+        "description": "glsl: Switch to use nir_foreach_function_impl from nir_foreach_function",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4a8ec0db90cc24e958b7bf80df0a81633d7e00a3",
+        "description": "d3d12: Switch to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "99dce8407e57a58b59eb1dcfdfd6e924d671c9d8",
+        "description": "asahi: Use nir_foreach_function_impl instead nir_foreach_function in function agx_nir_lower_zs_emit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a434217720486a5efedc860235f8ad6df7d360d2",
+        "description": "gallium/auxiliary: Switch to use nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8d669b593122a91c6ba2fefbb7ab308c7477300",
+        "description": "nir/split_64bit_vec3_and_vec4: Use the right number of components",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "496fd59d711b9a0744878918caeeaafb961e3deb"
+    },
+    {
+        "sha": "d3003b0a413ad6bb666c47af3c9da712743df4f7",
+        "description": "Revert \"isl: Set Depth to array len for 3D storage images\"",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": "7e1b62ea5b35d7bd0245d10c8667184a7a6a4882"
+    },
+    {
+        "sha": "2e8c0a33e776383bd27e285504e8023b2c005338",
+        "description": "anv: implement storage image depth query using descriptor buffer read",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a7ccba2dfd1a2c4ed1ebce74e16966751c16ef51",
+        "description": "v3dv: fix blit path for compressed image to buffer copies",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "599e76617daf3deebc2aa0237c16a671401b2e56",
+        "description": "v3dv: use div_round_up for division by block size",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a1fda29bd1d8577caf0f7bb6e058b53241c7ff0f",
+        "description": "anv: look into batch bo reloc list looking for BOs to decode",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "96c33fb02704fc80363d3d17c3b2e54f21d09f18"
+    },
+    {
+        "sha": "5f7fb0a720c3f297c5a8f43e3c25c0bea6bb5d67",
+        "description": "clang-format: Add nir_foreach_function_impl into src/.clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "62ce223245ce69bb7613ee219107c41abd5edd97",
+        "description": "treewide: Switch to use nir_foreach_function_with_impl when possible",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b91bff3537fe239e186a2c319d18b8da35559f85",
+        "description": "clang-format: Add nir_foreach_function_with_impl into src/.clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fde6b51749a7b2ef6b3ecf7ecb34ef8d5813d3f0",
+        "description": "nir: Split macro nir_foreach_function_with_impl out of nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "afa79cd9b882b5c8613184ee70e9e6ea03e37b0b",
+        "description": "nir: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0d8c458e8f4becbc6c53632ec605ed102fa59b1b",
+        "description": "gallium: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2a7ab2f7bd4c27843c2274dafd2f8f585530dc82",
+        "description": "etnaviv: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a6da9d7147e8dd2f8c4bf4c24ee4e54ce2a384e9",
+        "description": "amd: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ee02893573204e7c30039a2dba9b1696dae79d04",
+        "description": "mesa/st: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "33035ed216ea1f657aa80c16708d455f75c58dbc",
+        "description": "hasvk: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6520b3e7262dd14615a5d1453a227061006b1a6b",
+        "description": "anv: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c4b6b0d949e3f1210445bce1688dcd2395df3007",
+        "description": "intel: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0b57f76986d1ea3242840170ecf7384eaf202e5e",
+        "description": "vc4: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6537b8b40b7cad2b51dc34c3ce47c468cac4ec7c",
+        "description": "radeonsi: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bd87f15ee95b685cd06338967f602aa8cf515cd9",
+        "description": "d3d12: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f2afe52a14d19daabbb5ad96a093d4cd2e153995",
+        "description": "r600/sfn: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1c524136c0805472c871440d8a4b6bd0519d4f9a",
+        "description": "freedreno: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "45e7e162221b8e203f0e707658c509343b1b7116",
+        "description": "pan: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "80212172e44307141f3b06c858c919658ae69bdd",
+        "description": "v3dv: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b3b3be55c4f099e6a2a2f4689668dd2cac308f64",
+        "description": "broadcom/compiler: use imm-helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c69dc017965fd5bc14dacb60d1c7b7b942d160c2",
+        "description": "vulkan: avoid needless constant-folding",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "195399f857f4ee3203255e512df638bef0f1e669",
+        "description": "mesa/st: use nir_ineg",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b9d3736302c8fddbf44e40beaf0b379515c197e0",
+        "description": "microsoft/compiler: use nir_imm_zero",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "30ab06bcf8b79bde8d6618e722c22bc007905cfd",
+        "description": "mapi: Remove dead struct _glapi_function in glapi/glapi_getproc.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1ed7a1282c5952aacaf641e9f400b6e7b06b43b9",
+        "description": "mapi: Merge get_static_proc_address into _glapi_get_proc_address",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e3b93887eb67a6179f4a8f50ed25afb8e42d76f7",
+        "description": "mapi: Style fixes in glapi/glapi_getproc.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a63b7a03a1e45e17956a341ec73c77cbcba489b4",
+        "description": "util: sizeof bucket are always 32bit width, use align instead align64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b7a0d34f893c62f3bf571bc95f8dbfbc95f68837",
+        "description": "util: Do not use align64 over unsigned int in register_allocate.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4d7c969dd8079c556f865ceef8057e5de89dc267",
+        "description": "util: Replace the usage of redundant u_align_u32 with align and remove u_align_u32",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ac83b096127cd55dada967ae3e80db4c8cc9221",
+        "description": "util: Getting align and align64 consistence with ALIGN",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b45fb614a4cce8e7f014df9057e1165e4867907b",
+        "description": "util: use uint32_t instead of unsigned in bitscan.h",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3aa929ca4618b1855c98aca479d7c0bd5498d67e",
+        "description": "util: Add function util_is_power_of_two_nonzero64 in bitscan.h",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3fc727b34688e90c1c2228837552817b70ccd55c",
+        "description": "pvr: Rename rogue_fw.xml -> rogue_kmd_stream.xml.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "70f86b25a14e8314ad633f3b217d9d176c5ba806",
+        "description": "pvr: Rename transfer 3D heap to transfer frag heap",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a76818e525d5df22cfdcc7dff746ab61cd43c27a",
+        "description": "pvr: Merge main and extension command streams",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8d3e8c3ad920b7f9b248551cc87df264dad845ec",
+        "description": "pvr: Rename heap reserved area to static data carveout",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b0a45fc6184727d99838cc086781a3a33933c236",
+        "description": "pvr: use pvr_csb_pack() to setup CR_FB_CDC_ZLS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e714b35301a33145399f8939ca864ffd14b49de9",
+        "description": "pvr: Fragment register fb_cdc_zls is feature dependent",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5acbadddb454505b2cc354f9a9a33ce289f489fa",
+        "description": "microsoft/clc: Don't build compiler test if build-tests is false",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 0,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1b7bf9a4f42a4c86155ced2a1cee0b9f67f172a1",
+        "description": "d3d12: Fix usage of D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG, was using D3D12_VIDEO_ENCODER_SUPPORT_FLAG wrongly instead",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed0087d75ef85f65ba6d0fed8165a957d0f2b799",
+        "description": "d3d12: Only set reduced_tx_set when supported by D3D12 caps (no libva caps for reduced_tx_set to map to)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6de9402fa8f479c54cb813e7d3e555aa069fe4ca",
+        "description": "d3d12: Correct tx_mode_support reporting as specified in libva spec",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "75ac852253d33b050e7ff3c3cdd866cad9e4dfa6",
+        "description": "compiler: set alignment=1 by default for handling empty struct/interface in glsl_types.cpp",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "68b9ad0ba7e1dfe58b3a08ea3dcb7efe0a819753",
+        "description": "radv: Do not enable robustness for push constants with robustBufferAccess2",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f4c2025e2cfde15ba448f769104504491e6fa16f",
+        "description": "nir/print: Print more representations in load_const",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a185736a42925d9b375c13b9e94f941cba6161cb",
+        "description": "nir/print: Use src_type when printing consts in SSA uses",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5d15f4ef28bb6b9a62cb9d8205f6cde6613f2da2",
+        "description": "nir: Extract logic to get dest and srcs types from intrinsic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7de530d3dfb1b752339502e4b6516924142536a4",
+        "description": "nir: Make a const-friendly way to get the offset_src and arrayed_io_src from intrinsic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8f64415af722fc37fe994a55b7268df5ddbdb7b8",
+        "description": "nir/print: Make NIR_DEBUG=print_consts behavior the default",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "260a9167db54de8ec6cd687aab2225751fb2dda6",
+        "description": "nir/print: Improve NIR_PRINT=print_consts by using nir_gather_ssa_types()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3cfdab8f928f469d2cd9e3363c05da5aaf0d2c9e",
+        "description": "nir: Allow nir_gather_ssa_types() to ignore regs instead of assert",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1e2f647fbbace978228029f9dcc262eb3608ae50",
+        "description": "radv/rt: Hash stages using radv_hash_shaders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "de1092e25673e9b0230d174fc42fb051942c3d91",
+        "description": "radv/rt: Fix caching non-recursive stages",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c9a5cac4ffa441b46000c8be0ae1b5b1819da9c9",
+        "description": "util: Do not include immintrin.h in half_float.h",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "189c7d6ff1581889c729b296ce769a21debb6b0b",
+        "description": "amd/ci: add another dEQP-VK.multiview.renderpass2.multisample.* flake",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e67337bebf623e67d119f48c2d24f3b831482ede",
+        "description": "vulkan/wsi: check for dri3 buffer initialization failure",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0e51f2de88717e6c4ad0cfbbcff85fed7c3e7ef0",
+        "description": "freedreno/registers: add bitfield for DSI wide bus enablement",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bbcda63564478533ce33a924421a75ab1d042f6e",
+        "description": "draw/i915: move hwfmt array to i915 specific struct",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3f7ea95bc9ed21588876ff166d4bfa94bf0c4230",
+        "description": "radv: inline more values in radv_emit_fb_ds_state()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5010ab8fffc66337a16c7120bcf5196565a5251a",
+        "description": "radv: stop emitting TILE_SURFACE_ENABLE for the ZRANGE_PRECISION workaround",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f8a204738779bcdbd6b02d9f8ebd7962a74cae16",
+        "description": "d3d12: Fixes unused-variable compile error",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4096bd8d8593480303e3cdd8a83b00ae71f740c1",
+        "description": "pvr: Setup ZLS depth and stencil load/store separately",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "59518b6dc637cab22838ef8d67d541dc3ebf30b9",
+        "description": "v3dv: add a linear images to buffer copy codepath",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "74fd2b9dd7f64850e7fcceea9da634ecb24f5117",
+        "description": "v3dv: refactor copy_image_to_buffer_blit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b8c6cedcf8013af097ea6ecd0a5182c55901770",
+        "description": "radv: allow NV_device_generated_commands with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "277b2afd7081fd41fe08db6890f58f2ac1fbe42e",
+        "description": "radv/amdgpu: add support for executing DGC cmdbuf with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "82c60b41e92e79a2a878a791c5fa7686b8fb6c47",
+        "description": "radv/amdgpu: add more small helpers for managing CS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "86785130d18a1e6c603dfbf57559aa2a8a748295",
+        "description": "CI/windows: Update headers and Agility redist to 1.711.3-preview",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "64da736286d0f1cba47ead6d93bb2e7766ef0ad4",
+        "description": "d3d12: AV1 Encode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "314871d57bd24318aa1fa823177206ce04c98aa0",
+        "description": "frontends/va: Extend AV1 Encode params",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "190b1fdc643b82e25347926717712c92cdfe0fc1",
+        "description": "nir: Convert to nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "19daa9283c146a8c50fdc0250e73a0bc366c826b",
+        "description": "nir: Add nir_foreach_function_impl helper",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8044110bf627c868cae49fc56505325c85b41bc",
+        "description": "docs/rusticl: add Enabling section",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e2263a645c486a63c72c34864121c713aec249fb",
+        "description": "docs/rusticl: mark building section as such",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7f0ed719aacd56a1ab08ad7bda9063d42b20a9ed",
+        "description": "intel/devinfo/i915: Set has_set_pat_uapi for MTL+",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "463bf134115909d11dc1d9dd440f59fcea93bb7e",
+        "description": "anv: Use set PAT extension on BO creation for MTL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "45278d1988a2fcb6996028f0d9bbf18c3c012ba6",
+        "description": "iris: Use set PAT extension on BO creation for MTL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b66678fb2e5e4e0c4681d7315a7a8133dafb0970",
+        "description": "drm-uapi/i915_drm.h: Update from drm-next (2023-06-09)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fce905f613f13c2419ba9e496ea08f91077692b5",
+        "description": "anv: Swap ordering of memory types on non-LLC platforms to work around application bugs.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79c879d2354f157dec823c317a733261b9f6a8f0",
+        "description": "iris: Map aux-map with WC on MTL+ (has_set_pat_uapi)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "37fc25aa74263e02f0d1e09ddd7f13dd13071442",
+        "description": "iris/bufmgr: Skip bucket allocation if not using writeback cache PAT index",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5e697abc588329c7423de73f8ac184bdf519fbfa",
+        "description": "iris/bufmgr: Add iris_pat_index_for_bo_flags()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b602c14fc529843a6bae4dc2e739bce354554195",
+        "description": "intel/devinfo: Define PAT indices used on MTL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e896b81322b85aa648591cf8e3003f9a02b89ec4",
+        "description": "intel/devinfo: Add has_set_pat_uapi",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "758bf5f7648320eb58e80854074f29088c788e73",
+        "description": "iris: Allocate coherent buffers for resources flagged as persistent/coherent",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b707547535602e2e507e8b9015c07ecc19048fe",
+        "description": "intel/dev: update mesa_defs.json from defect database",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f0569cdba013cf048129b76b448ba6f241972616",
+        "description": "dzn: VK_EXT_external_memory_host",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a831ee51ae6e522295c68a9af7659c9edf9258a8",
+        "description": "anv: Flush untyped dataport cache DC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "215c6c6ce4c82c897ef87d06fb685ed01ee5b8ab",
+        "description": "anv: Flush untyped dataport cache when HDC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c5ca2bed51302ac72f5524afe5403e85421c259f",
+        "description": "anv: Clear untyped dataport cache flush bit if not in GPGPU mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1d1f5f14057fb8c1d2a4eef4dbae8b8c37d84635",
+        "description": "iris: Flush untyped dataport cache DC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "46e1a2b31e04ebd02c3471308521f39335c0c173",
+        "description": "iris: Flush untyped dataport cache when HDC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a4f1c926888aec08ed1de22ae7a9a53d33d7e0b5",
+        "description": "ci: Testing -D shared-glapi=disabled with debian-clang-release",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d5a09bf5944b7762f823cc93debee34bc0afb80b",
+        "description": "mapi: Hide OpenGL functions to be exported when shared-glapi is disabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8b832449466411e87cab6b9b6e9b4a311498d4c",
+        "description": "intel/aubinator_error_decode: add ccs support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "16c12a9c3b4587d1afe21443923ea17c756e0b9f",
+        "description": "genxml: enable decoding on compute engine",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79d935ceaf63da2fc18e08df0808f858b5eb7471",
+        "description": "radv: use nir_opt_intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8649bde78fcbc3fb7c7284bdbe44ffdc2eb21e19",
+        "description": "nir/opt_intrinsic: optimize quad vote",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "58f8e0e2a0cb033a12ec68065f49e97aca383243",
+        "description": "nir,aco: add INCLUDE_HELPERS index to reduce intrinsic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c5fc89019b5c2b5f52e3e74d0e786fd54c312127",
+        "description": "aco: include helpers in emit_uniform_{reduce,scan}",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "48674a179985d05e91a1c7ca5783058ae9d113b1",
+        "description": "nir/peephole_select: allow some invocation broadcast intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "069cca9d66d1c4fb933c8d82b9d49a831fb43285",
+        "description": "treewide: Remove unused builders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "173b9ee69a55d8ce67d2b1ac588b6121f2f742bf",
+        "description": "treewide: Use nir_builder_create more",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "815efcdf7e2b291532b0e08ba4144ff01f21b418",
+        "description": "nir: Use nir_builder_create",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e5410f9b00e60fb47e7737f7b5357398c3b2f7bc",
+        "description": "nir: Add nir_builder_create returning nir_builder",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ddb7cf7a25ffc8473de1b48452c96b6d00843e91",
+        "description": "nir/builder_opcodes: Remove nir_build_ prefixed helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "400645a5656315d3e48a0bb1c4e9cef12cd7ece2",
+        "description": "nir: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "083f7dba5bb5e52af632a6297766dcc955a7e2dc",
+        "description": "vtn: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "707f92f248bcacfe26bed8ddb6345047c8eb5771",
+        "description": "freedreno: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8f3db26d14d970164811b4dd559e2e3b78a602e6",
+        "description": "intel: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "afd81d5ace4565270dab68198b76c7a31038bd20",
+        "description": "microsoft: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "17f3f5fa851920970173964fb906a9d12ed55149",
+        "description": "amd: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c24b7533781e6c75135230ea717ee2596bb93f14",
+        "description": "nir/lower_blend: Optimize masked out RTs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d4424950ace16da00cc660e0c4106d19e169b04b",
+        "description": "asahi: Use txf for background program",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05adeb850be3129211b79ab06d385d9e59f02636",
+        "description": "agx: Use nir_lower_frag_coord_to_pixel_coord",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "abe5b06a99ef47895e86d5c5fed8545a17fd9720",
+        "description": "pan/bi: Use lower_frag_coord_to_pixel_coord",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f318cab4a1661d08d5596ff72401fe669ff3b04d",
+        "description": "nir: Add lower_frag_coord_to_pixel_coord pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c7067660b286636d611a854cb6444c71f0a4aec9",
+        "description": "nir: Add pixel_coord, frag_coord_zw intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "137e8d1cc481519364e2b223c06b74627f600ffa",
+        "description": "ci: add a test-dozen-deqp flake",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9b00867327c2b266fcdebcef8bc7e7497eaab06b",
+        "description": "radv/amdgpu: workaround a kernel bug when replacing sparse mappings",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "51caece74cd54e99a5f89521e8feacd894781ca2",
+        "description": "radv/amdgpu: skip adding per VM BOs for sparse during CS BO list build",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "035e55f5aca9ef2da59bc834c2c0b8c18527e2e2",
+        "description": "mapi: Now _glapi_get_dispatch_table_size always equal to sizeof(struct _glapi_table) / sizeof(void *)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e72a879de075b21fc44a33a9d95cc4654c35bf50",
+        "description": "mapi: Fixes compile error with build option \"-D shared-glapi=disabled\"",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "398a8d43dc93beed68099e466a46426c927666a1"
+    },
+    {
+        "sha": "d53c7513285cdcd9b5f89bc5fc801c7777b36c92",
+        "description": "pvr: Change winsys flag defines to bitfields",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4e6444af0befbae8c4aac4fe24c1cc3fe66eec4d",
+        "description": "pvr: Fix missing BITFIELD_BIT for winsys frag job flag",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "739ba18c79908f96081935d5536cc88b0e2e04d7",
+        "description": "util: include \"util/compiler.h\" instead of \"pipe/p_compiler.h\"",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0d82c0a026b1a6828d18fb72d361d34d60fae68f",
+        "description": "util: Merge p_compiler.h into src/util/compiler.h",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b7b4e534043a14df2a3974d7c3eed1de339c71b0",
+        "description": "treewide: style fixes after replace the usage of ubyte/ushort with uint8_t/uint16_t",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e53915828f9b2d3f69c04d467a008f25a2904951",
+        "description": "treewide: Replace the usage of ubyte/ushort with uint8_t/uint16_t",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05b840521ab3e621d1664cd91d839914ddabd0db",
+        "description": "treewide: Replace the usage of TRUE/FALSE with true/false",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "49e84fdad2b453460100ea9253015eec437f5405",
+        "description": "treewide: style fixes after replace usage of boolean to bool",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b45a0bd666f54c3b5497ea0db19b5ed2db7dd02",
+        "description": "treewide: replace usage of boolean to bool",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b65e745168df47fad8dd32d4ec2aced0e002fa2f",
+        "description": "llvmpipe: altivec.h inclusion in -std=c++98..11 causes bool to be redefined",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "07cb3c0e312db8256acbc74579e4ef706be5af2f",
+        "description": "gallium/draw: Replace the usage of ushort to uint16_t in files that can not found by tools",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "542f00b5f1886459e0ca04bbcb7f06fbaa4e4108",
+        "description": "hud: Use bool/true/false to replace boolean/TRUE/FALSE in hud/hud_context.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e5aec68ce790b2dca23333989ce5cde61685a415",
+        "description": "aux/indices: use stdint.h types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "96c99bc2d9503b5c64f2a1dbc5333141848097c9",
+        "description": "etnaviv: linker: add fallback lookup to VARYING_SLOT_BFC[n]",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9e60699596080fbcbb91dc6b0306d12810e07ec",
+        "description": "etnaviv: nir: call nir_remove_dead_variables(..) before linking setup",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5f9ac2011652b6864f285fd57ee9bf5ae6f4cab5",
+        "description": "ir3/analyze_ubo_ranges: Move IR3_DBG_NOUBOOPT check",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "03ad1d5ab6fa4290c28a0bfe04ca8f328a82fac1",
+        "description": "v3dv: don't use the TLB path if we might be copying partial tiles",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cec030a2332a4d9f18d8ef80912330fc7742403e",
+        "description": "v3dv: fix slice size for miplevels >= 2",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1cb2d2a5eedd2962297e877850242260c93dd804"
+    },
+    {
+        "sha": "107d29765b57fb4e6504127759877b45e8c4b7ae",
+        "description": "docs: Update envvars used for tracing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b0beca8c7a4dbc13f4462e67db54603fff5aaf21",
+        "description": "vulkan/rmv,radv: Use common trace trigger",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e0641ed59f1056a5797e4642481bd17d8bd6f569",
+        "description": "radv/rgp: Use common trace trigger",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3e11640127a268271f62e5e7c061712f685632af",
+        "description": "radv/rra: Use common trace trigger",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "291fa055453e2832423e6f82914131fa2c748abc",
+        "description": "vulkan/wsi/x11: Capture traces using a hotkey",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "15d6618a1286cb8c0e091b2a734cf7ee5d939236",
+        "description": "radv: Add radv_trace_mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "70489edce48f90bf86c105fa63a64757a04a9ea4",
+        "description": "vulkan: Common trace capturing infrastructure",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3b83a60c955ca67759d266f18247c476817e75a5",
+        "description": "meson: Add a xcb-keysyms dependency",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a7b1a4f7102e864284e576000a7317171d98e41",
+        "description": "radv: Call radv_pipeline_init_scratch per shader",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "957d7644aa47478024315a20a31a91b32d3e65d6",
+        "description": "intel/ds: Track CCS cache flush bit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5a272b5ed81e0daae7d2fc3d5ffe9316da00501c",
+        "description": "iris: implement recommended flush/wait of AUX-TT invalidation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6be75d8aa2b2e1696ac7fdc5275c799f1eb3850e",
+        "description": "iris: Fix AUX-TT invalidation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "26a7e997fb141cd15788af64eb228dc138cec2a7",
+        "description": "iris: Add CCS cache flush bits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e88eac5b6cac01e986ee75f572dde5c8512af37e",
+        "description": "anv: implement recommended flush/wait of AUX-TT invalidation on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "012ff791fb842912c4b96d9ca730878abcddad31",
+        "description": "anv: Fix AUX-TT invalidation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0b42a6c3b57b3ffede80e25376e0c0a0a6239b30",
+        "description": "anv: Add CCS cache flush bits to anv_pipe_bits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f5927271301d3f3610efd39f4ee2a2e141d4941c",
+        "description": "intel/genxml: Add Compute/Blitter CCS aux invalidation register",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "55d9959e6743dfc4d3c566d5e39841baa852b3cf",
+        "description": "intel/genxml: Add CCS cache flush field to PIPE_CONTROL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "99502b42b4d09195ba404173baa92d12216b6a96",
+        "description": "vc4/v3d/ci: update expected results",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9e6d35f65c6c5913d54ba5306af391a8701a68a",
+        "description": "radv: Enable VK_EXT_fragment_shader_interlock",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8a8f2edd505da5a8b58e04822b77d89db04c8df6",
+        "description": "zink/ci: Add broken fragment shader interlock test to RADV flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ec0778f59ee4a57bbe1e782e9fff4c1aabe966b3",
+        "description": "radv: Disable VRS forcing with Primitive Ordered Pixel Shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "787a5532625004ec83c6d5ee4ed10d7de9d1392f",
+        "description": "radv: Apply the POPS missed overlap hardware bug workaround",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "647952c8e31babd980f6feaaf2ee5cfe70ec72e3",
+        "description": "ac/gpu_info: Check whether the device has the POPS missed overlap bug",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3831860b2019941b9449095777738cd8f959a49c",
+        "description": "radv: Handle Primitive Ordered Pixel Shading in DB_SHADER_CONTROL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "37e325fe15b3e5f42bcc7e9a5f904ce54e90e9df",
+        "description": "radv: Enable the null export workaround with POPS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7eabc5d6fc08b0be9949289ba4e0227f3d33b74e",
+        "description": "radv: Enable POPS collision wave ID shader argument",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "50e680d05a97cdf27989ac7fecf8f3584fe02376",
+        "description": "radv: Declare POPS collision wave ID shader argument",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1812819e6693e0ca04af27bad0d0b350ecad3e9d",
+        "description": "radv: Ensure 1x1 shading rate on GFX10.3 with interlock execution mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "08c582ea6968b81aae08352188fb1f1d0d13d04d",
+        "description": "radv: Detect the use of Primitive Ordered Pixel Shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5449a2c98840254f07e46da2553a503cbd3dc92e",
+        "description": "radv: Remove unconditional POPS_DRAIN_PS_ON_OVERLAP setting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "266ad83acd164a7dae5b29a727fd223381d60d20",
+        "description": "radeonsi: Remove unconditional POPS_DRAIN_PS_ON_OVERLAP setting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dda425df098d1ef2c00532fafedcbcf8e80bbdd7",
+        "description": "aco: Implement fragment shader interlock intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e0f4b52559942bb5a1d1b65e5544a2ec2265d227",
+        "description": "aco: Add Primitive Ordered Pixel Shading waitcnt rules",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a87628cd08860ae8e1e368c50e36f4bf04942531",
+        "description": "aco: Send MSG_ORDERED_PS_DONE where necessary",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2194e8bd82c1bcbcc2002e7d8a03e831c31d870a",
+        "description": "aco: Add Primitive Ordered Pixel Shading scheduling rules",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6082e126ebf157adfbc4b4295ff59e6da6a99a8e",
+        "description": "aco: Skip waitcnt insertion in the discard early exit block",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f8e744f07f1aa5dd2463b5912dc0a6eb83da4d8b",
+        "description": "aco: Add Primitive Ordered Pixel Shading pseudo-instructions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "94d2888da225c4419dc65cbcf5755aaf3eb21caf",
+        "description": "aco: Add s_wait_event argument bit definitions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b892f31e4d728acb87f48d27dce02e2860d75945",
+        "description": "ac: Define POPS collision wave ID argument SGPR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "308a5ea43afeb2373bd4bb43a59e3ce74e264c3a",
+        "description": "aco: Support pops_exiting_wave_id PhysReg usage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "90c88f5933ea71e57fd0741a3a733a9a8735295e",
+        "description": "ac/nir: Support Primitive Ordered Pixel Shading in lower_ps",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "365d342ee6e89973e94bb3bef594859bccd1c808",
+        "description": "docs/amd: Document Primitive Ordered Pixel Shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fadcd8d371a027e881cc443eabbbda9d5349be03",
+        "description": "gallivm: Use NIR_PASS macros",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6689c678fe50647c5e3f85b9a6d6c4cc640e473d",
+        "description": "nir/lower_locals_to_regs: Add bool bitsize knob",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5c8f21412f240c5197ee12293eedfba7307627e1",
+        "description": "nir/lower_bool_to_int32: Fix progress reporting",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6a29cb2654ff059dcb59e3fcaa0bcc982656609d"
+    },
+    {
+        "sha": "8887be6206586d5fe048489ce7cb8e00cc31a7a0",
+        "description": "rusticl/api: Wire up CL_DEVICE_PROFILING_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1bb523111b839628c623f81a46eaae56d24dc3a9",
+        "description": "rusticl/api: Implement get_{device_and_}host_timer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2a41b1869f142d871a1e60e3171aa5f19106b422",
+        "description": "rusticl/device: Stash timestamp availability",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "748a1b357d1a6b69c8e2000062b0aed9368f5999",
+        "description": "rusticl/screen: Wrap get_timestamp",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9486b9e7857766fe0a5c984bb3320be5060ab7b8",
+        "description": "draw: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "65591a3b25aaf4adda3adbba666414091c792e6a",
+        "description": "draw: match type of pipe_draw_start_count_bias::count",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b108e47091e70c199c9d0c55e52e3a2607fc6d1f",
+        "description": "cso: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fda6cad85eff13d8af667f1d19dd4a97fdc27b60",
+        "description": "draw: use stdint.h types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f4bd2d35cb21fe1d195fb1917a587ba768b4e2ca",
+        "description": "draw: track vertices and vertex_ptr as byte-pointers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed4bda804485515e9f3ddece1b318da8edeff49e",
+        "description": "draw: use enum for primitive-type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1569507e265df05a76e252864c151687e5437093",
+        "description": "draw: use uint32_t instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "57abc7d0379199a75e8721845c8dbc689bf0db3f",
+        "description": "draw: use enum for tgsi-semantic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4844809edbeed44337b4557749c881d47ae5b07f",
+        "description": "cso: use enum for render-conditions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "82e2802b7d69c4b64ba40868466aaf23630d949c",
+        "description": "radv/amdgpu: add a helper to get a new IB",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "148f42be1da84075be13f04658ca6cdd8ace13a9",
+        "description": "radv/amdgpu: rename old_ib_buffers to ib_buffers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d74de6506922b71fc2f7435a7e9735e0ab0393c6",
+        "description": "radv/amdgpu: use cs_finalize() when growing a CS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "437456b47c222270da850362d027822ac3da17dc",
+        "description": "radv/amdgpu: use the array of IB buffers for the chained IB path",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "81e308df72ce6dd7991e6a4dc542bb5848798cb7",
+        "description": "radv/amdgpu: do not set the IB size when ending a CS with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "df0c742543d7fd256690f7757cd0d2fc6d62aeb5",
+        "description": "radv/amdgpu: rework growing a CS with the chained IB path slightly",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c11a62a7b05a6847d2126911cb0b0f127f5bc2ef",
+        "description": "radv/amdgpu: use the correct IB size when growing a CS with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91143f45b85d625261bf6af1dd3546a0f47439ab",
+        "description": "pvr: Advance entry pointer in pvr_setup_vertex_buffers()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bc2828a436ada4b1264cb92fe2d50c8b833d83be",
+        "description": "compiler: Allow the explicit_stride of aoa types to be zero",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9f4299d6b24a206b059782df1cd40d233c49dcbb",
+        "description": "anv: fix to set predicted weight tables correctly.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8d519eb5f5947800279e4c02bf7aa79b0b65cd17"
+    },
+    {
+        "sha": "b8dc7675f27a3851403c3306a09b345c6a47aca5",
+        "description": "intel/genxml: changes the type for predicted weight to unsigned.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e2f95ad296d665891cf455030094e1e9d20d4b43",
+        "description": "vulkan/video: keep delta weight and offsets of predicted weight tables in h265 slice parsing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c421ecea56e3587d197fd860952eaad72f52e202",
+        "description": "vulkan: Update XML and headers to 1.3.255",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "73af0475cbdfa016392edc5f3d42d3b01aaba53c",
+        "description": "vulkan: Add NV suffix to VK_NV_cooperative_matrix feature names",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "07597596588973cea5bfe064ecc4017dd24357be",
+        "description": "rusticl/program: skip linking compiled binaries",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "18f1087a21c738ad1270557c5541fe796262066b",
+        "description": "rusticl: bump bindgen requirement",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5b29463746d559c926cb84b35c749625123dec82",
+        "description": "nir: Add function nir_function_set_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9fa38cf142716644cbe8e2ae2fcdea717e45062f",
+        "description": "vtn: Do not assign main_entry_point->impl twice",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0d9f474381b48fa3f0b695ea51298e3efbf86ca1",
+        "description": "draw: Update the comment and function name to match the type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e7f0dd27107bac50aadef9cb56aa93b332597095",
+        "description": "draw: Replace usage of ubyte/ushort/uint with uint8_t/uint16_t/uint32_t in draw_pt_vsplit.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f35ebd221f5d269fdf57da67cd2ea018c87027f9",
+        "description": "draw: Replace usage of boolean/TRUE/FALSE with bool/true/false in draw_pt_vsplit*",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fbe9a7ca3e78b683266dac706d156c110dcefdfc",
+        "description": "rusticl/mesa: create proper build-id hash for the disk cache",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "29b932512a873abb932e2fde99081d705bf9d465",
+        "description": "rusticl/meson: extract common bindgen rust args",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c89637388967d83fa621cc674c414eceb299b776",
+        "description": "rusticl: generate bindings for build-id stuff",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d14af0043217150c299e6a6731caba30795ed1a6",
+        "description": "rusticl: structurize and reorder mesa binding args",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "337908440eefc95abef9fa4464e29d299072df73",
+        "description": "v3dv: replace boolean and uint with bool and size_t",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fa8a2326910f2c2ea2695c147e9170e157d90d45",
+        "description": "docs/coding-style: add pre-commit hook fallback for clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "270d898e754f7ea8e4a55c138f5b59b47219f009",
+        "description": "docs/coding-style: add example emacs config for clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "342196f7b05e8d618ff4119de353eda1292b1d45",
+        "description": "docs/coding-style: add example vim config for clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "89873e5e5ce98c811968f38eb7d1a7953476fe97",
+        "description": "r300: properly count maximum used register index",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "561cce32f142d65364d9e48c7469ba9e605f5f21",
+        "description": "anv: Only expose video decode bits with KHR_video_decode_queue",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "93614817806b7a58b1dbbd0229d1a9c52df58746"
+    },
+    {
+        "sha": "727335045dd7bba6d835cb0a3b9cad2dfc3171f9",
+        "description": "anv: Pipe anv_physical_device to anv_get_image_format_features2",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "02aaf589083a768d9d1db8500c3b4495ed98df29",
+        "description": "nv50/ir/nir: set numBarriers if we emit an OP_BAR",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a2d7a4f9788e62270af8c14b2eee5452a1e0945f"
+    },
+    {
+        "sha": "69c452781b32c1e4138c9454ce110e561e7de019",
+        "description": "nvc0: fix printing shaders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "45d86b419bf681f3c0444a6c44eade4957fe3eee",
+        "description": "rusticl/program: add debugging option to disable SPIR-V validation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2b2a51389009a5a844cd001a4746d4d6e1f8d63a",
+        "description": "rusticl/program: add debugging for OpenCL C compilation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2362fd502bb07fa515518e5d9c783382f8015d3e",
+        "description": "docs: document CLC_DEBUG",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1b3669a1ed320549a09185700e7e56086fc1064a",
+        "description": "intel: Initialize FF_MODE2 on all Gfx12 platforms",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "427fee3507973dee8c85fd684f0a704928c9251c",
+        "description": "intel/gfx12.5: Enable L3 partial write merging for compressible surfaces among other cases.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d7ec6f172465a25be73bb2b30cf586a88aa4928d",
+        "description": "ci/fastboot: use gzipped Image to avoid compressing on the runner",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7d3c29dc60044ea35141e5f9fcd06c89e17fdb91",
+        "description": "frontends/va: fix some coverity scan reported issues",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dc93f205c11cb16fab52872c61221992b79cc122",
+        "description": "meson: Explicitly add \"check : false\" to a couple instances of run_command",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d3e5e04a75e90bd321ae6e2b840fc46d08fd666a",
+        "description": "amd/drm-shim: use fixed-width types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "766535c8671e3b4d6595c8ede233b6316e4518c1",
+        "description": "agx: Implement vector live range splitting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "72e6b683f37f91c9af4027a5d3f4f8ae7ca9ba3e",
+        "description": "agx/lower_parallel_copy: Lower 64-bit copies",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bfdaab65121a3f5cef8915090a865dab685da23e",
+        "description": "agx: Validate predecessor information",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "923b966775f7994317578237172bc7e246152661",
+        "description": "agx: Add loop header? flag",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a2dbe6b688d5931139012074e17dd93fb0b4e91e",
+        "description": "agx: Recollect stored vectors at their use",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91d98975a6889ce0f1e2306245356cd3c0a9393a",
+        "description": "agx: Extract coordinate register size calculation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eef7fff852978f23434bcaf6bc6af1ada215e4ff",
+        "description": "asahi: Pass through surface sample count",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "87bbaf680aa58c9ecef0a368ce2d22c669bb16a4",
+        "description": "asahi: Disable PIPE_CAP_SURFACE_SAMPLE_COUNT",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "af895692b3b52599e456f14e08a3beaa32b5a4c8",
+        "description": "asahi: Revert \"Advertise ARB_texture_barrier\"",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "9e67d3f23780a818b9fc764105f39c6d595c6530"
+    },
+    {
+        "sha": "b5fccfa1977cbad1afd6cdfb8836c7bf392244da",
+        "description": "agx: Fix discards",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "baf67144bd1862247042f6f5abca43c32d22f60f",
+        "description": "agx: Update explanation of sample_mask behaviour",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "942c206cd17325a0710dceeb17fa917fb7b6d5e1",
+        "description": "nir: Add discard_agx intrinsic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0f8864e04713db0000f1f41458737314ddd9f512",
+        "description": "radv: adjust alignment of the preprocess buffer with DGC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "06cdf222a6c3052eed6510d14b962dd8775769d4",
+        "description": "radv: only dirty the active push constant stages with DGC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3b329e195e340b64d090c57a291d7ed9d41686c7",
+        "description": "radv: only dirty the index type when necessary with DGC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2d97cc89fb621de4cd9b4fdf93ab46fd13a21251",
+        "description": "radv/amdgpu: dump all cs with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8af705a856793313c6dfcc5d46d7b2e37828c442",
+        "description": "radv/amdgpu: fix dumping cs with RADV_DEBUG=noibs",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "50e6b16855d5f72c3a8e16bc131d6d88b5cddfff"
+    },
+    {
+        "sha": "a1e2e01f62f247ebeae4a4230c49067c431fe5f3",
+        "description": "pvr: Correctly read dynamic state setup during blend constant setup",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "036d3dc0660b3b54d6ee2a833a637d096d279834",
+        "description": "radeonsi: disable H264HIGH10 profile",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ae7721d1637b3e231929bc7bca7ce2b569ae2841",
+        "description": "radv: reserve more space in CS for SQTT",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7893040f807f2b81d03a6a19c577d6d98bcc116c"
+    },
+    {
+        "sha": "bbdbab15fc45b2cc303c87c2848ecd367d3db6cd",
+        "description": "aco: Drop NIR parallel copy handling",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3b21c59fc3eb9cf1406a6fa8365fca77b17cfeec",
+        "description": "aco: Remove unneeded stage related info fields.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bc971ba2c7d8cb869f38f069306112bdb75cb7e0",
+        "description": "aco: Use aco_shader_info::hw_stage instead of guessing.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6028c146d54f14277000f98daf94c629a64cb19f",
+        "description": "radv: Set aco_shader_info::hw_stage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "016370b4f912437f2e6129ff46cb9bca59f5d682",
+        "description": "radeonsi: Set aco_shader_info::hw_stage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0fef6b95caabb03923d68a8cfdceb7f16b07a837",
+        "description": "aco: Add hw_stage field to aco_shader_info.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05928f42004a136ea951580e77d952149a4035b1",
+        "description": "aco: Use ac_hw_stage instead of aco-specific HWStage.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cc2307008a345fbbacefcbaa69699c93deaea8fe",
+        "description": "ac: Add ac_hw_stage enum.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "231fa269eac6c6d88a8a6516515681d551854c9f",
+        "description": "treewide: spelling fixes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a13ac83f1b95ba3829f1f39ec932df8ddd8733de",
+        "description": "anv: fix utrace batch allocation",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b9aa66d5d0a8c166e5b0008337fdaca2b97a37f4"
+    },
+    {
+        "sha": "8e729a2f578a2433a4c0489e7feec665d05bf7bb",
+        "description": "freedreno/decode: Correctly handle chip_id",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3111a70a554ad0f95379ca6686c0e97ec1ffc478",
+        "description": "freedreno,ir3: Don't call fd_dev_64b more than necessary",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "00900b76e0f45a98d073e04fd51cff759fa870a5",
+        "description": "freedreno: Decouple GPU gen from gpu_id/chip_id",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a8d92e25f6cfa45af4bde427f77472469d0cd1b",
+        "description": "freedreno/perfcntrs: Link with libfreedreno_common",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f18afc886a793e53fec8063dc6543b8231ab2f16",
+        "description": "ci: Upref virglrenderer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "90bc0ccf4ab6974ffc5a95d4071bfbf3ab61c3f0",
+        "description": "virgl/ci: Drop duplicate runs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b69a1b4153a955eb9991bea0d2595246a7c61c15",
+        "description": "vulkan: Migrate shader module hash to BLAKE3.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e5173e62d719d78cc0f782f013af17381ef52aec",
+        "description": "util/blake3: Add blake3_hash typedef.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0823ab43c527fab4e1059d2b175422c60628e614",
+        "description": "Revert \"egl: return correct error for EGL_KHR_image_pixmap\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5db031bf3ea3e37983f3ab17f2b550e1949d95a9"
+    },
+    {
+        "sha": "34163e19f7a64621a7995b92fa2f79a0f933393d",
+        "description": "r600/sfn: Don't clear clear group flag on vec4 that comes from TEX or FETCH",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f3415cb26a62289fed9cb5f202088168add43cfd"
+    },
+    {
+        "sha": "23d4e21d835975110e96cd7dface422ef043374f",
+        "description": "anv/video: fix to set U/V offset correctly.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "98c58a16ef1ab2208693505a88e597202cc3c2a1"
+    },
+    {
+        "sha": "d336bc39260efc1e47bd3e96061d78bd4d0ed8e8",
+        "description": "glsl: call nir_opt_find_array_copies() when linking",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d75a36a9eeb1606fab19362746f9b5d94b98bd3a"
+    },
+    {
+        "sha": "570c263ea3a2032ed4cb263bb092f55d3ab07be7",
+        "description": "nir/load_libclc: run some opt passes for everybody",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3a981acf55570a9b1e023d2c7ef75d499c2c8fbc",
+        "description": "rusticl/device: create helper context before loading libclc",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "98c8d7b7cfbe7dc66a87bbe8fda56d855053d7cd",
+        "description": "venus: Fix detection of push descriptor set",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "91966f2eff17cc7c95ca8a89ac40d5d211e5b407"
+    },
+    {
+        "sha": "f278b30e94ee94fb9d8f4b0c4e93cc42319e4eef",
+        "description": "nir/opt_if: Use block_ends_in_jump",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ddfc43fdffb4b38f721c7449fd0c9dcf29749b7",
+        "description": "nir: Remove integer and 64-bit modifiers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a2fc3213f8965b0a9b739eabcf8671c3df14ad5e",
+        "description": "venus: Advertise 1.3 in ICD file",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2f729ff6aaedcc3f4584830c2f88da2402b76ce7",
+        "description": "venus: suballocate feedback slot with feedback buffer alignment",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b2ed33fb4d0a3c78287d58e8edef6f4576dbf274",
+        "description": "docs: update calendar for 23.1.3",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "86f8e90deb40f00ea225791b5abd8ae9d619207e",
+        "description": "docs/relnotes: add sha256sum for 23.1.3",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7051d4e1d852cc6131abf96149ae4646a2c95839",
+        "description": "docs: add release notes for 23.1.3",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8509ebb68a022bd1b0629c3362638d217ad0c477",
+        "description": "anv: align buffers to a cache line",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9db5da0f388f22a3d705d02e34fe1026c9f176fd",
+        "description": "r300: add partial CMP support on R5xx",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e15a4e6e1a773f83e621ad95689d264d04963a73",
+        "description": "radv: pre-init surface info",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "92dbf454f81ddf2468766837b38e8dcfd31d8fc4",
+        "description": "ci/etnaviv: update ci expectation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3005c27a92d6daddb1896730618d6af3cb6e3520",
+        "description": "Revert \"amd/ci: temporarily disable some manual jobs that take a long time to run\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "4031ed5c8a0bbda910f22aec5ee3263b8137936a"
+    },
+    {
+        "sha": "33673bcc2ab84de0b1ff35519e7d7a58ef572fba",
+        "description": "rusticl: stop linking with libgalliumvl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "92fdfea5af8783cae471c510d1fccb1aab4c9a73",
+        "description": "rusticl: specify which symbols to export",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "72fe01a6be92a32392742eb1ba65992b53175bde",
+        "description": "rusticl: add ld_args_gc_sections",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ff290167536347a6831034a996b9ee1a8c3e5d6b",
+        "description": "meson: Guard the glsl tests that only working when OpenGL ES2 is enabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0c298c1bb2181fc90f92ee9701457d62ef8fd010",
+        "description": "mapi: Fixes non-constant-expression cannot be narrowed from type 'unsigned long' to 'unsigned int' in initializer list with clang",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e44773b6d643d24273cf07945a52287a148c0159",
+        "description": "meson: Use consistence disabled/enabled comment for shared-glapi option",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7af2c45947d47f72600bdf2b393faffa290f9cc7",
+        "description": "mapi: Fixes check_table.cpp for DrawArraysInstancedARB and DrawElementsInstancedARB",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5679ef99b82b7ae8803b91f6dcde19e53c223c5e"
+    },
+    {
+        "sha": "29b4c1a09f23985a8d367b2b95e887f4418ebba7",
+        "description": "rusticl: experimental support for cl_khr_fp16",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6ae801c4d832c490f1c45b2665d2f380dd958c6f",
+        "description": "rusticl/device: rename doubles to fp64 and long to int64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0623e1784caaea0deed1f711c3777f2a5b004517",
+        "description": "ci/panfrost: switch panfrost-g52-piglit-gles2 from X to XWayland",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5c120173b3665a740e1d10e5644b1c344b35c1f4",
+        "description": "zink/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79cd51d0e6d33b518e5b225bd7d91da03b9bee71",
+        "description": "radeonsi/get: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "979f47a04d72d10fceebc1f2c92848f39ae566e8",
+        "description": "r600/pipe: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6e1f873a0c019ee11dc6a1e489a615d270411e76",
+        "description": "iris/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d27040ed89bc0e05e12ce7457dca6666fa391192",
+        "description": "crocus/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6ec57403dbf6a8c60865caff90f4d850cd73b619",
+        "description": "sofpipe/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "35f5bc0ad47baaaafa36a95b1658c9fb7755e154",
+        "description": "llvmpipe/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "660f2eabe116972b82f2b6fcdf4869962f641d6d",
+        "description": "gallium: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "77f5b1cce024a472ffb603bc7dbb7c7f9f5f993f",
+        "description": "radeonsi: clean up #includes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "56c787b36df809740d2cc43919dcd9794901234a",
+        "description": "radeonsi: declare compiler[] and nir_options as pointers to reduce #includes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "620ff256a2c2b3de0f148c107a7eadad45ed09d0",
+        "description": "radeonsi: clean up query functions, make them static, remove forward decls",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "69bc1180b77ae366e05298e892f3e83079414cd8",
+        "description": "radeonsi/gfx11: use SET_SH_REG_PAIRS_PACKED for compute by buffering reg writes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1753b321f8766783b73f153131c575b868c5cd12",
+        "description": "radeonsi/gfx11: use SET_SH_REG_PAIRS_PACKED for gfx by buffering reg writes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a6e6646d918a1110211cebfb634db0bccc69d40e",
+        "description": "radeonsi: reorder compute code to prepare for packed SET_SH_REG packets",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f71607c8d3cea3f2ec5ea6d23ddaec3a2e05a875",
+        "description": "radeonsi/gfx11: enable register shadowing by default",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "aafef61f6a37e22f989eef10fd70399d787ba874",
+        "description": "radeonsi/gfx11: fix GLCTS with register shadowing by keeping the CS preamble",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c7f4ffa401b8b2c43ce59fe4aafe3602060a589b",
+        "description": "radeonsi: remove uses_reg_shadowing parameter from si_init_gfx_preamble_state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "913c6392f65824b25202bba35c75158e705ca4e1",
+        "description": "radeonsi: remove radeon_winsys::cs_set_preamble",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c4811edfa693f3b417b41ead67b5b13d32913569",
+        "description": "radeonsi: use si_pm4_create_sized for the shadowing preamble",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fff585bdb80b83d754aaa61bf5306268a7da5e06",
+        "description": "radeonsi: don't do BREAK_BATCH for context regs with only 1 context per batch",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "835190dd9f6c75c0b50bbb70907ad1aefe83afb7",
+        "description": "radeonsi: keep pipeline statistics disabled when they are not used",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ccb856fbaa1ae9d77e034f6822c9d004837932fa",
+        "description": "radeonsi: determine si_pm4_state::reg_va_low_idx automatically",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "22f3bcfb5a3311a2c61ad26c943976e66b68b09c",
+        "description": "radeonsi/gfx11: use SET_*_REG_PAIRS_PACKED packets for pm4 states",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1aa99437d3784cb1193120d8e069bd168ba9e749",
+        "description": "radeonsi: eliminate redundant TCS user data and RSRC2 register changes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6959493f8c2a0542d13312069659c3c3e233206e",
+        "description": "radeonsi: move the only tcs_out_lds_offsets field to vs_state_bits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5632d8d1a777d39c7882dcb011aab4619bcff01a",
+        "description": "radeonsi: replace tcs_out_lds_layout with nearly identical tes_offchip_addr",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1b40ab21503fdeabb37950a73ac630240331a4ca",
+        "description": "radeonsi: move TCS.gl_PatchVerticesIn into the tcs_offchip_layout SGPR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b4e2073f041174a4dd4de141823d7950ffb78819",
+        "description": "zink/ci: remove 3 tests from the fails list",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4031ed5c8a0bbda910f22aec5ee3263b8137936a",
+        "description": "amd/ci: temporarily disable some manual jobs that take a long time to run",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a4796a34b192c7d251bd15fc9a13ed15321ef1ba",
+        "description": "Revert \"ci: mark the valve farm as down\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "2089fc8188635ed0ee72e2ddc009e7a775210bb7"
+    },
+    {
+        "sha": "b4ca45911d234c2fd763ed60cbb74be804dccd31",
+        "description": "nir_opt_algebraic: don't use i32csel without native integer support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9a4b8e6401a875db7886ad8baeefdd9d1461b21",
+        "description": "docs/ci: fix command to disable/re-enable farms",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e8533328056f9fe68a4935cd8eaa8038615268a8",
+        "description": "r600/sfn: Add source mod propagation also to fp64 ops",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "255eee10ace253d61570d9b97b44158082ae8de4",
+        "description": "r600/sfn: Implement fsat for 64 bit ops",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0ff3c4bef21e6768a53610337c39d1e306b3869e"
+    },
+    {
+        "sha": "12d86e9822f97d4a66d8cbb90ba13491153711ef",
+        "description": "anv: update conformanceVersion",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ff52a00553ce6c8dc5398ff4eb9dd923d10ceada",
+        "description": "dzn: Align placed footprints used when copying linear <-> optimal for BC formats",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9dd106b1137bf94369dfe293cfe800fe2ff642a9",
+        "description": "ci: move .microsoft-farm-container-rules to test-source-dep.yml",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "402ae3b132e026d681cb5e4b8b44d6504998c2b5",
+        "description": "nir/lower_tex: ignore saturate for txf ops",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "886b7aaa6be918857c685d980110f35ef57d96df",
+        "description": "zink: add fastpaths for no-op sampler/view rebinds",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8125437acdc104dad6d9b70c4814bed8f5b271d2",
+        "description": "zink: check sampler views pointer before loop",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "58b82d231de91fd9241401c55b6939a9c4f050d0",
+        "description": "zink: don't update tc info directly from cso binds",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b4c1b3a426ec781c81f48bf57e5e7de07bea2af",
+        "description": "zink: track and apply ds3 states only on change",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5dc2d329cb0130413bbbf3c7500076e7c5f7f065",
+        "description": "zink: use local screen var in blend state bind",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2543fc15a1968e83aa44c90494bbc1d047409494",
+        "description": "zink: clean up rp update tracking on dsa bind",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b65efda50880d4bf03d06b7d2496ac7d9d314e7d",
+        "description": "zink: specialize invalidate_descriptor_state hook for compact mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "53542dd12000f0618784204b1ca4633b9f23ef1e",
+        "description": "zink: make invalidate_descriptor_state a ctx hook",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ad04bd81b96bfd41adcf230b161dda24559e2722",
+        "description": "zink: force inlining for a bunch of functions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "14bf10c1adce11c9e208d9269e9e048eef61ef8b",
+        "description": "zink: no-op redundant samplemask changes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f759cbb6755e713a8fdaa1f0b26f1144ae482933",
+        "description": "dzn: Fix multisample counts in device limits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b888ead2f738fa24ccb0cb534a932eb45d67484",
+        "description": "dzn: Remove dynamic check for block-compressed support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a3d14e4b0581c9a5a3d84b52566fd628685a5886",
+        "description": "dzn: Use common GetPhysicalDeviceFeatures2",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a68617692f3632a87decce1f751196226daabf4",
+        "description": "dzn: Inline D3D12 device creation in physical device creation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "badb85edb8ff2236f38dbbbdd3aeb9febf02f54f",
+        "description": "util: reinstate ENUM_PACKED",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "86532fa21dee16debf4f96a8b6eb6e894076845e"
+    },
+    {
+        "sha": "4b48d377badc6871237583e2fdea16063e686308",
+        "description": "egl/haiku: Fix potential crash if double buffering is disabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2089fc8188635ed0ee72e2ddc009e7a775210bb7",
+        "description": "ci: mark the valve farm as down",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed5d3468682d775f2a9e5253d868997cca9ea4b8",
+        "description": "intel/fs: Add missing newline",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "df6749ed56982f056be8c06d7b1af7f84e842fef",
+        "description": "radv: inline radv_can_enable_dual_src()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b73109a938cebdc97057518a297f32beed37485",
+        "description": "radv: remove redundant intermediate variable in radv_is_mrt0_dual_src()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2a1d97e3fcffa6d38413f8d785afaf9d2278fb71",
+        "description": "dzn: Ignore export access parameters",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c64f1b6650f9f81a0329390d92f8c27bcb046e7c"
+    },
+    {
+        "sha": "63f44951ac4b4055b4137f57ef10c5fb078bf35e",
+        "description": "asahi: drop unnecessary DRM_FORMAT_MOD_{LINEAR,INVALID} fallbacks",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "afe134a49c5ef79ca6125f0263331b440b9c0e49"
+    },
+    {
+        "sha": "cfa7eec06c713bd4ec1eb91f02cfddc57c7bd2f2",
+        "description": "aco: don't set exec_hi for wave32 scan reductions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5d03bbc91d10a8ed479d1a68a363e69135f1e6d8",
+        "description": "pvr: Fix csb control stream extension",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5336cbff3bd0ac73cb03915bb2dad102f15d58a0",
+        "description": "intel/fs: Constant propagate into SHADER_OPCODE_SHUFFLE",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b902fb2e14e56bdf914eb175489d3b53ff6fcda0",
+        "description": "pvr: Fix dynamic offset patching",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "aa791961a82e1f5a9dd841c3e0398c3e80d09652"
+    },
+    {
+        "sha": "4071b8e7f32f1801f7e578ce580b22d8ec7b0332",
+        "description": "pvr: Fix barrier insertion on merged subpasses",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6d672e0336836bdbf3d444f7febc74f5c91e7de1"
+    },
+    {
+        "sha": "822dc384b1364a4a2a67c68a20a00bf324e40380",
+        "description": "pvr: Fix seg fault on empty descriptor set",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ce67f5ac944bdc6ebf27e3b115706bec5b63f002"
+    },
+    {
+        "sha": "9d75795087ce1233e92df2582846ec6f6116d423",
+        "description": "radv: Move most of DB_SHADER_CONTROL to PS, more precise GFX11 blend WA",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
         "sha": "b687cbe36c12081921e03c8633fedea334642105",
         "description": "isl: add surface creation reporting mechanism",
         "nominated": false,
@@ -688,7 +11425,7 @@
         "description": "anv: track buffer writes from shaders for query results writes",
         "nominated": true,
         "nomination_type": 0,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -2965,7 +13702,7 @@
         "description": "anv: limit ANV_PIPE_RENDER_TARGET_BUFFER_WRITES to blorp operations using 3D",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -6637,7 +17374,7 @@
         "description": "tu: Fix missing unlock",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "c20139c2922276238c12dc6a6cf0fbbc39e9d732"
     },
@@ -10354,7 +21091,7 @@
         "description": "freedreno: Reallocate on unshared export",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -10363,7 +21100,7 @@
         "description": "freedreno: Add aux-context support",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -10372,7 +21109,7 @@
         "description": "freedreno: Handle export error handling",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -10381,7 +21118,7 @@
         "description": "freedreno/drm: Don't try to export suballoc bo",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
diff -Npur mesa-23.1.3/src/amd/common/ac_nir_lower_ngg.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/common/ac_nir_lower_ngg.c
--- mesa-23.1.3/src/amd/common/ac_nir_lower_ngg.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/common/ac_nir_lower_ngg.c	2023-07-18 23:48:05.000000000 +0200
@@ -1109,6 +1109,8 @@ analyze_shader_before_culling_walk(nir_s
 static void
 analyze_shader_before_culling(nir_shader *shader, lower_ngg_nogs_state *s)
 {
+   /* LCSSA is needed to get correct results from divergence analysis. */
+   nir_convert_to_lcssa(shader, true, true);
    /* We need divergence info for culling shaders. */
    nir_divergence_analysis(shader);
 
diff -Npur mesa-23.1.3/src/amd/compiler/aco_instruction_selection.cpp mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/compiler/aco_instruction_selection.cpp
--- mesa-23.1.3/src/amd/compiler/aco_instruction_selection.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/compiler/aco_instruction_selection.cpp	2023-07-18 23:48:05.000000000 +0200
@@ -8354,9 +8354,10 @@ visit_intrinsic(isel_context* ctx, nir_i
    }
    case nir_intrinsic_load_subgroup_id: {
       if (ctx->stage.hw == HWStage::CS) {
+         const unsigned bfe_const =
+            ctx->program->gfx_level >= GFX10_3 ? (0x14u | 0x5u << 16) : (0x6u | (0x6u << 16));
          bld.sop2(aco_opcode::s_bfe_u32, Definition(get_ssa_temp(ctx, &instr->dest.ssa)),
-                  bld.def(s1, scc), get_arg(ctx, ctx->args->tg_size),
-                  Operand::c32(0x6u | (0x6u << 16)));
+                  bld.def(s1, scc), get_arg(ctx, ctx->args->tg_size), Operand::c32(bfe_const));
       } else if (ctx->stage.hw == HWStage::NGG) {
          /* Get the id of the current wave within the threadgroup (workgroup) */
          bld.sop2(aco_opcode::s_bfe_u32, Definition(get_ssa_temp(ctx, &instr->dest.ssa)),
diff -Npur mesa-23.1.3/src/amd/llvm/ac_llvm_build.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/llvm/ac_llvm_build.c
--- mesa-23.1.3/src/amd/llvm/ac_llvm_build.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/llvm/ac_llvm_build.c	2023-07-18 23:48:05.000000000 +0200
@@ -2987,6 +2987,9 @@ LLVMValueRef ac_build_mbcnt_add(struct a
    LLVMValueRef val;
 
    if (ctx->wave_size == 32) {
+      if (LLVMTypeOf(mask) == ctx->i64)
+         mask = LLVMBuildTrunc(ctx->builder, mask, ctx->i32, "");
+
       val = ac_build_intrinsic(ctx, "llvm.amdgcn.mbcnt.lo", ctx->i32,
                                (LLVMValueRef[]){mask, add}, 2, 0);
    } else {
diff -Npur mesa-23.1.3/src/amd/llvm/ac_nir_to_llvm.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/llvm/ac_nir_to_llvm.c
--- mesa-23.1.3/src/amd/llvm/ac_nir_to_llvm.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/llvm/ac_nir_to_llvm.c	2023-07-18 23:48:05.000000000 +0200
@@ -3442,8 +3442,10 @@ static bool visit_intrinsic(struct ac_ni
    switch (instr->intrinsic) {
    case nir_intrinsic_ballot:
       result = ac_build_ballot(&ctx->ac, get_src(ctx, instr->src[0]));
-      if (ctx->ac.ballot_mask_bits > ctx->ac.wave_size)
-         result = LLVMBuildZExt(ctx->ac.builder, result, ctx->ac.iN_ballotmask, "");
+      if (instr->dest.ssa.bit_size > ctx->ac.wave_size) {
+         LLVMTypeRef dest_type = LLVMIntTypeInContext(ctx->ac.context, instr->dest.ssa.bit_size);
+         result = LLVMBuildZExt(ctx->ac.builder, result, dest_type, "");
+      }
       break;
    case nir_intrinsic_read_invocation:
       result =
diff -Npur mesa-23.1.3/src/amd/vulkan/radv_physical_device.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/radv_physical_device.c
--- mesa-23.1.3/src/amd/vulkan/radv_physical_device.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/radv_physical_device.c	2023-07-18 23:48:05.000000000 +0200
@@ -113,6 +113,7 @@ static int
 radv_device_get_cache_uuid(struct radv_physical_device *pdevice, void *uuid)
 {
    enum radeon_family family = pdevice->rad_info.family;
+   bool conformant_trunc_coord = pdevice->rad_info.conformant_trunc_coord;
    struct mesa_sha1 ctx;
    unsigned char sha1[20];
    unsigned ptr_size = sizeof(void *);
@@ -139,6 +140,7 @@ radv_device_get_cache_uuid(struct radv_p
 #endif
 
    _mesa_sha1_update(&ctx, &family, sizeof(family));
+   _mesa_sha1_update(&ctx, &conformant_trunc_coord, sizeof(conformant_trunc_coord));
    _mesa_sha1_update(&ctx, &ptr_size, sizeof(ptr_size));
    _mesa_sha1_final(&ctx, sha1);
 
diff -Npur mesa-23.1.3/src/amd/vulkan/radv_query.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/radv_query.c
--- mesa-23.1.3/src/amd/vulkan/radv_query.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/radv_query.c	2023-07-18 23:48:05.000000000 +0200
@@ -662,7 +662,7 @@ build_pg_query_shader(struct radv_device
     *	        }
     *		available = true;
     *	}
-    * 	uint32_t result_size = flags & VK_QUERY_RESULT_64_BIT ? 16 : 8;
+    * 	uint32_t result_size = flags & VK_QUERY_RESULT_64_BIT ? 8 : 4;
     * 	if ((flags & VK_QUERY_RESULT_PARTIAL_BIT) || available) {
     *		if (flags & VK_QUERY_RESULT_64_BIT) {
     *			dst_buf[dst_offset] = result;
@@ -752,7 +752,7 @@ build_pg_query_shader(struct radv_device
    /* Determine if result is 64 or 32 bit. */
    nir_ssa_def *result_is_64bit = nir_test_mask(&b, flags, VK_QUERY_RESULT_64_BIT);
    nir_ssa_def *result_size =
-      nir_bcsel(&b, result_is_64bit, nir_imm_int(&b, 16), nir_imm_int(&b, 8));
+      nir_bcsel(&b, result_is_64bit, nir_imm_int(&b, 8), nir_imm_int(&b, 4));
 
    /* Store the result if complete or partial results have been requested. */
    nir_push_if(&b, nir_ior(&b, nir_test_mask(&b, flags, VK_QUERY_RESULT_PARTIAL_BIT),
diff -Npur mesa-23.1.3/src/amd/vulkan/radv_rt_common.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/radv_rt_common.c
--- mesa-23.1.3/src/amd/vulkan/radv_rt_common.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/radv_rt_common.c	2023-07-18 23:48:05.000000000 +0200
@@ -95,6 +95,9 @@ intersect_ray_amd_software_box(struct ra
    const struct glsl_type *vec4_type = glsl_vector_type(GLSL_TYPE_FLOAT, 4);
    const struct glsl_type *uvec4_type = glsl_vector_type(GLSL_TYPE_UINT, 4);
 
+   bool old_exact = b->exact;
+   b->exact = true;
+
    nir_ssa_def *node_addr = build_node_to_addr(device, b, bvh_node, false);
 
    /* vec4 distances = vec4(INF, INF, INF, INF); */
@@ -186,6 +189,7 @@ intersect_ray_amd_software_box(struct ra
    nir_sort_hit_pair(b, distances, child_indices, 1, 3);
    nir_sort_hit_pair(b, distances, child_indices, 1, 2);
 
+   b->exact = old_exact;
    return nir_load_var(b, child_indices);
 }
 
@@ -196,6 +200,9 @@ intersect_ray_amd_software_tri(struct ra
 {
    const struct glsl_type *vec4_type = glsl_vector_type(GLSL_TYPE_FLOAT, 4);
 
+   bool old_exact = b->exact;
+   b->exact = true;
+
    nir_ssa_def *node_addr = build_node_to_addr(device, b, bvh_node, false);
 
    const uint32_t coord_offsets[3] = {
@@ -275,47 +282,6 @@ intersect_ray_amd_software_tri(struct ra
    nir_ssa_def *v = nir_fsub(b, nir_fmul(b, ax, cy), nir_fmul(b, ay, cx));
    nir_ssa_def *w = nir_fsub(b, nir_fmul(b, bx, ay), nir_fmul(b, by, ax));
 
-   nir_variable *u_var =
-      nir_variable_create(b->shader, nir_var_shader_temp, glsl_float_type(), "u");
-   nir_variable *v_var =
-      nir_variable_create(b->shader, nir_var_shader_temp, glsl_float_type(), "v");
-   nir_variable *w_var =
-      nir_variable_create(b->shader, nir_var_shader_temp, glsl_float_type(), "w");
-   nir_store_var(b, u_var, u, 0x1);
-   nir_store_var(b, v_var, v, 0x1);
-   nir_store_var(b, w_var, w, 0x1);
-
-   /* Fallback to testing edges with double precision...
-    *
-    * The Vulkan spec states it only needs single precision watertightness
-    * but we fail dEQP-VK.ray_tracing_pipeline.watertightness.closedFan2.1024 with
-    * failures = 1 without doing this. :( */
-   nir_ssa_def *cond_retest = nir_ior(
-      b, nir_ior(b, nir_feq(b, u, nir_imm_float(b, 0.0f)), nir_feq(b, v, nir_imm_float(b, 0.0f))),
-      nir_feq(b, w, nir_imm_float(b, 0.0f)));
-
-   nir_push_if(b, cond_retest);
-   {
-      ax = nir_f2f64(b, ax);
-      ay = nir_f2f64(b, ay);
-      bx = nir_f2f64(b, bx);
-      by = nir_f2f64(b, by);
-      cx = nir_f2f64(b, cx);
-      cy = nir_f2f64(b, cy);
-
-      nir_store_var(b, u_var, nir_f2f32(b, nir_fsub(b, nir_fmul(b, cx, by), nir_fmul(b, cy, bx))),
-                    0x1);
-      nir_store_var(b, v_var, nir_f2f32(b, nir_fsub(b, nir_fmul(b, ax, cy), nir_fmul(b, ay, cx))),
-                    0x1);
-      nir_store_var(b, w_var, nir_f2f32(b, nir_fsub(b, nir_fmul(b, bx, ay), nir_fmul(b, by, ax))),
-                    0x1);
-   }
-   nir_pop_if(b, NULL);
-
-   u = nir_load_var(b, u_var);
-   v = nir_load_var(b, v_var);
-   w = nir_load_var(b, w_var);
-
    /* Perform edge tests. */
    nir_ssa_def *cond_back = nir_ior(
       b, nir_ior(b, nir_flt(b, u, nir_imm_float(b, 0.0f)), nir_flt(b, v, nir_imm_float(b, 0.0f))),
@@ -327,6 +293,13 @@ intersect_ray_amd_software_tri(struct ra
 
    nir_ssa_def *cond = nir_inot(b, nir_iand(b, cond_back, cond_front));
 
+   /* If the ray is exactly on the edge where v is 0, consider it a miss.
+    * This seems to correspond to what the hardware is doing.
+    * Also, it avoids invoking hit shaders twice on a shared edge, which is
+    * discouraged by the spec.
+    */
+   cond = nir_iand(b, cond, nir_fneu(b, v, nir_imm_float(b, 0.0f)));
+
    nir_push_if(b, cond);
    {
       nir_ssa_def *det = nir_fadd(b, u, nir_fadd(b, v, w));
@@ -351,6 +324,7 @@ intersect_ray_amd_software_tri(struct ra
    }
    nir_pop_if(b, NULL);
 
+   b->exact = old_exact;
    return nir_load_var(b, result);
 }
 
diff -Npur mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c
--- mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c	2023-07-18 23:48:05.000000000 +0200
@@ -65,6 +65,42 @@ radv_amdgpu_bo_va_op(struct radv_amdgpu_
    return amdgpu_bo_va_op_raw(ws->dev, bo, offset, size, addr, flags, ops);
 }
 
+static void
+radv_amdgpu_winsys_virtual_map(struct radv_amdgpu_winsys *ws, struct radv_amdgpu_winsys_bo *bo,
+                               const struct radv_amdgpu_map_range *range)
+{
+   uint64_t internal_flags = 0;
+   assert(range->size);
+
+   if (!range->bo) {
+      internal_flags |= AMDGPU_VM_PAGE_PRT;
+   }
+
+   int r = radv_amdgpu_bo_va_op(ws, range->bo ? range->bo->bo : NULL, range->bo_offset, range->size,
+                                range->offset + bo->base.va, 0, internal_flags, AMDGPU_VA_OP_MAP);
+   if (r)
+      abort();
+}
+
+static void
+radv_amdgpu_winsys_virtual_unmap(struct radv_amdgpu_winsys *ws, struct radv_amdgpu_winsys_bo *bo,
+                                 const struct radv_amdgpu_map_range *range)
+{
+   uint64_t internal_flags = 0;
+   assert(range->size);
+
+   if (!range->bo) {
+      /* Even though this is an unmap, if we don't set this flag,
+         AMDGPU is going to complain about the missing buffer. */
+      internal_flags |= AMDGPU_VM_PAGE_PRT;
+   }
+
+   int r = radv_amdgpu_bo_va_op(ws, range->bo ? range->bo->bo : NULL, range->bo_offset, range->size,
+                                range->offset + bo->base.va, 0, internal_flags, AMDGPU_VA_OP_UNMAP);
+   if (r)
+      abort();
+}
+
 static int
 bo_comparator(const void *ap, const void *bp)
 {
@@ -107,6 +143,11 @@ radv_amdgpu_winsys_rebuild_bo_list(struc
    return VK_SUCCESS;
 }
 
+/**
+ * TODO: Use OP_REPLACE instead of OP_MAP/OP_UNMAP when
+ * https://lists.freedesktop.org/archives/amd-gfx/2023-June/094648.html is merged in all kernels
+ * we need to support.
+ */
 static VkResult
 radv_amdgpu_winsys_bo_virtual_bind(struct radeon_winsys *_ws, struct radeon_winsys_bo *_parent,
                                    uint64_t offset, uint64_t size, struct radeon_winsys_bo *_bo,
@@ -119,42 +160,10 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    int first = 0, last;
    struct radv_amdgpu_map_range new_first, new_last;
    VkResult result;
-   int r;
 
    assert(parent->is_virtual);
    assert(!bo || !bo->is_virtual);
 
-   /* When the BO is NULL, AMDGPU will reset the PTE VA range to the initial state. Otherwise, it
-    * will first unmap all existing VA that overlap the requested range and then map.
-    */
-   if (bo) {
-      r = radv_amdgpu_bo_va_op(ws, bo->bo, bo_offset, size, parent->base.va + offset, 0, 0,
-                               AMDGPU_VA_OP_REPLACE);
-   } else {
-      r = radv_amdgpu_bo_va_op(ws, NULL, 0, size, parent->base.va + offset, 0, AMDGPU_VM_PAGE_PRT,
-                               AMDGPU_VA_OP_REPLACE);
-   }
-
-   if (r) {
-      fprintf(stderr, "radv/amdgpu: Failed to replace a PRT VA region (%d).\n", r);
-      return VK_ERROR_OUT_OF_DEVICE_MEMORY;
-   }
-
-   /* Do not add the BO to the virtual BO list if it's already in the global list to avoid dangling
-    * BO references because it might have been destroyed without being previously unbound. Resetting
-    * it to NULL clears the old BO ranges if present.
-    *
-    * This is going to be clarified in the Vulkan spec:
-    * https://gitlab.khronos.org/vulkan/vulkan/-/issues/3125
-    *
-    * The issue still exists for non-global BO but it will be addressed later, once we are 100% it's
-    * RADV fault (mostly because the solution looks more complicated).
-    */
-   if (bo && bo->base.use_global_list) {
-      bo = NULL;
-      bo_offset = 0;
-   }
-
    /* We have at most 2 new ranges (1 by the bind, and another one by splitting a range that
     * contains the newly bound range). */
    if (parent->range_capacity - parent->range_count < 2) {
@@ -186,6 +195,7 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
     * whether to not create the corresponding split part. */
    bool remove_first = parent->ranges[first].offset == offset;
    bool remove_last = parent->ranges[last].offset + parent->ranges[last].size == offset + size;
+   bool unmapped_first = false;
 
    assert(parent->ranges[first].offset <= offset);
    assert(parent->ranges[last].offset + parent->ranges[last].size >= offset + size);
@@ -211,6 +221,11 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    range_count_delta = 1 - (last - first + 1) + !remove_first + !remove_last;
    new_idx = first + !remove_first;
 
+   /* Any range between first and last is going to be entirely covered by the new range so just
+    * unmap them. */
+   for (int i = first + 1; i < last; ++i)
+      radv_amdgpu_winsys_virtual_unmap(ws, parent, parent->ranges + i);
+
    /* If the first/last range are not left alone we unmap then and optionally map
     * them again after modifications. Not that this implicitly can do the splitting
     * if first == last. */
@@ -218,16 +233,24 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    new_last = parent->ranges[last];
 
    if (parent->ranges[first].offset + parent->ranges[first].size > offset || remove_first) {
+      radv_amdgpu_winsys_virtual_unmap(ws, parent, parent->ranges + first);
+      unmapped_first = true;
+
       if (!remove_first) {
          new_first.size = offset - new_first.offset;
+         radv_amdgpu_winsys_virtual_map(ws, parent, &new_first);
       }
    }
 
    if (parent->ranges[last].offset < offset + size || remove_last) {
+      if (first != last || !unmapped_first)
+         radv_amdgpu_winsys_virtual_unmap(ws, parent, parent->ranges + last);
+
       if (!remove_last) {
          new_last.size -= offset + size - new_last.offset;
          new_last.bo_offset += (offset + size - new_last.offset);
          new_last.offset = offset + size;
+         radv_amdgpu_winsys_virtual_map(ws, parent, &new_last);
       }
    }
 
@@ -247,6 +270,8 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    parent->ranges[new_idx].bo = bo;
    parent->ranges[new_idx].bo_offset = bo_offset;
 
+   radv_amdgpu_winsys_virtual_map(ws, parent, parent->ranges + new_idx);
+
    parent->range_count += range_count_delta;
 
    result = radv_amdgpu_winsys_rebuild_bo_list(parent);
@@ -430,15 +455,7 @@ radv_amdgpu_winsys_bo_create(struct rade
       bo->ranges[0].bo = NULL;
       bo->ranges[0].bo_offset = 0;
 
-      /* Reserve a PRT VA region. */
-      r = radv_amdgpu_bo_va_op(ws, NULL, 0, size, bo->base.va, 0, AMDGPU_VM_PAGE_PRT,
-                               AMDGPU_VA_OP_MAP);
-      if (r) {
-         fprintf(stderr, "radv/amdgpu: Failed to reserve a PRT VA region (%d).\n", r);
-         result = VK_ERROR_OUT_OF_DEVICE_MEMORY;
-         goto error_ranges_alloc;
-      }
-
+      radv_amdgpu_winsys_virtual_map(ws, bo, bo->ranges);
       radv_amdgpu_log_bo(ws, bo, false);
 
       *out_bo = (struct radeon_winsys_bo *)bo;
diff -Npur mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c
--- mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c	2023-07-18 23:48:05.000000000 +0200
@@ -739,6 +739,20 @@ radv_amdgpu_add_cs_to_bo_list(struct rad
       for (unsigned k = 0; k < virtual_bo->bo_count; ++k) {
          struct radv_amdgpu_winsys_bo *bo = virtual_bo->bos[k];
          bool found = false;
+
+         /* Do not add the BO to the virtual BO list if it's already in the global list to avoid
+          * dangling BO references because it might have been destroyed without being previously
+          * unbound. Resetting it to NULL clears the old BO ranges if present.
+          *
+          * This is going to be clarified in the Vulkan spec:
+          * https://gitlab.khronos.org/vulkan/vulkan/-/issues/3125
+          *
+          * The issue still exists for non-global BO but it will be addressed later, once we are
+          * 100% it's RADV fault (mostly because the solution looks more complicated).
+          */
+         if (bo->base.use_global_list)
+            continue;
+
          for (unsigned m = 0; m < num_handles; ++m) {
             if (handles[m].bo_handle == bo->bo_handle) {
                found = true;
@@ -1224,8 +1238,15 @@ radv_amdgpu_winsys_cs_dump(struct radeon
                            int trace_id_count)
 {
    struct radv_amdgpu_cs *cs = (struct radv_amdgpu_cs *)_cs;
-   void *ib = radv_amdgpu_winsys_get_cpu_addr(cs, cs->ib.ib_mc_address);
    int num_dw = cs->base.cdw;
+   void *ib;
+
+   if (cs->use_ib) {
+      ib = radv_amdgpu_winsys_get_cpu_addr(cs, cs->ib.ib_mc_address);
+   } else {
+      ib = cs->base.buf;
+   }
+
    assert(ib);
    ac_parse_ib(file, ib, num_dw, trace_ids, trace_id_count, "main IB", cs->ws->info.gfx_level,
                cs->ws->info.family, radv_amdgpu_winsys_get_cpu_addr, cs);
diff -Npur mesa-23.1.3/src/broadcom/ci/broadcom-rpi4-fails.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/broadcom/ci/broadcom-rpi4-fails.txt
--- mesa-23.1.3/src/broadcom/ci/broadcom-rpi4-fails.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/broadcom/ci/broadcom-rpi4-fails.txt	2023-07-18 23:48:05.000000000 +0200
@@ -338,7 +338,6 @@ spec@!opengl 2.0@max-samplers,Fail
 spec@!opengl 2.0@max-samplers border,Fail
 
 wayland-dEQP-EGL.functional.wide_color.window_888_colorspace_default,Fail
-wayland-dEQP-EGL.functional.wide_color.window_fp16_default_colorspace,Fail
 
 spec@!opengl 1.1@line-smooth-stipple,Fail
 
diff -Npur mesa-23.1.3/src/broadcom/compiler/vir.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/broadcom/compiler/vir.c
--- mesa-23.1.3/src/broadcom/compiler/vir.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/broadcom/compiler/vir.c	2023-07-18 23:48:05.000000000 +0200
@@ -1776,6 +1776,15 @@ skip_compile_strategy(struct v3d_compile
            return false;
    };
 }
+
+static inline void
+set_best_compile(struct v3d_compile **best, struct v3d_compile *c)
+{
+   if (*best)
+      vir_compile_destroy(*best);
+   *best = c;
+}
+
 uint64_t *v3d_compile(const struct v3d_compiler *compiler,
                       struct v3d_key *key,
                       struct v3d_prog_data **out_prog_data,
@@ -1840,11 +1849,11 @@ uint64_t *v3d_compile(const struct v3d_c
                         if (c->spills == 0 ||
                             strategies[strat].min_threads == 4 ||
                             V3D_DBG(OPT_COMPILE_TIME)) {
-                                best_c = c;
+                                set_best_compile(&best_c, c);
                                 break;
                         } else if (c->spills + c->fills <
                                    best_spill_fill_count) {
-                                best_c = c;
+                                set_best_compile(&best_c, c);
                                 best_spill_fill_count = c->spills + c->fills;
                         }
 
@@ -1874,10 +1883,8 @@ uint64_t *v3d_compile(const struct v3d_c
         }
 
         /* If the best strategy was not the last, choose that */
-        if (best_c && c != best_c) {
-                vir_compile_destroy(c);
-                c = best_c;
-        }
+        if (best_c && c != best_c)
+                set_best_compile(&c, best_c);
 
         if (V3D_DBG(PERF) &&
             c->compilation_result !=
diff -Npur mesa-23.1.3/src/compiler/glsl/glcpp/glcpp.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl/glcpp/glcpp.h
--- mesa-23.1.3/src/compiler/glsl/glcpp/glcpp.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl/glcpp/glcpp.h	2023-07-18 23:48:05.000000000 +0200
@@ -91,6 +91,7 @@ do {								\
       (Current).first_column = YYRHSLOC(Rhs, 1).first_column;	\
       (Current).last_line    = YYRHSLOC(Rhs, N).last_line;	\
       (Current).last_column  = YYRHSLOC(Rhs, N).last_column;	\
+      (Current).source       = YYRHSLOC(Rhs, N).source;		\
    }								\
    else								\
    {								\
@@ -98,8 +99,8 @@ do {								\
 	 YYRHSLOC(Rhs, 0).last_line;				\
       (Current).first_column = (Current).last_column =		\
 	 YYRHSLOC(Rhs, 0).last_column;				\
+      (Current).source       = YYRHSLOC(Rhs, 0).source;		\
    }								\
-   (Current).source = 0;					\
 } while (0)
 
 struct token {
diff -Npur mesa-23.1.3/src/compiler/glsl/gl_nir_linker.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl/gl_nir_linker.c
--- mesa-23.1.3/src/compiler/glsl/gl_nir_linker.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl/gl_nir_linker.c	2023-07-18 23:48:05.000000000 +0200
@@ -56,6 +56,7 @@ gl_nir_opts(nir_shader *nir)
                nir_var_mem_shared,
                NULL);
 
+      NIR_PASS(progress, nir, nir_opt_find_array_copies);
       NIR_PASS(progress, nir, nir_opt_copy_prop_vars);
       NIR_PASS(progress, nir, nir_opt_dead_write_vars);
 
@@ -117,6 +118,8 @@ gl_nir_opts(nir_shader *nir)
          NIR_PASS(progress, nir, nir_opt_loop_unroll);
       }
    } while (progress);
+
+   NIR_PASS_V(nir, nir_lower_var_copies);
 }
 
 static void
diff -Npur mesa-23.1.3/src/compiler/glsl/glsl_parser_extras.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl/glsl_parser_extras.h
--- mesa-23.1.3/src/compiler/glsl/glsl_parser_extras.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl/glsl_parser_extras.h	2023-07-18 23:48:05.000000000 +0200
@@ -998,6 +998,7 @@ do {
       (Current).last_line    = YYRHSLOC(Rhs, N).last_line;      \
       (Current).last_column  = YYRHSLOC(Rhs, N).last_column;    \
       (Current).path         = YYRHSLOC(Rhs, N).path;           \
+      (Current).source       = YYRHSLOC(Rhs, N).source;         \
    }                                                            \
    else                                                         \
    {                                                            \
@@ -1005,9 +1006,9 @@ do {
          YYRHSLOC(Rhs, 0).last_line;                            \
       (Current).first_column = (Current).last_column =          \
          YYRHSLOC(Rhs, 0).last_column;                          \
-      (Current).path = YYRHSLOC(Rhs, 0).path;                   \
+      (Current).path         = YYRHSLOC(Rhs, 0).path;           \
+      (Current).source       = YYRHSLOC(Rhs, 0).source;         \
    }                                                            \
-   (Current).source = 0;                                        \
 } while (0)
 
 /**
diff -Npur mesa-23.1.3/src/compiler/glsl_types.cpp mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl_types.cpp
--- mesa-23.1.3/src/compiler/glsl_types.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/glsl_types.cpp	2023-07-18 23:48:05.000000000 +0200
@@ -2495,7 +2495,7 @@ glsl_type::explicit_size(bool align_to_s
 
       assert(this->length > 0);
       unsigned elem_size = align_to_stride ? this->explicit_stride : this->fields.array->explicit_size();
-      assert(this->explicit_stride >= elem_size);
+      assert(this->explicit_stride == 0 || this->explicit_stride >= elem_size);
 
       return this->explicit_stride * (this->length - 1) + elem_size;
    } else if (this->is_matrix()) {
diff -Npur mesa-23.1.3/src/compiler/nir/nir.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir.h
--- mesa-23.1.3/src/compiler/nir/nir.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir.h	2023-07-18 23:48:05.000000000 +0200
@@ -3911,6 +3911,50 @@ typedef struct nir_shader {
 #define nir_foreach_function(func, shader) \
    foreach_list_typed(nir_function, func, node, &(shader)->functions)
 
+static inline nir_function *
+nir_first_function_with_impl(const nir_shader *shader)
+{
+   foreach_list_typed(nir_function, func, node, &shader->functions) {
+      if (func->impl != NULL)
+         return func;
+   }
+
+   return NULL;
+}
+
+static inline nir_function_impl *
+_nir_foreach_function_impl_next(const nir_function **it)
+{
+   foreach_list_typed_from(nir_function, func, node, _, (*it)->node.next) {
+      if (func->impl != NULL) {
+         *it = func;
+         return func->impl;
+      }
+   }
+
+   return NULL;
+}
+
+/* Equivalent to
+ *
+ *    nir_foreach_function(func, shader) {
+ *       if (func->impl != NULL) {
+ *             ...
+ *       }
+ *    }
+ *
+ * Carefully written to ensure break/continue work in the user code.
+ */
+
+#define nir_foreach_function_impl(it, shader)                                  \
+   for (const nir_function *_func_##it = nir_first_function_with_impl(shader); \
+        _func_##it != NULL;                                                    \
+        _func_##it = NULL)                                                     \
+                                                                               \
+      for (nir_function_impl *it = (_func_##it)->impl;                         \
+           it != NULL;                                                         \
+           it = _nir_foreach_function_impl_next(&_func_##it))                  \
+
 static inline nir_function_impl *
 nir_shader_get_entrypoint(const nir_shader *shader)
 {
diff -Npur mesa-23.1.3/src/compiler/nir/nir_lower_bool_to_int32.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_lower_bool_to_int32.c
--- mesa-23.1.3/src/compiler/nir/nir_lower_bool_to_int32.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_lower_bool_to_int32.c	2023-07-18 23:48:05.000000000 +0200
@@ -169,15 +169,20 @@ nir_lower_bool_to_int32_instr(UNUSED nir
 bool
 nir_lower_bool_to_int32(nir_shader *shader)
 {
+   bool progress = false;
    nir_foreach_function(func, shader) {
       for (unsigned idx = 0; idx < func->num_params; idx++) {
          nir_parameter *param = &func->params[idx];
-         if (param->bit_size == 1)
+         if (param->bit_size == 1) {
             param->bit_size = 32;
+            progress = true;
+         }
       }
    }
-   return nir_shader_instructions_pass(shader, nir_lower_bool_to_int32_instr,
-                                       nir_metadata_block_index |
-                                       nir_metadata_dominance,
-                                       NULL);
+
+   progress |=
+      nir_shader_instructions_pass(shader, nir_lower_bool_to_int32_instr,
+                                   nir_metadata_block_index |
+                                   nir_metadata_dominance, NULL);
+   return progress;
 }
diff -Npur mesa-23.1.3/src/compiler/nir/nir_lower_tex.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_lower_tex.c
--- mesa-23.1.3/src/compiler/nir/nir_lower_tex.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_lower_tex.c	2023-07-18 23:48:05.000000000 +0200
@@ -1419,13 +1419,15 @@ nir_lower_tex_block(nir_block *block, ni
 
       /* mask of src coords to saturate (clamp): */
       unsigned sat_mask = 0;
-
-      if ((1 << tex->sampler_index) & options->saturate_r)
-         sat_mask |= (1 << 2);    /* .z */
-      if ((1 << tex->sampler_index) & options->saturate_t)
-         sat_mask |= (1 << 1);    /* .y */
-      if ((1 << tex->sampler_index) & options->saturate_s)
-         sat_mask |= (1 << 0);    /* .x */
+      /* ignore saturate for txf ops: these don't use samplers and can't GL_CLAMP */
+      if (nir_tex_instr_need_sampler(tex)) {
+         if ((1 << tex->sampler_index) & options->saturate_r)
+            sat_mask |= (1 << 2);    /* .z */
+         if ((1 << tex->sampler_index) & options->saturate_t)
+            sat_mask |= (1 << 1);    /* .y */
+         if ((1 << tex->sampler_index) & options->saturate_s)
+            sat_mask |= (1 << 0);    /* .x */
+      }
 
       if (options->lower_index_to_offset)
          progress |= lower_index_to_offset(b, tex);
diff -Npur mesa-23.1.3/src/compiler/nir/nir_opt_dead_cf.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_opt_dead_cf.c
--- mesa-23.1.3/src/compiler/nir/nir_opt_dead_cf.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_opt_dead_cf.c	2023-07-18 23:48:05.000000000 +0200
@@ -83,43 +83,41 @@ remove_after_cf_node(nir_cf_node *node)
 static void
 opt_constant_if(nir_if *if_stmt, bool condition)
 {
-   /* First, we need to remove any phi nodes after the if by rewriting uses to
-    * point to the correct source.
-    */
-   nir_block *after = nir_cf_node_as_block(nir_cf_node_next(&if_stmt->cf_node));
    nir_block *last_block = condition ? nir_if_last_then_block(if_stmt)
                                      : nir_if_last_else_block(if_stmt);
 
-   nir_foreach_instr_safe(instr, after) {
-      if (instr->type != nir_instr_type_phi)
-         break;
-
-      nir_phi_instr *phi = nir_instr_as_phi(instr);
-      nir_ssa_def *def = NULL;
-      nir_foreach_phi_src(phi_src, phi) {
-         if (phi_src->pred != last_block)
-            continue;
-
-         assert(phi_src->src.is_ssa);
-         def = phi_src->src.ssa;
-      }
-
-      assert(def);
-      assert(phi->dest.is_ssa);
-      nir_ssa_def_rewrite_uses(&phi->dest.ssa, def);
-      nir_instr_remove(instr);
-   }
-
    /* The control flow list we're about to paste in may include a jump at the
     * end, and in that case we have to delete the rest of the control flow
     * list after the if since it's unreachable and the validator will balk if
     * we don't.
     */
 
-   if (!exec_list_is_empty(&last_block->instr_list)) {
-      nir_instr *last_instr = nir_block_last_instr(last_block);
-      if (last_instr->type == nir_instr_type_jump)
-         remove_after_cf_node(&if_stmt->cf_node);
+   if (nir_block_ends_in_jump(last_block)) {
+      remove_after_cf_node(&if_stmt->cf_node);
+   } else {
+      /* Remove any phi nodes after the if by rewriting uses to point to the
+       * correct source.
+       */
+      nir_block *after = nir_cf_node_as_block(nir_cf_node_next(&if_stmt->cf_node));
+      nir_foreach_instr_safe(instr, after) {
+         if (instr->type != nir_instr_type_phi)
+            break;
+
+         nir_phi_instr *phi = nir_instr_as_phi(instr);
+         nir_ssa_def *def = NULL;
+         nir_foreach_phi_src(phi_src, phi) {
+            if (phi_src->pred != last_block)
+               continue;
+
+            assert(phi_src->src.is_ssa);
+            def = phi_src->src.ssa;
+         }
+
+         assert(def);
+         assert(phi->dest.is_ssa);
+         nir_ssa_def_rewrite_uses(&phi->dest.ssa, def);
+         nir_instr_remove(&phi->instr);
+      }
    }
 
    /* Finally, actually paste in the then or else branch and delete the if. */
diff -Npur mesa-23.1.3/src/compiler/nir/nir_range_analysis.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_range_analysis.c
--- mesa-23.1.3/src/compiler/nir/nir_range_analysis.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_range_analysis.c	2023-07-18 23:48:05.000000000 +0200
@@ -1418,12 +1418,12 @@ search_phi_bcsel(nir_ssa_scalar scalar,
       nir_op op = nir_ssa_scalar_alu_op(scalar);
 
       if ((op == nir_op_bcsel || op == nir_op_b32csel) && buf_size >= 2) {
-         nir_ssa_scalar src0 = nir_ssa_scalar_chase_alu_src(scalar, 0);
          nir_ssa_scalar src1 = nir_ssa_scalar_chase_alu_src(scalar, 1);
+         nir_ssa_scalar src2 = nir_ssa_scalar_chase_alu_src(scalar, 2);
 
-         unsigned added = search_phi_bcsel(src0, buf, buf_size - 1, visited);
+         unsigned added = search_phi_bcsel(src1, buf, buf_size - 1, visited);
          buf_size -= added;
-         added += search_phi_bcsel(src1, buf + added, buf_size, visited);
+         added += search_phi_bcsel(src2, buf + added, buf_size, visited);
          return added;
       }
    }
diff -Npur mesa-23.1.3/src/compiler/nir/nir_split_64bit_vec3_and_vec4.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_split_64bit_vec3_and_vec4.c
--- mesa-23.1.3/src/compiler/nir/nir_split_64bit_vec3_and_vec4.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/compiler/nir/nir_split_64bit_vec3_and_vec4.c	2023-07-18 23:48:05.000000000 +0200
@@ -214,7 +214,8 @@ split_store_deref(nir_builder *b, nir_in
 
    int write_mask_zw = nir_intrinsic_write_mask(intr) & 0xc;
    if (write_mask_zw) {
-      nir_ssa_def *src_zw = nir_channels(b, intr->src[1].ssa, write_mask_zw);
+      nir_ssa_def *src_zw = nir_channels(b, intr->src[1].ssa,
+                                         nir_component_mask(intr->src[1].ssa->num_components) & 0xc);
       nir_build_store_deref(b, &deref_zw->dest.ssa, src_zw, write_mask_zw >> 2);
    }
 
diff -Npur mesa-23.1.3/src/freedreno/ci/freedreno-a618-fails.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/ci/freedreno-a618-fails.txt
--- mesa-23.1.3/src/freedreno/ci/freedreno-a618-fails.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/ci/freedreno-a618-fails.txt	2023-07-18 23:48:05.000000000 +0200
@@ -336,7 +336,6 @@ spill-dEQP-VK.subgroups.ballot_broadcast
 
 # Failing (Color test failed) since wayland platform was enabled in arm builds
 wayland-dEQP-EGL.functional.wide_color.window_888_colorspace_default,Fail
-wayland-dEQP-EGL.functional.wide_color.window_fp16_default_colorspace,Fail
 
 # skqp failure:
 # SRGBReadWritePixels FAILED (7 errors)
diff -Npur mesa-23.1.3/src/freedreno/ci/freedreno-a630-fails.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/ci/freedreno-a630-fails.txt
--- mesa-23.1.3/src/freedreno/ci/freedreno-a630-fails.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/ci/freedreno-a630-fails.txt	2023-07-18 23:48:05.000000000 +0200
@@ -346,7 +346,6 @@ wayland-dEQP-EGL.functional.wide_color.p
 
 # Failing (Color test failed) since wayland platform was enabled in arm builds
 wayland-dEQP-EGL.functional.wide_color.window_888_colorspace_default,Fail
-wayland-dEQP-EGL.functional.wide_color.window_fp16_default_colorspace,Fail
 
 # skqp failure:
 # SRGBReadWritePixels FAILED (7 errors)
diff -Npur mesa-23.1.3/src/freedreno/drm/freedreno_bo.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/drm/freedreno_bo.c
--- mesa-23.1.3/src/freedreno/drm/freedreno_bo.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/drm/freedreno_bo.c	2023-07-18 23:48:05.000000000 +0200
@@ -490,6 +490,9 @@ bo_flush(struct fd_bo *bo)
 int
 fd_bo_get_name(struct fd_bo *bo, uint32_t *name)
 {
+   if (suballoc_bo(bo))
+      return -1;
+
    if (!bo->name) {
       struct drm_gem_flink req = {
          .handle = bo->handle,
@@ -517,6 +520,8 @@ fd_bo_get_name(struct fd_bo *bo, uint32_
 uint32_t
 fd_bo_handle(struct fd_bo *bo)
 {
+   if (suballoc_bo(bo))
+      return 0;
    bo->bo_reuse = NO_CACHE;
    bo->alloc_flags |= FD_BO_SHARED;
    bo_flush(bo);
@@ -528,6 +533,9 @@ fd_bo_dmabuf(struct fd_bo *bo)
 {
    int ret, prime_fd;
 
+   if (suballoc_bo(bo))
+      return -1;
+
    ret = drmPrimeHandleToFD(bo->dev->fd, bo->handle, DRM_CLOEXEC | DRM_RDWR,
                             &prime_fd);
    if (ret) {
diff -Npur mesa-23.1.3/src/freedreno/vulkan/tu_knl_drm_msm.cc mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/vulkan/tu_knl_drm_msm.cc
--- mesa-23.1.3/src/freedreno/vulkan/tu_knl_drm_msm.cc	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/vulkan/tu_knl_drm_msm.cc	2023-07-18 23:48:05.000000000 +0200
@@ -267,6 +267,7 @@ tu_allocate_userspace_iova(struct tu_dev
                                       size)) {
             *iova = client_iova;
          } else {
+            mtx_unlock(&dev->physical_device->vma_mutex);
             return VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
          }
       } else {
diff -Npur mesa-23.1.3/src/freedreno/vulkan/tu_knl_kgsl.cc mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/vulkan/tu_knl_kgsl.cc
--- mesa-23.1.3/src/freedreno/vulkan/tu_knl_kgsl.cc	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/freedreno/vulkan/tu_knl_kgsl.cc	2023-07-18 23:48:05.000000000 +0200
@@ -230,7 +230,7 @@ kgsl_sync_cache(VkDevice _device,
 
    struct kgsl_gpuobj_sync_obj *sync_list =
       (struct kgsl_gpuobj_sync_obj *) vk_zalloc(
-         &device->vk.alloc, sizeof(*sync_list), 8,
+         &device->vk.alloc, sizeof(*sync_list)*count, 8,
          VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE);
 
    struct kgsl_gpuobj_sync gpuobj_sync = {
diff -Npur mesa-23.1.3/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c
--- mesa-23.1.3/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/draw/draw_pt_fetch_shade_pipeline_llvm.c	2023-07-18 23:48:05.000000000 +0200
@@ -120,7 +120,7 @@ llvm_middle_end_prepare_gs(struct llvm_m
          }
       }
 
-      variant = draw_gs_llvm_create_variant(llvm, gs->info.num_outputs, key);
+      variant = draw_gs_llvm_create_variant(llvm, draw_total_gs_outputs(draw), key);
 
       if (variant) {
          list_add(&variant->list_item_local.list, &shader->variants.list);
diff -Npur mesa-23.1.3/src/gallium/auxiliary/driver_trace/tr_context.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/driver_trace/tr_context.c
--- mesa-23.1.3/src/gallium/auxiliary/driver_trace/tr_context.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/driver_trace/tr_context.c	2023-07-18 23:48:05.000000000 +0200
@@ -2181,9 +2181,7 @@ static uint64_t trace_context_create_tex
    trace_dump_call_begin("pipe_context", "create_texture_handle");
    trace_dump_arg(ptr, pipe);
    trace_dump_arg(ptr, view);
-   trace_dump_arg_begin("state");
    trace_dump_arg(sampler_state, state);
-   trace_dump_arg_end();
 
    handle = pipe->create_texture_handle(pipe, view, state);
 
diff -Npur mesa-23.1.3/src/gallium/auxiliary/gallivm/lp_bld_sample.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/gallivm/lp_bld_sample.h
--- mesa-23.1.3/src/gallium/auxiliary/gallivm/lp_bld_sample.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/gallivm/lp_bld_sample.h	2023-07-18 23:48:05.000000000 +0200
@@ -47,6 +47,8 @@
 extern "C" {
 #endif
 
+#define LP_MAX_TEXEL_BUFFER_ELEMENTS 134217728
+
 struct util_format_description;
 struct lp_type;
 struct lp_build_context;
diff -Npur mesa-23.1.3/src/gallium/auxiliary/gallivm/lp_bld_sample_soa.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/gallivm/lp_bld_sample_soa.c
--- mesa-23.1.3/src/gallium/auxiliary/gallivm/lp_bld_sample_soa.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/gallivm/lp_bld_sample_soa.c	2023-07-18 23:48:05.000000000 +0200
@@ -4631,6 +4631,14 @@ lp_build_size_query_soa(struct gallivm_s
                             lp_build_vec_type(gallivm, params->int_type),
                             num_levels);
    }
+
+   if (target == PIPE_BUFFER) {
+      struct lp_build_context bld_int;
+      lp_build_context_init(&bld_int, gallivm, params->int_type);
+
+      params->sizes_out[0] = lp_build_min(&bld_int, params->sizes_out[0],
+         lp_build_const_int_vec(gallivm, params->int_type, LP_MAX_TEXEL_BUFFER_ELEMENTS));
+   }
 }
 
 
diff -Npur mesa-23.1.3/src/gallium/auxiliary/renderonly/renderonly.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/renderonly/renderonly.c
--- mesa-23.1.3/src/gallium/auxiliary/renderonly/renderonly.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/renderonly/renderonly.c	2023-07-18 23:48:05.000000000 +0200
@@ -66,7 +66,7 @@ renderonly_create_kms_dumb_buffer_for_re
                                                struct renderonly *ro,
                                                struct winsys_handle *out_handle)
 {
-   struct renderonly_scanout *scanout;
+   struct renderonly_scanout *scanout = NULL;
    int err;
    struct drm_mode_create_dumb create_dumb = {
       .width = rsc->width0,
@@ -114,7 +114,13 @@ renderonly_create_kms_dumb_buffer_for_re
    return scanout;
 
 free_dumb:
-   destroy_dumb.handle = scanout->handle;
+   /* If an error occured, make sure we reset the scanout object before
+    * leaving.
+    */
+   if (scanout)
+      memset(scanout, 0, sizeof(*scanout));
+
+   destroy_dumb.handle = create_dumb.handle;
    drmIoctl(ro->kms_fd, DRM_IOCTL_MODE_DESTROY_DUMB, &destroy_dumb);
 
    return NULL;
diff -Npur mesa-23.1.3/src/gallium/auxiliary/util/u_blitter.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/util/u_blitter.c
--- mesa-23.1.3/src/gallium/auxiliary/util/u_blitter.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/auxiliary/util/u_blitter.c	2023-07-18 23:48:05.000000000 +0200
@@ -2634,10 +2634,7 @@ void util_blitter_clear_buffer(struct bl
    blitter_check_saved_vertex_states(ctx);
    blitter_disable_render_cond(ctx);
 
-   if (ctx->base.saved_vertex_buffer.buffer.resource) {
-      pipe->set_vertex_buffers(pipe, ctx->base.vb_slot, 1, 0, false, &vb);
-   }
-
+   pipe->set_vertex_buffers(pipe, ctx->base.vb_slot, 1, 0, false, &vb);
    pipe->bind_vertex_elements_state(pipe,
                                     ctx->velem_state_readbuf[num_channels-1]);
    bind_vs_pos_only(ctx, num_channels);
diff -Npur mesa-23.1.3/src/gallium/drivers/asahi/agx_pipe.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/asahi/agx_pipe.c
--- mesa-23.1.3/src/gallium/drivers/asahi/agx_pipe.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/asahi/agx_pipe.c	2023-07-18 23:48:05.000000000 +0200
@@ -40,12 +40,6 @@
 #include "agx_state.h"
 
 /* Fake values, pending UAPI upstreaming */
-#ifndef DRM_FORMAT_MOD_LINEAR
-#define DRM_FORMAT_MOD_LINEAR 1
-#endif
-#ifndef DRM_FORMAT_MOD_INVALID
-#define DRM_FORMAT_MOD_INVALID ((1ULL << 56) - 1)
-#endif
 #ifndef DRM_FORMAT_MOD_APPLE_TWIDDLED
 #define DRM_FORMAT_MOD_APPLE_TWIDDLED (2)
 #endif
diff -Npur mesa-23.1.3/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt
--- mesa-23.1.3/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/ci/crocus-hsw-fails.txt	2023-07-18 23:48:05.000000000 +0200
@@ -2,8 +2,6 @@ spec@!opengl 1.0@depth-clear-precision-c
 spec@!opengl 1.0@depth-clear-precision-check@depth16,Fail
 spec@!opengl 1.0@depth-clear-precision-check@depth32,Fail
 
-fast_color_clear@fcc-write-after-clear,Fail
-
 spec@!opengl 1.0@gl-1.0-swapbuffers-behavior,Fail
 
 # Compat mode failure
diff -Npur mesa-23.1.3/src/gallium/drivers/crocus/crocus_clear.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/crocus_clear.c
--- mesa-23.1.3/src/gallium/drivers/crocus/crocus_clear.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/crocus_clear.c	2023-07-18 23:48:05.000000000 +0200
@@ -101,8 +101,8 @@ can_fast_clear_color(struct crocus_conte
     * during resolves because the resolve operations only know about the
     * resource and not the renderbuffer.
     */
-   if (isl_format_srgb_to_linear(render_format) !=
-       isl_format_srgb_to_linear(format)) {
+   if (!crocus_render_formats_color_compatible(render_format, res->surf.format,
+                                             color)) {
       return false;
    }
 
diff -Npur mesa-23.1.3/src/gallium/drivers/crocus/crocus_resolve.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/crocus_resolve.c
--- mesa-23.1.3/src/gallium/drivers/crocus/crocus_resolve.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/crocus_resolve.c	2023-07-18 23:48:05.000000000 +0200
@@ -981,6 +981,22 @@ crocus_resource_prepare_texture(struct c
                                   aux_usage, clear_supported);
 }
 
+bool
+crocus_render_formats_color_compatible(enum isl_format a, enum isl_format b,
+                                     union isl_color_value color)
+{
+   if (a == b)
+      return true;
+
+   /* A difference in color space doesn't matter for 0/1 values. */
+   if (isl_format_srgb_to_linear(a) == isl_format_srgb_to_linear(b) &&
+       isl_color_value_is_zero_one(color, a)) {
+      return true;
+   }
+
+   return false;
+}
+
 enum isl_aux_usage
 crocus_resource_render_aux_usage(struct crocus_context *ice,
                                  struct crocus_resource *res,
@@ -999,6 +1015,22 @@ crocus_resource_render_aux_usage(struct
       return res->aux.usage;
 
    case ISL_AUX_USAGE_CCS_D:
+      /* Disable CCS for some cases of texture-view rendering. On gfx12, HW
+       * may convert some subregions of shader output to fast-cleared blocks
+       * if CCS is enabled and the shader output matches the clear color.
+       * Existing fast-cleared blocks are correctly interpreted by the clear
+       * color and the resource format (see can_fast_clear_color). To avoid
+       * gaining new fast-cleared blocks that can't be interpreted by the
+       * resource format (and to avoid misinterpreting existing ones), shut
+       * off CCS when the interpretation of the clear color differs between
+       * the render_format and the resource format.
+       */
+      if (!crocus_render_formats_color_compatible(render_format,
+                                                res->surf.format,
+                                                res->aux.clear_color)) {
+         return ISL_AUX_USAGE_NONE;
+      }
+
       /* Otherwise, we try to fall back to CCS_D */
       if (isl_format_supports_ccs_d(devinfo, render_format))
          return ISL_AUX_USAGE_CCS_D;
diff -Npur mesa-23.1.3/src/gallium/drivers/crocus/crocus_resource.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/crocus_resource.h
--- mesa-23.1.3/src/gallium/drivers/crocus/crocus_resource.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/crocus/crocus_resource.h	2023-07-18 23:48:05.000000000 +0200
@@ -526,6 +526,9 @@ bool crocus_has_color_unresolved(const s
                                  unsigned start_level, unsigned num_levels,
                                  unsigned start_layer, unsigned num_layers);
 
+bool crocus_render_formats_color_compatible(enum isl_format a,
+                                          enum isl_format b,
+                                          union isl_color_value color);
 enum isl_aux_usage crocus_resource_render_aux_usage(struct crocus_context *ice,
                                                     struct crocus_resource *res,
                                                     uint32_t level,
diff -Npur mesa-23.1.3/src/gallium/drivers/d3d12/d3d12_batch.cpp mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/d3d12/d3d12_batch.cpp
--- mesa-23.1.3/src/gallium/drivers/d3d12/d3d12_batch.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/d3d12/d3d12_batch.cpp	2023-07-18 23:48:05.000000000 +0200
@@ -281,7 +281,7 @@ d3d12_batch_get_reference(struct d3d12_b
 {
    if (batch->ctx_id != D3D12_CONTEXT_NO_ID) {
       if ((bo->local_reference_mask[batch->ctx_id] & (1 << batch->ctx_index)) != 0) {
-         return &bo->local_reference_state[(batch->ctx_id * 16) + batch->ctx_index];
+         return &bo->local_reference_state[batch->ctx_id][batch->ctx_index];
       }
       else
          return NULL;
@@ -304,9 +304,9 @@ d3d12_batch_acquire_reference(struct d3d
          d3d12_bo_reference(bo);
          util_dynarray_append(&batch->local_bos, d3d12_bo*, bo);
          bo->local_reference_mask[batch->ctx_id] |= (1 << batch->ctx_index);
-         bo->local_reference_state[(batch->ctx_id * 16) + batch->ctx_index] = batch_bo_reference_none;
+         bo->local_reference_state[batch->ctx_id][batch->ctx_index] = batch_bo_reference_none;
       }
-      return &bo->local_reference_state[(batch->ctx_id * 16) + batch->ctx_index];
+      return &bo->local_reference_state[batch->ctx_id][batch->ctx_index];
    }
    else {
       hash_entry* entry = _mesa_hash_table_search(batch->bos, bo);
diff -Npur mesa-23.1.3/src/gallium/drivers/d3d12/d3d12_bufmgr.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/d3d12/d3d12_bufmgr.h
--- mesa-23.1.3/src/gallium/drivers/d3d12/d3d12_bufmgr.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/d3d12/d3d12_bufmgr.h	2023-07-18 23:48:05.000000000 +0200
@@ -71,7 +71,7 @@ struct d3d12_bo {
    uint8_t local_reference_mask[16];
 
    d3d12_context_state_table_entry local_context_states[16];
-   uint8_t local_reference_state[128];
+   uint8_t local_reference_state[8][16];
 };
 
 struct d3d12_buffer {
diff -Npur mesa-23.1.3/src/gallium/drivers/etnaviv/etnaviv_shader.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/etnaviv/etnaviv_shader.c
--- mesa-23.1.3/src/gallium/drivers/etnaviv/etnaviv_shader.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/etnaviv/etnaviv_shader.c	2023-07-18 23:48:05.000000000 +0200
@@ -564,7 +564,8 @@ etna_set_max_shader_compiler_threads(str
 {
    struct etna_screen *screen = etna_screen(pscreen);
 
-   util_queue_adjust_num_threads(&screen->shader_compiler_queue, max_threads);
+   util_queue_adjust_num_threads(&screen->shader_compiler_queue, max_threads,
+                                 false);
 }
 
 static bool
diff -Npur mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_resource.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/freedreno_resource.c
--- mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_resource.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/freedreno_resource.c	2023-07-18 23:48:05.000000000 +0200
@@ -1103,6 +1103,7 @@ static bool
 fd_resource_get_handle(struct pipe_screen *pscreen, struct pipe_context *pctx,
                        struct pipe_resource *prsc, struct winsys_handle *handle,
                        unsigned usage)
+   assert_dt
 {
    struct fd_resource *rsc = fd_resource(prsc);
 
@@ -1115,8 +1116,38 @@ fd_resource_get_handle(struct pipe_scree
 
    DBG("%" PRSC_FMT ", modifier=%" PRIx64, PRSC_ARGS(prsc), handle->modifier);
 
-   return fd_screen_bo_get_handle(pscreen, rsc->bo, rsc->scanout,
-                                  fd_resource_pitch(rsc, 0), handle);
+   bool ret = fd_screen_bo_get_handle(pscreen, rsc->bo, rsc->scanout,
+                                      fd_resource_pitch(rsc, 0), handle);
+
+   if (!ret && !(prsc->bind & PIPE_BIND_SHARED)) {
+
+      pctx = threaded_context_unwrap_sync(pctx);
+
+      struct fd_context *ctx = pctx ?
+            fd_context(pctx) : fd_screen_aux_context_get(pscreen);
+
+      /* Since gl is horrible, we can end up getting asked to export a handle
+       * for a rsc which was not originally allocated in a way that can be
+       * exported (for ex, sub-allocation or in the case of virtgpu we need
+       * to tell the kernel at allocation time that the buffer can be shared)
+       *
+       * If we get into this scenario we can try to reallocate.
+       */
+
+      prsc->bind |= PIPE_BIND_SHARED;
+
+      ret = fd_try_shadow_resource(ctx, rsc, 0, NULL, handle->modifier);
+
+      if (!pctx)
+         fd_screen_aux_context_put(pscreen);
+
+      if (!ret)
+         return false;
+
+      return fd_resource_get_handle(pscreen, pctx, prsc, handle, usage);
+   }
+
+   return ret;
 }
 
 /* special case to resize query buf after allocated.. */
diff -Npur mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/freedreno_screen.c
--- mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/freedreno_screen.c	2023-07-18 23:48:05.000000000 +0200
@@ -146,6 +146,9 @@ fd_screen_destroy(struct pipe_screen *ps
 {
    struct fd_screen *screen = fd_screen(pscreen);
 
+   if (screen->aux_ctx)
+      screen->aux_ctx->destroy(screen->aux_ctx);
+
    if (screen->tess_bo)
       fd_bo_del(screen->tess_bo);
 
@@ -880,11 +883,17 @@ fd_screen_bo_get_handle(struct pipe_scre
       if (screen->ro) {
          return renderonly_get_handle(scanout, whandle);
       } else {
-         whandle->handle = fd_bo_handle(bo);
+         uint32_t handle = fd_bo_handle(bo);
+         if (!handle)
+            return false;
+         whandle->handle = handle;
          return true;
       }
    } else if (whandle->type == WINSYS_HANDLE_TYPE_FD) {
-      whandle->handle = fd_bo_dmabuf(bo);
+      int fd = fd_bo_dmabuf(bo);
+      if (fd < 0)
+         return false;
+      whandle->handle = fd;
       return true;
    } else {
       return false;
@@ -1221,9 +1230,34 @@ fd_screen_create(int fd,
 
    slab_create_parent(&screen->transfer_pool, sizeof(struct fd_transfer), 16);
 
+   simple_mtx_init(&screen->aux_ctx_lock, mtx_plain);
+
    return pscreen;
 
 fail:
    fd_screen_destroy(pscreen);
    return NULL;
 }
+
+struct fd_context *
+fd_screen_aux_context_get(struct pipe_screen *pscreen)
+{
+   struct fd_screen *screen = fd_screen(pscreen);
+
+   simple_mtx_lock(&screen->aux_ctx_lock);
+
+   if (!screen->aux_ctx) {
+      screen->aux_ctx = pscreen->context_create(pscreen, NULL, 0);
+   }
+
+   return fd_context(screen->aux_ctx);
+}
+
+void
+fd_screen_aux_context_put(struct pipe_screen *pscreen)
+{
+   struct fd_screen *screen = fd_screen(pscreen);
+
+   screen->aux_ctx->flush(screen->aux_ctx, NULL, 0);
+   simple_mtx_unlock(&screen->aux_ctx_lock);
+}
diff -Npur mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/freedreno_screen.h
--- mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/freedreno_screen.h	2023-07-18 23:48:05.000000000 +0200
@@ -170,6 +170,9 @@ struct fd_screen {
     */
    const enum pc_di_primtype *primtypes;
    uint32_t primtypes_mask;
+
+   simple_mtx_t aux_ctx_lock;
+   struct pipe_context *aux_ctx;
 };
 
 static inline struct fd_screen *
@@ -178,6 +181,10 @@ fd_screen(struct pipe_screen *pscreen)
    return (struct fd_screen *)pscreen;
 }
 
+struct fd_context;
+struct fd_context * fd_screen_aux_context_get(struct pipe_screen *pscreen);
+void fd_screen_aux_context_put(struct pipe_screen *pscreen);
+
 static inline void
 fd_screen_lock(struct fd_screen *screen)
 {
diff -Npur mesa-23.1.3/src/gallium/drivers/freedreno/ir3/ir3_gallium.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/ir3/ir3_gallium.c
--- mesa-23.1.3/src/gallium/drivers/freedreno/ir3/ir3_gallium.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/freedreno/ir3/ir3_gallium.c	2023-07-18 23:48:05.000000000 +0200
@@ -517,7 +517,8 @@ ir3_set_max_shader_compiler_threads(stru
    /* This function doesn't allow a greater number of threads than
     * the queue had at its creation.
     */
-   util_queue_adjust_num_threads(&screen->compile_queue, max_threads);
+   util_queue_adjust_num_threads(&screen->compile_queue, max_threads,
+                                 false);
 }
 
 static bool
diff -Npur mesa-23.1.3/src/gallium/drivers/iris/iris_program.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/iris/iris_program.c
--- mesa-23.1.3/src/gallium/drivers/iris/iris_program.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/iris/iris_program.c	2023-07-18 23:48:05.000000000 +0200
@@ -2977,7 +2977,8 @@ iris_set_max_shader_compiler_threads(str
                                      unsigned max_threads)
 {
    struct iris_screen *screen = (struct iris_screen *) pscreen;
-   util_queue_adjust_num_threads(&screen->shader_compiler_queue, max_threads);
+   util_queue_adjust_num_threads(&screen->shader_compiler_queue, max_threads,
+                                 false);
 }
 
 static bool
diff -Npur mesa-23.1.3/src/gallium/drivers/iris/iris_state.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/iris/iris_state.c
--- mesa-23.1.3/src/gallium/drivers/iris/iris_state.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/iris/iris_state.c	2023-07-18 23:48:05.000000000 +0200
@@ -1082,6 +1082,21 @@ iris_init_common_context(struct iris_bat
 #else
 #define IRIS_BT_OFFSET_SHIFT 0
 #endif
+
+#if GFX_VERx10 == 125
+   /* Even though L3 partial write merging is supposed to be enabled
+    * by default on Gfx12.5 according to the hardware spec, i915
+    * appears to accidentally clear the enables during context
+    * initialization, so make sure to enable them here since partial
+    * write merging has a large impact on rendering performance.
+    */
+   iris_emit_reg(batch, GENX(L3SQCREG5), reg) {
+      reg.L3CachePartialWriteMergeTimerInitialValue = 0x7f;
+      reg.CompressiblePartialWriteMergeEnable = true;
+      reg.CoherentPartialWriteMergeEnable = true;
+      reg.CrossTilePartialWriteMergeEnable = true;
+   }
+#endif
 }
 
 static void
@@ -1188,6 +1203,35 @@ iris_init_render_context(struct iris_bat
    }
 #endif
 
+#if GFX_VER == 12
+   iris_emit_reg(batch, GENX(FF_MODE2), reg) {
+      /* On Alchemist, the FF_MODE2 docs for the GS timer say:
+       *
+       *    "The timer value must be set to 224."
+       *
+       * and Wa_16011163337 indicates this is the case for all Gfx12 parts,
+       * and that this is necessary to avoid hanging the HS/DS units.  It
+       * also clarifies that 224 is literally 0xE0 in the bits, not 7*32=224.
+       *
+       * The HS timer docs also have the same quote for Alchemist.  I am
+       * unaware of a reason it needs to be set to 224 on Tigerlake, but
+       * we do so for consistency if nothing else.
+       *
+       * For the TDS timer value, the docs say:
+       *
+       *    "For best performance, a value of 4 should be programmed."
+       *
+       * i915 also sets it this way on Tigerlake due to workarounds.
+       *
+       * The default VS timer appears to be 0, so we leave it at that.
+       */
+      reg.GSTimerValue  = 224;
+      reg.HSTimerValue  = 224;
+      reg.TDSTimerValue = 4;
+      reg.VSTimerValue  = 0;
+   }
+#endif
+
 #if GFX_VERx10 == 120
    /* Wa_1508744258
     *
diff -Npur mesa-23.1.3/src/gallium/drivers/llvmpipe/lp_screen.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/llvmpipe/lp_screen.c
--- mesa-23.1.3/src/gallium/drivers/llvmpipe/lp_screen.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/llvmpipe/lp_screen.c	2023-07-18 23:48:05.000000000 +0200
@@ -232,7 +232,7 @@ llvmpipe_get_param(struct pipe_screen *s
       return 1;
    /* Adressing that many 64bpp texels fits in an i32 so this is a reasonable value */
    case PIPE_CAP_MAX_TEXEL_BUFFER_ELEMENTS_UINT:
-      return 134217728;
+      return LP_MAX_TEXEL_BUFFER_ELEMENTS;
    case PIPE_CAP_TEXTURE_BUFFER_OFFSET_ALIGNMENT:
       return 16;
    case PIPE_CAP_TEXTURE_TRANSFER_MODES:
diff -Npur mesa-23.1.3/src/gallium/drivers/llvmpipe/lp_state_fs_analysis.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/llvmpipe/lp_state_fs_analysis.c
--- mesa-23.1.3/src/gallium/drivers/llvmpipe/lp_state_fs_analysis.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/llvmpipe/lp_state_fs_analysis.c	2023-07-18 23:48:05.000000000 +0200
@@ -369,8 +369,15 @@ llvmpipe_nir_fn_is_linear_compat(const s
    nir_foreach_block(block, impl) {
       nir_foreach_instr_safe(instr, block) {
          switch (instr->type) {
-         case nir_instr_type_deref:
+         case nir_instr_type_deref: {
+            nir_deref_instr *deref = nir_instr_as_deref(instr);
+            if (deref->deref_type != nir_deref_type_var)
+               return false;
+            if (deref->var->data.mode == nir_var_shader_out &&
+                deref->var->data.location_frac != 0)
+               return false;
             break;
+         }
          case nir_instr_type_load_const: {
             nir_load_const_instr *load = nir_instr_as_load_const(instr);
             if (!check_load_const_in_zero_one(load)) {
diff -Npur mesa-23.1.3/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme
--- mesa-23.1.3/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme	2023-07-18 23:48:05.000000000 +0200
@@ -581,6 +581,47 @@ crs_loop:
    exit maddr 0x1452 /* CONSERVATIVE_RASTER */
    send 0x1
 
+/* NVC0_3D_MACRO_SET_PRIV_REG
+ *
+ * Requests the GR Falcon to set a MMIO register.
+ *
+ * arg      = register
+ * param[0] = value
+ * param[1] = mask
+ */
+.section #mme9097_set_priv_reg
+   maddr 0x1044 /* WAIT_FOR_IDLE */
+   send 0x0
+   parm $r2 /* value */
+   parm $r3 /* mask */
+   maddr 0x1d00 /* SCRATCH[0] */
+   send 0x0
+   send $r2
+   send $r3
+   read $r2 0xd1a /* SCRATCH[26] */
+   maddr 0x18c4 /* FIRMWARE[4] */
+   send $r1
+   mov $r1 (extrinsrt 0x0 $r2 0 8 0)
+   mov $r1 (add $r1 -2)
+   /* Set it to 0 increment for later sends */
+   maddr 0x0040 /* NO_OPERATION */
+   branz annul $r1 #spr_unk_else
+spr_wait_loop:
+   read $r1 0xd00 /* SCRATCH(0) */
+   send 0x0
+   mov $r1 (add $r1 -1)
+   branz annul $r1 #spr_wait_loop
+   bra annul #spr_exit
+spr_unk_else:
+   mov $r1 10
+spr_unk_else_loop:
+   send 0x0
+   mov $r1 (add $r1 -1)
+   branz annul $r1 #spr_unk_else_loop
+spr_exit:
+   exit mov $r1 $r1
+   mov $r1 $r1
+
 /* NVC0_3D_MACRO_COMPUTE_COUNTER
  *
  * This macro takes 6 values, num_groups_* and group_size_*, and adds their
diff -Npur mesa-23.1.3/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme.h
--- mesa-23.1.3/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/nouveau/nvc0/mme/com9097.mme.h	2023-07-18 23:48:05.000000000 +0200
@@ -395,6 +395,39 @@ const uint32_t mme9097_conservative_rast
 	0x00004041,
 };
 
+const uint32_t mme9097_set_priv_reg[] = {
+	0x04110021,
+	0x00000041,
+	0x00000201,
+/* 0x000f: spr_wait_loop */
+	0x00000301,
+	0x07400021,
+/* 0x0014: spr_unk_else */
+/* 0x0015: spr_unk_else_loop */
+	0x00000041,
+/* 0x0018: spr_exit */
+	0x00001041,
+	0x00001841,
+	0x03468215,
+	0x06310021,
+	0x00000841,
+	0x02008112,
+	0xffff8911,
+	0x00100021,
+	0x00018837,
+	0x03400115,
+	0x00000041,
+	0xffffc911,
+	0xffff4837,
+	0x00014027,
+	0x00028111,
+	0x00000041,
+	0xffffc911,
+	0xffff88b7,
+	0x00000991,
+	0x00000911,
+};
+
 const uint32_t mme9097_compute_counter[] = {
 /* 0x0003: iic_loop_start */
 	0x00000f11,
diff -Npur mesa-23.1.3/src/gallium/drivers/nouveau/nvc0/nvc0_screen.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/nouveau/nvc0/nvc0_screen.c
--- mesa-23.1.3/src/gallium/drivers/nouveau/nvc0/nvc0_screen.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/nouveau/nvc0/nvc0_screen.c	2023-07-18 23:48:05.000000000 +0200
@@ -1364,6 +1364,7 @@ nvc0_screen_create(struct nouveau_device
       MK_MACRO(NVC0_3D_MACRO_DRAW_ELEMENTS_INDIRECT_COUNT, mme9097_draw_elts_indirect_count);
       MK_MACRO(NVC0_3D_MACRO_QUERY_BUFFER_WRITE, mme9097_query_buffer_write);
       MK_MACRO(NVC0_3D_MACRO_CONSERVATIVE_RASTER_STATE, mme9097_conservative_raster_state);
+      MK_MACRO(NVC0_3D_MACRO_SET_PRIV_REG, mme9097_set_priv_reg);
       MK_MACRO(NVC0_3D_MACRO_COMPUTE_COUNTER, mme9097_compute_counter);
       MK_MACRO(NVC0_3D_MACRO_COMPUTE_COUNTER_TO_QUERY, mme9097_compute_counter_to_query);
       MK_MACRO(NVC0_CP_MACRO_LAUNCH_GRID_INDIRECT, mme90c0_launch_grid_indirect);
@@ -1462,9 +1463,11 @@ nvc0_screen_create(struct nouveau_device
    BEGIN_NVC0(push, NVC0_3D(LINKED_TSC), 1);
    PUSH_DATA (push, 0);
 
-   if (screen->eng3d->oclass >= TU102_3D_CLASS) {
+   /* requires Nvidia provided firmware */
+   if (screen->eng3d->oclass >= GM200_3D_CLASS) {
+      unsigned reg = screen->eng3d->oclass >= GV100_3D_CLASS ? 0x419ba4 : 0x419f78;
       BEGIN_1IC0(push, NVC0_3D(MACRO_SET_PRIV_REG), 3);
-      PUSH_DATA (push, 0x419ba4);
+      PUSH_DATA (push, reg);
       PUSH_DATA (push, 0x00000000);
       PUSH_DATA (push, 0x00000008);
    }
diff -Npur mesa-23.1.3/src/gallium/drivers/panfrost/pan_blit.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_blit.c
--- mesa-23.1.3/src/gallium/drivers/panfrost/pan_blit.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_blit.c	2023-07-18 23:48:05.000000000 +0200
@@ -32,7 +32,8 @@
 #include "pan_util.h"
 
 void
-panfrost_blitter_save(struct panfrost_context *ctx, bool render_cond)
+panfrost_blitter_save(struct panfrost_context *ctx,
+                      const enum panfrost_blitter_op blitter_op)
 {
    struct blitter_context *blitter = ctx->blitter;
 
@@ -42,26 +43,36 @@ panfrost_blitter_save(struct panfrost_co
                                    ctx->uncompiled[PIPE_SHADER_VERTEX]);
    util_blitter_save_rasterizer(blitter, ctx->rasterizer);
    util_blitter_save_viewport(blitter, &ctx->pipe_viewport);
-   util_blitter_save_scissor(blitter, &ctx->scissor);
-   util_blitter_save_fragment_shader(blitter,
-                                     ctx->uncompiled[PIPE_SHADER_FRAGMENT]);
-   util_blitter_save_blend(blitter, ctx->blend);
-   util_blitter_save_depth_stencil_alpha(blitter, ctx->depth_stencil);
-   util_blitter_save_stencil_ref(blitter, &ctx->stencil_ref);
    util_blitter_save_so_targets(blitter, 0, NULL);
-   util_blitter_save_sample_mask(blitter, ctx->sample_mask, ctx->min_samples);
 
-   util_blitter_save_framebuffer(blitter, &ctx->pipe_framebuffer);
-   util_blitter_save_fragment_sampler_states(
-      blitter, ctx->sampler_count[PIPE_SHADER_FRAGMENT],
-      (void **)(&ctx->samplers[PIPE_SHADER_FRAGMENT]));
-   util_blitter_save_fragment_sampler_views(
-      blitter, ctx->sampler_view_count[PIPE_SHADER_FRAGMENT],
-      (struct pipe_sampler_view **)&ctx->sampler_views[PIPE_SHADER_FRAGMENT]);
-   util_blitter_save_fragment_constant_buffer_slot(
-      blitter, ctx->constant_buffer[PIPE_SHADER_FRAGMENT].cb);
+   if (blitter_op & PAN_SAVE_FRAGMENT_STATE) {
+      if (blitter_op & PAN_SAVE_FRAGMENT_CONSTANT)
+         util_blitter_save_fragment_constant_buffer_slot(
+            blitter, ctx->constant_buffer[PIPE_SHADER_FRAGMENT].cb);
+
+      util_blitter_save_blend(blitter, ctx->blend);
+      util_blitter_save_depth_stencil_alpha(blitter, ctx->depth_stencil);
+      util_blitter_save_stencil_ref(blitter, &ctx->stencil_ref);
+      util_blitter_save_fragment_shader(blitter,
+                                        ctx->uncompiled[PIPE_SHADER_FRAGMENT]);
+      util_blitter_save_sample_mask(blitter, ctx->sample_mask,
+                                    ctx->min_samples);
+      util_blitter_save_scissor(blitter, &ctx->scissor);
+   }
+
+   if (blitter_op & PAN_SAVE_FRAMEBUFFER)
+      util_blitter_save_framebuffer(blitter, &ctx->pipe_framebuffer);
+
+   if (blitter_op & PAN_SAVE_TEXTURES) {
+      util_blitter_save_fragment_sampler_states(
+         blitter, ctx->sampler_count[PIPE_SHADER_FRAGMENT],
+         (void **)(&ctx->samplers[PIPE_SHADER_FRAGMENT]));
+      util_blitter_save_fragment_sampler_views(
+         blitter, ctx->sampler_view_count[PIPE_SHADER_FRAGMENT],
+         (struct pipe_sampler_view **)&ctx->sampler_views[PIPE_SHADER_FRAGMENT]);
+   }
 
-   if (!render_cond) {
+   if (!(blitter_op & PAN_DISABLE_RENDER_COND)) {
       util_blitter_save_render_condition(blitter,
                                          (struct pipe_query *)ctx->cond_query,
                                          ctx->cond_cond, ctx->cond_mode);
@@ -79,6 +90,8 @@ panfrost_blit(struct pipe_context *pipe,
    if (!util_blitter_is_blit_supported(ctx->blitter, info))
       unreachable("Unsupported blit\n");
 
-   panfrost_blitter_save(ctx, info->render_condition_enable);
+   panfrost_blitter_save(ctx, info->render_condition_enable
+                                 ? PAN_RENDER_BLIT_COND
+                                 : PAN_RENDER_BLIT);
    util_blitter_blit(ctx->blitter, info);
 }
diff -Npur mesa-23.1.3/src/gallium/drivers/panfrost/pan_cmdstream.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_cmdstream.c
--- mesa-23.1.3/src/gallium/drivers/panfrost/pan_cmdstream.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_cmdstream.c	2023-07-18 23:48:05.000000000 +0200
@@ -3464,6 +3464,10 @@ panfrost_launch_xfb(struct panfrost_batc
    batch->rsd[PIPE_SHADER_VERTEX] =
       panfrost_emit_compute_shader_meta(batch, PIPE_SHADER_VERTEX);
 
+   batch->uniform_buffers[PIPE_SHADER_VERTEX] =
+      panfrost_emit_const_buf(batch, PIPE_SHADER_VERTEX, NULL,
+                              &batch->push_uniforms[PIPE_SHADER_VERTEX], NULL);
+
 #if PAN_ARCH >= 9
    pan_section_pack(t.cpu, COMPUTE_JOB, PAYLOAD, cfg) {
       cfg.workgroup_size_x = 1;
@@ -3494,10 +3498,6 @@ panfrost_launch_xfb(struct panfrost_batc
                                      info->instance_count, 1, 1, 1,
                                      PAN_ARCH <= 5, false);
 
-   batch->uniform_buffers[PIPE_SHADER_VERTEX] =
-      panfrost_emit_const_buf(batch, PIPE_SHADER_VERTEX, NULL,
-                              &batch->push_uniforms[PIPE_SHADER_VERTEX], NULL);
-
    panfrost_draw_emit_vertex(batch, info, &invocation, 0, 0, attribs,
                              attrib_bufs, t.cpu);
 #endif
diff -Npur mesa-23.1.3/src/gallium/drivers/panfrost/pan_context.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_context.c
--- mesa-23.1.3/src/gallium/drivers/panfrost/pan_context.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_context.c	2023-07-18 23:48:05.000000000 +0200
@@ -76,7 +76,7 @@ panfrost_clear(struct pipe_context *pipe
    }
 
    /* Once there is content, clear with a fullscreen quad */
-   panfrost_blitter_save(ctx, false /* render condition */);
+   panfrost_blitter_save(ctx, PAN_RENDER_CLEAR);
 
    perf_debug_ctx(ctx, "Clearing with quad");
    util_blitter_clear(
diff -Npur mesa-23.1.3/src/gallium/drivers/panfrost/pan_resource.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_resource.c
--- mesa-23.1.3/src/gallium/drivers/panfrost/pan_resource.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_resource.c	2023-07-18 23:48:05.000000000 +0200
@@ -63,7 +63,8 @@ panfrost_clear_depth_stencil(struct pipe
    if (render_condition_enabled && !panfrost_render_condition_check(ctx))
       return;
 
-   panfrost_blitter_save(ctx, render_condition_enabled);
+   panfrost_blitter_save(
+      ctx, render_condition_enabled ? PAN_RENDER_COND : PAN_RENDER_BASE);
    util_blitter_clear_depth_stencil(ctx->blitter, dst, clear_flags, depth,
                                     stencil, dstx, dsty, width, height);
 }
@@ -80,7 +81,8 @@ panfrost_clear_render_target(struct pipe
    if (render_condition_enabled && !panfrost_render_condition_check(ctx))
       return;
 
-   panfrost_blitter_save(ctx, render_condition_enabled);
+   panfrost_blitter_save(
+      ctx, render_condition_enabled ? PAN_RENDER_COND : PAN_RENDER_BASE);
    util_blitter_clear_render_target(ctx->blitter, dst, color, dstx, dsty, width,
                                     height);
 }
diff -Npur mesa-23.1.3/src/gallium/drivers/panfrost/pan_resource.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_resource.h
--- mesa-23.1.3/src/gallium/drivers/panfrost/pan_resource.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/panfrost/pan_resource.h	2023-07-18 23:48:05.000000000 +0200
@@ -112,7 +112,28 @@ void panfrost_resource_context_init(stru
 
 /* Blitting */
 
-void panfrost_blitter_save(struct panfrost_context *ctx, bool render_cond);
+enum panfrost_blitter_op /* bitmask */
+{
+   PAN_SAVE_TEXTURES = 1,
+   PAN_SAVE_FRAMEBUFFER = 2,
+   PAN_SAVE_FRAGMENT_STATE = 4,
+   PAN_SAVE_FRAGMENT_CONSTANT = 8,
+   PAN_DISABLE_RENDER_COND = 16,
+};
+
+enum {
+   PAN_RENDER_BLIT =
+      PAN_SAVE_TEXTURES | PAN_SAVE_FRAMEBUFFER | PAN_SAVE_FRAGMENT_STATE,
+   PAN_RENDER_BLIT_COND = PAN_SAVE_TEXTURES | PAN_SAVE_FRAMEBUFFER |
+                          PAN_SAVE_FRAGMENT_STATE | PAN_DISABLE_RENDER_COND,
+   PAN_RENDER_BASE = PAN_SAVE_FRAMEBUFFER | PAN_SAVE_FRAGMENT_STATE,
+   PAN_RENDER_COND =
+      PAN_SAVE_FRAMEBUFFER | PAN_SAVE_FRAGMENT_STATE | PAN_DISABLE_RENDER_COND,
+   PAN_RENDER_CLEAR = PAN_SAVE_FRAGMENT_STATE | PAN_SAVE_FRAGMENT_CONSTANT,
+};
+
+void panfrost_blitter_save(struct panfrost_context *ctx,
+                           const enum panfrost_blitter_op blitter_op);
 
 void panfrost_blit(struct pipe_context *pipe,
                    const struct pipe_blit_info *info);
diff -Npur mesa-23.1.3/src/gallium/drivers/r600/r600_state.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/r600/r600_state.c
--- mesa-23.1.3/src/gallium/drivers/r600/r600_state.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/r600/r600_state.c	2023-07-18 23:48:05.000000000 +0200
@@ -1841,6 +1841,20 @@ static void r600_emit_sampler_states(str
 		enum pipe_texture_target target = PIPE_BUFFER;
 		if (rview)
 			target = rview->base.texture->target;
+
+                /* If seamless cube map is set, set the CAMP_(X|Y|Z) to
+                 * SQ_TEX_WRAP which seems to trigger properly ignoring the
+                 * texture wrap mode */
+                if (target == PIPE_TEXTURE_CUBE ||
+		    target == PIPE_TEXTURE_CUBE_ARRAY) {
+                   if (rstate->seamless_cube_map){
+                      uint32_t mask = ~(S_03C000_CLAMP_X(7) |
+                                        S_03C000_CLAMP_Y(7) |
+                                        S_03C000_CLAMP_Z(7));
+                      rstate->tex_sampler_words[0] &= mask;
+                   }
+                }
+
 		if (target == PIPE_TEXTURE_1D_ARRAY ||
 		    target == PIPE_TEXTURE_2D_ARRAY) {
 			rstate->tex_sampler_words[0] |= S_03C000_TEX_ARRAY_OVERRIDE(1);
diff -Npur mesa-23.1.3/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp
--- mesa-23.1.3/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp	2023-07-18 23:48:05.000000000 +0200
@@ -733,6 +733,36 @@ public:
    bool progress;
 };
 
+class HasVecDestVisitor : public ConstInstrVisitor {
+public:
+   HasVecDestVisitor():
+       has_group_dest(false)
+   {
+   }
+
+   void visit(const AluInstr& instr) override { (void)instr; }
+   void visit(const AluGroup& instr) override { (void)instr; }
+   void visit(const TexInstr& instr) override  {  (void)instr; has_group_dest = true; };
+   void visit(const ExportInstr& instr) override { (void)instr; }
+   void visit(const FetchInstr& instr) override  {  (void)instr; has_group_dest = true; };
+   void visit(const Block& instr) override { (void)instr; };
+   void visit(const ControlFlowInstr& instr) override{ (void)instr; }
+   void visit(const IfInstr& instr) override{ (void)instr; }
+   void visit(const ScratchIOInstr& instr) override  { (void)instr; };
+   void visit(const StreamOutInstr& instr) override { (void)instr; }
+   void visit(const MemRingOutInstr& instr) override { (void)instr; }
+   void visit(const EmitVertexInstr& instr) override { (void)instr; }
+   void visit(const GDSInstr& instr) override { (void)instr; }
+   void visit(const WriteTFInstr& instr) override { (void)instr; };
+   void visit(const LDSAtomicInstr& instr) override { (void)instr; };
+   void visit(const LDSReadInstr& instr) override { (void)instr; };
+   void visit(const RatInstr& instr) override {  (void)instr; };
+
+   bool has_group_dest;
+};
+
+
+
 bool
 simplify_source_vectors(Shader& sh)
 {
@@ -758,6 +788,16 @@ SimplifySourceVecVisitor::visit(TexInstr
       if (nvals == 1) {
          for (int i = 0; i < 4; ++i)
             if (src[i]->chan() < 4) {
+               HasVecDestVisitor check_dests;
+               for (auto p : src[i]->parents()) {
+                  p->accept(check_dests);
+                  if (check_dests.has_group_dest)
+                     break;
+               }
+
+               if (check_dests.has_group_dest)
+                  break;
+
                if (src[i]->pin() == pin_group)
                   src[i]->set_pin(pin_free);
                else if (src[i]->pin() == pin_chgr)
diff -Npur mesa-23.1.3/src/gallium/drivers/radeonsi/si_blit.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_blit.c
--- mesa-23.1.3/src/gallium/drivers/radeonsi/si_blit.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_blit.c	2023-07-18 23:48:05.000000000 +0200
@@ -54,7 +54,10 @@ void si_blitter_begin(struct si_context
    if (op & SI_SAVE_FRAGMENT_STATE) {
       struct pipe_constant_buffer fs_cb = {};
       si_get_pipe_constant_buffer(sctx, PIPE_SHADER_FRAGMENT, 0, &fs_cb);
-      util_blitter_save_fragment_constant_buffer_slot(sctx->blitter, &fs_cb);
+
+      if (op & SI_SAVE_FRAGMENT_CONSTANT)
+         util_blitter_save_fragment_constant_buffer_slot(sctx->blitter, &fs_cb);
+
       pipe_resource_reference(&fs_cb.buffer, NULL);
       util_blitter_save_blend(sctx->blitter, sctx->queued.named.blend);
       util_blitter_save_depth_stencil_alpha(sctx->blitter, sctx->queued.named.dsa);
diff -Npur mesa-23.1.3/src/gallium/drivers/radeonsi/si_clear.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_clear.c
--- mesa-23.1.3/src/gallium/drivers/radeonsi/si_clear.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_clear.c	2023-07-18 23:48:05.000000000 +0200
@@ -28,9 +28,8 @@
 #include "util/u_pack_color.h"
 #include "util/u_surface.h"
 
-enum
-{
-   SI_CLEAR = SI_SAVE_FRAGMENT_STATE,
+enum {
+   SI_CLEAR = SI_SAVE_FRAGMENT_STATE | SI_SAVE_FRAGMENT_CONSTANT,
    SI_CLEAR_SURFACE = SI_SAVE_FRAMEBUFFER | SI_SAVE_FRAGMENT_STATE,
 };
 
diff -Npur mesa-23.1.3/src/gallium/drivers/radeonsi/si_pipe.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_pipe.c
--- mesa-23.1.3/src/gallium/drivers/radeonsi/si_pipe.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_pipe.c	2023-07-18 23:48:05.000000000 +0200
@@ -1105,7 +1105,7 @@ static void si_set_max_shader_compiler_t
 
    /* This function doesn't allow a greater number of threads than
     * the queue had at its creation. */
-   util_queue_adjust_num_threads(&sscreen->shader_compiler_queue, max_threads);
+   util_queue_adjust_num_threads(&sscreen->shader_compiler_queue, max_threads, false);
    /* Don't change the number of threads on the low priority queue. */
 }
 
diff -Npur mesa-23.1.3/src/gallium/drivers/radeonsi/si_pipe.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_pipe.h
--- mesa-23.1.3/src/gallium/drivers/radeonsi/si_pipe.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/radeonsi/si_pipe.h	2023-07-18 23:48:05.000000000 +0200
@@ -1328,7 +1328,8 @@ enum si_blitter_op /* bitmask */
    SI_SAVE_TEXTURES = 1,
    SI_SAVE_FRAMEBUFFER = 2,
    SI_SAVE_FRAGMENT_STATE = 4,
-   SI_DISABLE_RENDER_COND = 8,
+   SI_SAVE_FRAGMENT_CONSTANT = 8,
+   SI_DISABLE_RENDER_COND = 16,
 };
 
 void si_blitter_begin(struct si_context *sctx, enum si_blitter_op op);
diff -Npur mesa-23.1.3/src/gallium/drivers/virgl/virgl_video.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/virgl/virgl_video.c
--- mesa-23.1.3/src/gallium/drivers/virgl/virgl_video.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/virgl/virgl_video.c	2023-07-18 23:48:05.000000000 +0200
@@ -551,7 +551,7 @@ static int fill_mpeg4_picture_desc(const
     ITEM_SET(vmpeg4, mpeg4, top_field_first);
     ITEM_CPY(vmpeg4, mpeg4, intra_matrix);
     ITEM_CPY(vmpeg4, mpeg4, non_intra_matrix);
-    for (i = 0; i < 16; i++) {
+    for (i = 0; i < ARRAY_SIZE(mpeg4->ref); i++) {
         vbuf = virgl_video_buffer(mpeg4->ref[i]);
         vmpeg4->ref[i] = vbuf ? vbuf->handle : 0;
     }
diff -Npur mesa-23.1.3/src/gallium/drivers/zink/zink_batch.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_batch.c
--- mesa-23.1.3/src/gallium/drivers/zink/zink_batch.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_batch.c	2023-07-18 23:48:05.000000000 +0200
@@ -160,6 +160,9 @@ zink_reset_batch_state(struct zink_conte
    bs->unordered_write_access = 0;
    bs->unordered_write_stages = 0;
 
+   /* only increment batch generation if previously in-use to avoid false detection of batch completion */
+   if (bs->fence.submitted)
+      bs->submit_count++;
    /* only reset submitted here so that tc fence desync can pick up the 'completed' flag
     * before the state is reused
     */
@@ -167,7 +170,6 @@ zink_reset_batch_state(struct zink_conte
    bs->has_barriers = false;
    if (bs->fence.batch_id)
       zink_screen_update_last_finished(screen, bs->fence.batch_id);
-   bs->submit_count++;
    bs->fence.batch_id = 0;
    bs->usage.usage = 0;
    bs->next = NULL;
diff -Npur mesa-23.1.3/src/gallium/drivers/zink/zink_context.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_context.c
--- mesa-23.1.3/src/gallium/drivers/zink/zink_context.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_context.c	2023-07-18 23:48:05.000000000 +0200
@@ -1454,7 +1454,7 @@ invalidate_inlined_uniforms(struct zink_
       ctx->compute_dirty = true;
       return;
    }
-   assert(!zink_screen(ctx->base.screen)->optimal_keys);
+   assert(!zink_screen(ctx->base.screen)->optimal_keys || (pstage == MESA_SHADER_GEOMETRY && ctx->is_generated_gs_bound));
    ctx->dirty_gfx_stages |= bit;
    struct zink_shader_key *key = &ctx->gfx_pipeline_state.shader_keys.key[pstage];
    key->inline_uniforms = false;
diff -Npur mesa-23.1.3/src/gallium/drivers/zink/zink_kopper.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_kopper.c
--- mesa-23.1.3/src/gallium/drivers/zink/zink_kopper.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_kopper.c	2023-07-18 23:48:05.000000000 +0200
@@ -313,7 +313,6 @@ kopper_CreateSwapchain(struct zink_scree
       VkResult result = VKSCR(QueueWaitIdle)(screen->queue);
       if (result != VK_SUCCESS)
          mesa_loge("ZINK: vkQueueWaitIdle failed (%s)", vk_Result_to_str(result));
-      zink_kopper_deinit_displaytarget(screen, cdt);
       error = VKSCR(CreateSwapchainKHR)(screen->dev, &cswap->scci, NULL,
                                    &cswap->swapchain);
    }
diff -Npur mesa-23.1.3/src/gallium/drivers/zink/zink_program.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_program.c
--- mesa-23.1.3/src/gallium/drivers/zink/zink_program.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_program.c	2023-07-18 23:48:05.000000000 +0200
@@ -437,7 +437,6 @@ generate_gfx_program_modules(struct zink
       variant_hash ^= prog->module_hash[i];
    }
 
-   p_atomic_dec(&prog->base.reference.count);
    state->modules_changed = true;
 
    prog->last_variant_hash = variant_hash;
@@ -459,7 +458,6 @@ generate_gfx_program_modules_optimal(str
       prog->modules[i] = zm->shader;
    }
 
-   p_atomic_dec(&prog->base.reference.count);
    state->modules_changed = true;
    prog->last_variant_hash = state->shader_keys_optimal.key.val;
 }
@@ -712,7 +710,6 @@ zink_gfx_program_update_optimal(struct z
                real->base.removed = false;
                prog->full_prog = NULL;
                prog->base.removed = true;
-               zink_gfx_program_reference(zink_screen(ctx->base.screen), &prog, NULL);
                prog = real;
             }
          }
@@ -751,7 +748,6 @@ zink_gfx_program_update_optimal(struct z
             real->base.removed = false;
             prog->full_prog = NULL;
             prog->base.removed = true;
-            zink_gfx_program_reference(zink_screen(ctx->base.screen), &prog, NULL);
             ctx->curr_program = real;
             simple_mtx_unlock(&ctx->program_lock[zink_program_cache_stages(ctx->shader_stages)]);
          }
@@ -1095,6 +1091,7 @@ zink_create_gfx_program(struct zink_cont
       }
    }
    _mesa_sha1_final(&sctx, prog->base.sha1);
+   p_atomic_dec(&prog->base.reference.count);
 
    if (!zink_descriptor_program_init(ctx, &prog->base))
       goto fail;
@@ -1115,6 +1112,8 @@ create_linked_separable_job(void *data,
 {
    struct zink_gfx_program *prog = data;
    prog->full_prog = zink_create_gfx_program(prog->ctx, prog->shaders, 0, prog->gfx_hash);
+   /* add an ownership ref */
+   zink_gfx_program_reference(zink_screen(prog->ctx->base.screen), NULL, prog->full_prog);
    precompile_job(prog->full_prog, gdata, thread_index);
 }
 
@@ -1162,7 +1161,7 @@ create_gfx_program_separable(struct zink
    /* We can do this add after the _mesa_set_adds above because we know the prog->shaders[] are 
    * referenced by the draw state and zink_shader_free() can't be called on them while we're in here.
    */
-   p_atomic_add(&prog->base.reference.count, refs);
+   p_atomic_add(&prog->base.reference.count, refs - 1);
 
    for (int r = 0; r < ARRAY_SIZE(prog->pipelines); ++r) {
       for (int i = 0; i < ARRAY_SIZE(prog->pipelines[0]); ++i) {
@@ -1580,7 +1579,7 @@ bind_gfx_stage(struct zink_context *ctx,
    if (ctx->gfx_stages[stage])
       ctx->gfx_hash ^= ctx->gfx_stages[stage]->hash;
 
-   if (!shader && stage == MESA_SHADER_GEOMETRY) {
+   if (stage == MESA_SHADER_GEOMETRY && ctx->is_generated_gs_bound && (!shader || !shader->non_fs.parent)) {
       ctx->inlinable_uniforms_valid_mask &= ~BITFIELD64_BIT(MESA_SHADER_GEOMETRY);
       ctx->is_generated_gs_bound = false;
    }
diff -Npur mesa-23.1.3/src/gallium/drivers/zink/zink_resource.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_resource.c
--- mesa-23.1.3/src/gallium/drivers/zink/zink_resource.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_resource.c	2023-07-18 23:48:05.000000000 +0200
@@ -1724,10 +1724,13 @@ invalidate_buffer(struct zink_context *c
       debug_printf("new backing resource alloc failed!\n");
       return false;
    }
+   bool needs_bda = !!res->obj->bda;
    /* this ref must be transferred before rebind or else BOOM */
    zink_batch_reference_resource_move(&ctx->batch, res);
    res->obj = new_obj;
    res->queue = VK_QUEUE_FAMILY_IGNORED;
+   if (needs_bda)
+      zink_resource_get_address(screen, res);
    zink_resource_rebind(ctx, res);
    return true;
 }
diff -Npur mesa-23.1.3/src/gallium/drivers/zink/zink_screen.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_screen.c
--- mesa-23.1.3/src/gallium/drivers/zink/zink_screen.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/drivers/zink/zink_screen.c	2023-07-18 23:48:05.000000000 +0200
@@ -190,7 +190,7 @@ static void
 zink_set_max_shader_compiler_threads(struct pipe_screen *pscreen, unsigned max_threads)
 {
    struct zink_screen *screen = zink_screen(pscreen);
-   util_queue_adjust_num_threads(&screen->cache_get_thread, max_threads);
+   util_queue_adjust_num_threads(&screen->cache_get_thread, max_threads, false);
 }
 
 static bool
diff -Npur mesa-23.1.3/src/gallium/frontends/lavapipe/lvp_execute.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/lavapipe/lvp_execute.c
--- mesa-23.1.3/src/gallium/frontends/lavapipe/lvp_execute.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/lavapipe/lvp_execute.c	2023-07-18 23:48:05.000000000 +0200
@@ -1214,6 +1214,8 @@ static void fill_sampler_stage(struct re
    ss_idx += array_idx;
    ss_idx += dyn_info->stage[stage].sampler_count;
    struct pipe_sampler_state *ss = binding->immutable_samplers ? binding->immutable_samplers[array_idx] : descriptor->sampler;
+   if (!ss)
+      return;
    state->ss[p_stage][ss_idx] = *ss;
    if (state->num_sampler_states[p_stage] <= ss_idx)
       state->num_sampler_states[p_stage] = ss_idx + 1;
diff -Npur mesa-23.1.3/src/gallium/frontends/va/context.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/va/context.c
--- mesa-23.1.3/src/gallium/frontends/va/context.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/va/context.c	2023-07-18 23:48:05.000000000 +0200
@@ -411,6 +411,7 @@ vlVaDestroyContext(VADriverContextP ctx,
       vl_deint_filter_cleanup(context->deint);
       FREE(context->deint);
    }
+   FREE(context->desc.base.decrypt_key);
    FREE(context);
    handle_table_remove(drv->htab, context_id);
    mtx_unlock(&drv->mutex);
diff -Npur mesa-23.1.3/src/gallium/frontends/va/picture.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/va/picture.c
--- mesa-23.1.3/src/gallium/frontends/va/picture.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/va/picture.c	2023-07-18 23:48:05.000000000 +0200
@@ -323,10 +323,15 @@ static void
 handleVAProtectedSliceDataBufferType(vlVaContext *context, vlVaBuffer *buf)
 {
 	uint8_t* encrypted_data = (uint8_t*) buf->data;
+        uint8_t* drm_key;
 
 	unsigned int drm_key_size = buf->size;
 
-	context->desc.base.decrypt_key = CALLOC(1, drm_key_size);
+        drm_key = REALLOC(context->desc.base.decrypt_key,
+                          context->desc.base.key_size, drm_key_size);
+        if (!drm_key)
+            return;
+        context->desc.base.decrypt_key = drm_key;
 	memcpy(context->desc.base.decrypt_key, encrypted_data, drm_key_size);
 	context->desc.base.key_size = drm_key_size;
 	context->desc.base.protected_playback = true;
diff -Npur mesa-23.1.3/src/gallium/frontends/wgl/stw_pixelformat.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/wgl/stw_pixelformat.c
--- mesa-23.1.3/src/gallium/frontends/wgl/stw_pixelformat.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/wgl/stw_pixelformat.c	2023-07-18 23:48:05.000000000 +0200
@@ -204,7 +204,8 @@ stw_pixelformat_add(struct stw_device *s
 
    /*
     * since gallium frontend can allocate depth/stencil/accum buffers, we provide
-    * only color buffers here
+    * only color buffers here in the non-zink case, however in the zink case
+    * kopper requires that we allocate depth/stencil through the winsys
     */
    pfi->stvis.buffer_mask = ST_ATTACHMENT_FRONT_LEFT_MASK;
    if (doublebuffer)
@@ -213,6 +214,11 @@ stw_pixelformat_add(struct stw_device *s
    pfi->stvis.color_format = color->format;
    pfi->stvis.depth_stencil_format = depth->format;
 
+#ifdef GALLIUM_ZINK
+   if (stw_dev->zink && (depth->bits.depth > 0 || depth->bits.stencil > 0))
+      pfi->stvis.buffer_mask |= ST_ATTACHMENT_DEPTH_STENCIL_MASK;
+#endif
+
    pfi->stvis.accum_format = (accum) ?
       PIPE_FORMAT_R16G16B16A16_SNORM : PIPE_FORMAT_NONE;
 
diff -Npur mesa-23.1.3/src/gallium/frontends/wgl/stw_st.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/wgl/stw_st.c
--- mesa-23.1.3/src/gallium/frontends/wgl/stw_st.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/frontends/wgl/stw_st.c	2023-07-18 23:48:05.000000000 +0200
@@ -227,6 +227,12 @@ stw_st_framebuffer_validate_locked(struc
       case ST_ATTACHMENT_DEPTH_STENCIL:
          format = stwfb->stvis.depth_stencil_format;
          bind = PIPE_BIND_DEPTH_STENCIL;
+
+#ifdef GALLIUM_ZINK
+         if (stw_dev->zink)
+            bind |= PIPE_BIND_DISPLAY_TARGET;
+#endif
+
          break;
       default:
          format = PIPE_FORMAT_NONE;
diff -Npur mesa-23.1.3/src/gallium/winsys/panfrost/drm/panfrost_drm_winsys.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/winsys/panfrost/drm/panfrost_drm_winsys.c
--- mesa-23.1.3/src/gallium/winsys/panfrost/drm/panfrost_drm_winsys.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/gallium/winsys/panfrost/drm/panfrost_drm_winsys.c	2023-07-18 23:48:05.000000000 +0200
@@ -45,6 +45,7 @@ panfrost_create_kms_dumb_buffer_for_reso
 {
    /* Find the smallest width alignment that gives us a 64byte aligned stride */
    unsigned blk_sz = util_format_get_blocksize(rsc->format);
+   struct renderonly_scanout *scanout = NULL;
 
    assert(blk_sz);
 
@@ -63,26 +64,30 @@ panfrost_create_kms_dumb_buffer_for_reso
    };
    struct drm_mode_destroy_dumb destroy_dumb = {0};
 
-   /* Align width to end up with a buffer that's aligned on 64 bytes. */
-
-   struct renderonly_scanout *scanout = CALLOC_STRUCT(renderonly_scanout);
-   if (!scanout)
-      return NULL;
-
    /* create dumb buffer at scanout GPU */
    int err = drmIoctl(ro->kms_fd, DRM_IOCTL_MODE_CREATE_DUMB, &create_dumb);
    if (err < 0) {
       fprintf(stderr, "DRM_IOCTL_MODE_CREATE_DUMB failed: %s\n",
               strerror(errno));
-      goto free_scanout;
+      return NULL;
    }
 
    if (create_dumb.pitch % 64)
       goto free_dumb;
 
+   simple_mtx_lock(&ro->bo_map_lock);
+   scanout = util_sparse_array_get(&ro->bo_map, create_dumb.handle);
+   simple_mtx_unlock(&ro->bo_map_lock);
+
+   if (!scanout)
+      goto free_dumb;
+
    scanout->handle = create_dumb.handle;
    scanout->stride = create_dumb.pitch;
 
+   assert(p_atomic_read(&scanout->refcnt) == 0);
+   p_atomic_set(&scanout->refcnt, 1);
+
    if (!out_handle)
       return scanout;
 
@@ -101,11 +106,14 @@ panfrost_create_kms_dumb_buffer_for_reso
    return scanout;
 
 free_dumb:
-   destroy_dumb.handle = scanout->handle;
-   drmIoctl(ro->kms_fd, DRM_IOCTL_MODE_DESTROY_DUMB, &destroy_dumb);
+   /* If an error occured, make sure we reset the scanout object before
+    * leaving.
+    */
+   if (scanout)
+      memset(scanout, 0, sizeof(*scanout));
 
-free_scanout:
-   FREE(scanout);
+   destroy_dumb.handle = create_dumb.handle;
+   drmIoctl(ro->kms_fd, DRM_IOCTL_MODE_DESTROY_DUMB, &destroy_dumb);
 
    return NULL;
 }
diff -Npur mesa-23.1.3/src/glx/create_context.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/glx/create_context.c
--- mesa-23.1.3/src/glx/create_context.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/glx/create_context.c	2023-07-18 23:48:05.000000000 +0200
@@ -115,6 +115,11 @@ glXCreateContextAttribsARB(Display *dpy,
 #endif
 
    if (gc == NULL) {
+      /* Increment dpy->request in order to give a unique serial number to the error.
+       * This may break creating contexts on some video cards, if libx11 <1.7.4 is used.
+       * However, this fixes creating contexts (on some video cards) if libx11 >=1.7.4 is used.
+       */
+      XNoOp(dpy);
       /* -1 isn't a legal XID, which is sort of the point, we've failed
        * before we even got to XID allocation.
        */
diff -Npur mesa-23.1.3/src/imagination/vulkan/pvr_cmd_buffer.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/imagination/vulkan/pvr_cmd_buffer.c
--- mesa-23.1.3/src/imagination/vulkan/pvr_cmd_buffer.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/imagination/vulkan/pvr_cmd_buffer.c	2023-07-18 23:48:05.000000000 +0200
@@ -3391,6 +3391,7 @@ static VkResult pvr_cmd_buffer_upload_pa
    struct pvr_device *device = cmd_buffer->device;
    struct pvr_bo *patched_desc_set_bo;
    uint32_t *mem_ptr;
+   uint32_t desc_idx_offset = 0;
    VkResult result;
 
    assert(desc_set->layout->dynamic_buffer_count > 0);
@@ -3465,7 +3466,7 @@ static VkResult pvr_cmd_buffer_upload_pa
             /* clang-format on */
             const pvr_dev_addr_t addr =
                PVR_DEV_ADDR_OFFSET(descriptors[desc_idx].buffer_dev_addr,
-                                   dynamic_offsets[desc_idx]);
+                                   dynamic_offsets[desc_idx + desc_idx_offset]);
             const VkDeviceSize range =
                MIN2(descriptors[desc_idx].buffer_desc_range,
                     descriptors[desc_idx].buffer_whole_range -
@@ -3507,6 +3508,8 @@ static VkResult pvr_cmd_buffer_upload_pa
                    size_info->secondary * sizeof(uint32_t));
          }
       }
+
+      desc_idx_offset += binding->descriptor_count;
    }
 
    pvr_bo_cpu_unmap(device, patched_desc_set_bo);
@@ -3571,6 +3574,10 @@ pvr_cmd_buffer_upload_desc_set_table(str
 
       desc_set = desc_state->descriptor_sets[set];
 
+      /* TODO: Is it better if we don't set the valid_mask for empty sets? */
+      if (desc_set->layout->descriptor_count == 0)
+         continue;
+
       if (desc_set->layout->dynamic_buffer_count > 0) {
          struct pvr_bo *new_desc_set_bo;
 
@@ -7294,9 +7301,9 @@ void pvr_CmdPipelineBarrier2(VkCommandBu
 
       switch (src_stage_mask) {
       case PVR_PIPELINE_STAGE_FRAG_BIT:
-         is_barrier_needed = true;
+         is_barrier_needed = !render_pass;
 
-         if (!render_pass)
+         if (is_barrier_needed)
             break;
 
          assert(current_sub_cmd->type == PVR_SUB_CMD_TYPE_GRAPHICS);
diff -Npur mesa-23.1.3/src/imagination/vulkan/pvr_spm.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/imagination/vulkan/pvr_spm.c
--- mesa-23.1.3/src/imagination/vulkan/pvr_spm.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/imagination/vulkan/pvr_spm.c	2023-07-18 23:48:05.000000000 +0200
@@ -986,6 +986,14 @@ pvr_spm_init_bgobj_state(struct pvr_devi
 
    consts_buffer_size = info->const_shared_regs * sizeof(uint32_t);
 
+   /* TODO: Remove this check, along with the pvr_finishme(), once the zeroed
+    * shaders are replaced by the real shaders.
+    */
+   if (!consts_buffer_size)
+      return VK_SUCCESS;
+
+   pvr_finishme("Remove consts buffer size check");
+
    result = pvr_bo_alloc(device,
                          device->heaps.general_heap,
                          consts_buffer_size,
diff -Npur mesa-23.1.3/src/intel/ci/iris-amly-fails.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/ci/iris-amly-fails.txt
--- mesa-23.1.3/src/intel/ci/iris-amly-fails.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/ci/iris-amly-fails.txt	2023-07-18 23:48:05.000000000 +0200
@@ -6,8 +6,6 @@
 wayland-dEQP-EGL.functional.wide_color.pbuffer_888_colorspace_default,Fail
 wayland-dEQP-EGL.functional.wide_color.window_888_colorspace_default,Fail
 
-wayland-dEQP-EGL.functional.wide_color.window_fp16_default_colorspace,Fail
-
 # New CTS failures in 1.3.5.0
 KHR-GL46.polygon_offset_clamp.PolygonOffsetClampMinMax,Fail
 KHR-GL46.polygon_offset_clamp.PolygonOffsetClampZeroInfinity,Fail
diff -Npur mesa-23.1.3/src/intel/ci/iris-apl-fails.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/ci/iris-apl-fails.txt
--- mesa-23.1.3/src/intel/ci/iris-apl-fails.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/ci/iris-apl-fails.txt	2023-07-18 23:48:05.000000000 +0200
@@ -11,4 +11,3 @@ KHR-GL46.polygon_offset_clamp.PolygonOff
 
 # after enabling wayland in x86_64 mesa build
 wayland-dEQP-EGL.functional.wide_color.window_888_colorspace_default,Fail
-wayland-dEQP-EGL.functional.wide_color.window_fp16_default_colorspace,Fail
diff -Npur mesa-23.1.3/src/intel/ci/iris-apl-flakes.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/ci/iris-apl-flakes.txt
--- mesa-23.1.3/src/intel/ci/iris-apl-flakes.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/ci/iris-apl-flakes.txt	2023-07-18 23:48:05.000000000 +0200
@@ -21,6 +21,3 @@ dEQP-EGL.functional.sharing.gles2.multit
 # 2022-05-05 18:40:38.338548: [  830.144153] i915 0000:00:02.0: [drm] GPU HANG: ecode 9:1:87d79ffe, in deqp-gles31 [2571]
 dEQP-GLES31.functional.primitive_bounding_box.clear.scissored_clear_with_triangles
 dEQP-GLES31.functional.primitive_bounding_box.clear.scissored_clear_with_triangles_per_primitive_bbox
-
-# Since Wayland was enabled on x86-64, this test flakes occasionally.
-wayland-dEQP-EGL.functional.wide_color.window_fp16_default_colorspace
diff -Npur mesa-23.1.3/src/intel/compiler/brw_fs.cpp mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/compiler/brw_fs.cpp
--- mesa-23.1.3/src/intel/compiler/brw_fs.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/compiler/brw_fs.cpp	2023-07-18 23:48:05.000000000 +0200
@@ -7312,7 +7312,7 @@ brw_nir_move_interpolation_to_top(nir_sh
 }
 
 static void
-brw_nir_populate_wm_prog_data(const nir_shader *shader,
+brw_nir_populate_wm_prog_data(nir_shader *shader,
                               const struct intel_device_info *devinfo,
                               const struct brw_wm_prog_key *key,
                               struct brw_wm_prog_data *prog_data,
@@ -7425,6 +7425,35 @@ brw_nir_populate_wm_prog_data(const nir_
       prog_data->coarse_pixel_dispatch = BRW_NEVER;
    }
 
+   /* ICL PRMs, Volume 9: Render Engine, Shared Functions Pixel Interpolater,
+    * Message Descriptor :
+    *
+    *    "Message Type. Specifies the type of message being sent when
+    *     pixel-rate evaluation is requested :
+    *
+    *     Format = U2
+    *       0: Per Message Offset (eval_snapped with immediate offset)
+    *       1: Sample Position Offset (eval_sindex)
+    *       2: Centroid Position Offset (eval_centroid)
+    *       3: Per Slot Offset (eval_snapped with register offset)
+    *
+    *     Message Type. Specifies the type of message being sent when
+    *     coarse-rate evaluation is requested :
+    *
+    *     Format = U2
+    *       0: Coarse to Pixel Mapping Message (internal message)
+    *       1: Reserved
+    *       2: Coarse Centroid Position (eval_centroid)
+    *       3: Per Slot Coarse Pixel Offset (eval_snapped with register offset)"
+    *
+    * The Sample Position Offset is marked as reserved for coarse rate
+    * evaluation and leads to hangs if we try to use it. So disable coarse
+    * pixel shading if we have any intrinsic that will result in a pixel
+    * interpolater message at sample.
+    */
+   if (brw_nir_pulls_at_sample(shader))
+      prog_data->coarse_pixel_dispatch = BRW_NEVER;
+
    /* We choose to always enable VMask prior to XeHP, as it would cause
     * us to lose out on the eliminate_find_live_channel() optimization.
     */
diff -Npur mesa-23.1.3/src/intel/compiler/brw_nir.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/compiler/brw_nir.c
--- mesa-23.1.3/src/intel/compiler/brw_nir.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/compiler/brw_nir.c	2023-07-18 23:48:05.000000000 +0200
@@ -2074,3 +2074,23 @@ brw_nir_load_global_const(nir_builder *b
 
    return sysval;
 }
+
+bool
+brw_nir_pulls_at_sample(nir_shader *shader)
+{
+   nir_foreach_function_impl(impl, shader) {
+      nir_foreach_block(block, impl) {
+         nir_foreach_instr(instr, block) {
+            if (instr->type != nir_instr_type_intrinsic)
+               continue;
+
+            nir_intrinsic_instr *intrin = nir_instr_as_intrinsic(instr);
+
+            if (intrin->intrinsic == nir_intrinsic_load_barycentric_at_sample)
+               return true;
+         }
+      }
+   }
+
+   return false;
+}
diff -Npur mesa-23.1.3/src/intel/compiler/brw_nir.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/compiler/brw_nir.h
--- mesa-23.1.3/src/intel/compiler/brw_nir.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/compiler/brw_nir.h	2023-07-18 23:48:05.000000000 +0200
@@ -198,6 +198,8 @@ nir_shader *brw_nir_create_passthrough_t
                                            const struct brw_compiler *compiler,
                                            const struct brw_tcs_prog_key *key);
 
+bool brw_nir_pulls_at_sample(nir_shader *shader);
+
 #define BRW_NIR_FRAG_OUTPUT_INDEX_SHIFT 0
 #define BRW_NIR_FRAG_OUTPUT_INDEX_MASK INTEL_MASK(0, 0)
 #define BRW_NIR_FRAG_OUTPUT_LOCATION_SHIFT 1
diff -Npur mesa-23.1.3/src/intel/genxml/gen125.xml mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/genxml/gen125.xml
--- mesa-23.1.3/src/intel/genxml/gen125.xml	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/genxml/gen125.xml	2023-07-18 23:48:05.000000000 +0200
@@ -7440,6 +7440,12 @@
   <register name="DS_INVOCATION_COUNT" length="2" num="0x2308">
     <field name="DS Invocation Count Report" start="0" end="63" type="uint" />
   </register>
+  <register name="FF_MODE2" length="1" num="0x6604">
+    <field name="VS Timer Value" start="0" end="7" type="uint" />
+    <field name="HS Timer Value" start="8" end="15" type="uint" />
+    <field name="TDS Timer Value" start="16" end="23" type="uint" />
+    <field name="GS Timer Value" start="24" end="31" type="uint" />
+  </register>
   <register name="GFX_AUX_TABLE_BASE_ADDR" length="2" num="0x4200">
     <field name="Address" start="0" end="63" type="uint" />
   </register>
@@ -7519,6 +7525,12 @@
     <field name="DC Allocation" start="18" end="24" type="uint" />
     <field name="All Allocation" start="25" end="31" type="uint" />
   </register>
+  <register name="L3SQCREG5" length="1" num="0xB158">
+    <field name="L3 Cache Partial Write Merge Timer Initial Value" start="0" end="9" type="uint" />
+    <field name="Compressible Partial Write Merge Enable" start="21" end="21" type="uint" />
+    <field name="Coherent Partial Write Merge Enable" start="22" end="22" type="uint" />
+    <field name="Cross-Tile Partial Write Merge Enable" start="23" end="23" type="uint" />
+  </register>
   <register name="PS_INVOCATION_COUNT" length="2" num="0x2348">
     <field name="PS Invocation Count Report" start="0" end="63" type="uint" />
   </register>
diff -Npur mesa-23.1.3/src/intel/genxml/gen12.xml mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/genxml/gen12.xml
--- mesa-23.1.3/src/intel/genxml/gen12.xml	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/genxml/gen12.xml	2023-07-18 23:48:05.000000000 +0200
@@ -6940,6 +6940,12 @@
   <register name="DS_INVOCATION_COUNT" length="2" num="0x2308">
     <field name="DS Invocation Count Report" start="0" end="63" type="uint" />
   </register>
+  <register name="FF_MODE2" length="1" num="0x6604">
+    <field name="VS Timer Value" start="0" end="7" type="uint" />
+    <field name="HS Timer Value" start="8" end="15" type="uint" />
+    <field name="TDS Timer Value" start="16" end="23" type="uint" />
+    <field name="GS Timer Value" start="24" end="31" type="uint" />
+  </register>
   <register name="GFX_AUX_TABLE_BASE_ADDR" length="2" num="0x4200">
     <field name="Address" start="0" end="63" type="uint" />
   </register>
diff -Npur mesa-23.1.3/src/intel/perf/intel_perf.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/perf/intel_perf.c
--- mesa-23.1.3/src/intel/perf/intel_perf.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/perf/intel_perf.c	2023-07-18 23:48:05.000000000 +0200
@@ -480,6 +480,7 @@ get_register_queries_function(const stru
    case INTEL_PLATFORM_DG1:
       return intel_oa_register_queries_dg1;
    case INTEL_PLATFORM_ADL:
+   case INTEL_PLATFORM_RPL:
       return intel_oa_register_queries_adl;
    case INTEL_PLATFORM_DG2_G10:
       return intel_oa_register_queries_acmgt3;
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_android.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_android.c
--- mesa-23.1.3/src/intel/vulkan/anv_android.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_android.c	2023-07-18 23:48:05.000000000 +0200
@@ -205,7 +205,7 @@ get_ahw_buffer_format_properties2(
       tiling = VK_IMAGE_TILING_LINEAR;
 
    p->formatFeatures =
-      anv_get_image_format_features2(device->info, p->format, anv_format,
+      anv_get_image_format_features2(device->physical, p->format, anv_format,
                                      tiling, NULL);
 
    /* "Images can be created with an external format even if the Android hardware
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_blorp.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_blorp.c
--- mesa-23.1.3/src/intel/vulkan/anv_blorp.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_blorp.c	2023-07-18 23:48:05.000000000 +0200
@@ -541,6 +541,8 @@ anv_add_buffer_write_pending_bits(struct
    const struct intel_device_info *devinfo = cmd_buffer->device->info;
 
    cmd_buffer->state.pending_query_bits |=
+      (cmd_buffer->queue_family->queueFlags & VK_QUEUE_GRAPHICS_BIT) == 0 ?
+      ANV_QUERY_COMPUTE_WRITES_PENDING_BITS :
       ANV_QUERY_RENDER_TARGET_WRITES_PENDING_BITS(devinfo);
 }
 
@@ -561,9 +563,9 @@ void anv_CmdCopyImageToBuffer2(
                            &pCopyImageToBufferInfo->pRegions[r], false);
    }
 
-   anv_blorp_batch_finish(&batch);
-
    anv_add_buffer_write_pending_bits(cmd_buffer, "after copy image to buffer");
+
+   anv_blorp_batch_finish(&batch);
 }
 
 static bool
@@ -786,9 +788,9 @@ void anv_CmdCopyBuffer2(
                   &pCopyBufferInfo->pRegions[r]);
    }
 
-   anv_blorp_batch_finish(&batch);
-
    anv_add_buffer_write_pending_bits(cmd_buffer, "after copy buffer");
+
+   anv_blorp_batch_finish(&batch);
 }
 
 
@@ -848,9 +850,9 @@ void anv_CmdUpdateBuffer(
       pData = (void *)pData + copy_size;
    }
 
-   anv_blorp_batch_finish(&batch);
-
    anv_add_buffer_write_pending_bits(cmd_buffer, "update buffer");
+
+   anv_blorp_batch_finish(&batch);
 }
 
 void
@@ -959,7 +961,6 @@ void anv_CmdFillBuffer(
                             fillSize, data);
 
    anv_add_buffer_write_pending_bits(cmd_buffer, "after fill buffer");
-
 }
 
 void anv_CmdClearColorImage(
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_device.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_device.c
--- mesa-23.1.3/src/intel/vulkan/anv_device.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_device.c	2023-07-18 23:48:05.000000000 +0200
@@ -4303,11 +4303,11 @@ anv_get_buffer_memory_requirements(struc
     */
    uint32_t memory_types = (1ull << device->physical->memory.type_count) - 1;
 
-   /* Base alignment requirement of a cache line */
-   uint32_t alignment = 16;
-
-   if (usage & VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
-      alignment = MAX2(alignment, ANV_UBO_ALIGNMENT);
+   /* The GPU appears to write back to main memory in cachelines. Writes to a
+    * buffers should not clobber with writes to another buffers so make sure
+    * those are in different cachelines.
+    */
+   uint32_t alignment = 64;
 
    pMemoryRequirements->memoryRequirements.size = size;
    pMemoryRequirements->memoryRequirements.alignment = alignment;
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_formats.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_formats.c
--- mesa-23.1.3/src/intel/vulkan/anv_formats.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_formats.c	2023-07-18 23:48:05.000000000 +0200
@@ -516,12 +516,13 @@ anv_get_format_aspect(const struct intel
 // Format capabilities
 
 VkFormatFeatureFlags2
-anv_get_image_format_features2(const struct intel_device_info *devinfo,
+anv_get_image_format_features2(const struct anv_physical_device *physical_device,
                                VkFormat vk_format,
                                const struct anv_format *anv_format,
                                VkImageTiling vk_tiling,
                                const struct isl_drm_modifier_info *isl_mod_info)
 {
+   const struct intel_device_info *devinfo = &physical_device->info;
    VkFormatFeatureFlags2 flags = 0;
 
    if (anv_format == NULL)
@@ -555,7 +556,8 @@ anv_get_image_format_features2(const str
 
    assert(aspects & VK_IMAGE_ASPECT_ANY_COLOR_BIT_ANV);
 
-   if (vk_format == VK_FORMAT_G8_B8R8_2PLANE_420_UNORM) {
+   if (physical_device->video_decode_enabled &&
+       vk_format == VK_FORMAT_G8_B8R8_2PLANE_420_UNORM) {
       flags |= VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR |
                VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR;
    }
@@ -870,7 +872,6 @@ get_drm_format_modifier_properties_list(
                                         VkFormat vk_format,
                                         VkDrmFormatModifierPropertiesListEXT *list)
 {
-   const struct intel_device_info *devinfo = &physical_device->info;
    const struct anv_format *anv_format = anv_get_format(vk_format);
 
    VK_OUTARRAY_MAKE_TYPED(VkDrmFormatModifierPropertiesEXT, out,
@@ -879,7 +880,7 @@ get_drm_format_modifier_properties_list(
 
    isl_drm_modifier_info_for_each(isl_mod_info) {
       VkFormatFeatureFlags2 features2 =
-         anv_get_image_format_features2(devinfo, vk_format, anv_format,
+         anv_get_image_format_features2(physical_device, vk_format, anv_format,
                                         VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
                                         isl_mod_info);
       VkFormatFeatureFlags features = vk_format_features2_to_features(features2);
@@ -905,7 +906,6 @@ get_drm_format_modifier_properties_list_
                                           VkFormat vk_format,
                                           VkDrmFormatModifierPropertiesList2EXT *list)
 {
-   const struct intel_device_info *devinfo = &physical_device->info;
    const struct anv_format *anv_format = anv_get_format(vk_format);
 
    VK_OUTARRAY_MAKE_TYPED(VkDrmFormatModifierProperties2EXT, out,
@@ -914,7 +914,7 @@ get_drm_format_modifier_properties_list_
 
    isl_drm_modifier_info_for_each(isl_mod_info) {
       VkFormatFeatureFlags2 features2 =
-         anv_get_image_format_features2(devinfo, vk_format, anv_format,
+         anv_get_image_format_features2(physical_device, vk_format, anv_format,
                                         VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
                                         isl_mod_info);
       if (!features2)
@@ -946,9 +946,11 @@ void anv_GetPhysicalDeviceFormatProperti
    assert(pFormatProperties->sType == VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2);
 
    VkFormatFeatureFlags2 linear2, optimal2, buffer2;
-   linear2 = anv_get_image_format_features2(devinfo, vk_format, anv_format,
+   linear2 = anv_get_image_format_features2(physical_device, vk_format,
+                                            anv_format,
                                             VK_IMAGE_TILING_LINEAR, NULL);
-   optimal2 = anv_get_image_format_features2(devinfo, vk_format, anv_format,
+   optimal2 = anv_get_image_format_features2(physical_device, vk_format,
+                                             anv_format,
                                              VK_IMAGE_TILING_OPTIMAL, NULL);
    buffer2 = get_buffer_format_features2(devinfo, vk_format, anv_format);
 
@@ -1117,13 +1119,14 @@ anv_formats_are_compatible(
  */
 static VkFormatFeatureFlags2
 anv_formats_gather_format_features(
-   const struct intel_device_info *devinfo,
+   const struct anv_physical_device *physical_device,
    const struct anv_format *format,
    VkImageTiling tiling,
    const struct isl_drm_modifier_info *isl_mod_info,
    const VkImageFormatListCreateInfo *format_list_info,
    bool allow_texel_compatible)
 {
+   const struct intel_device_info *devinfo = &physical_device->info;
    VkFormatFeatureFlags2KHR all_formats_feature_flags = 0;
 
    /* We need to check that each of the usage bits are allowed for at least
@@ -1147,7 +1150,7 @@ anv_formats_gather_format_features(
                                            devinfo, tiling,
                                            allow_texel_compatible)) {
                VkFormatFeatureFlags2KHR view_format_features =
-                  anv_get_image_format_features2(devinfo,
+                  anv_get_image_format_features2(physical_device,
                                                  possible_anv_format->vk_format,
                                                  possible_anv_format, tiling,
                                                  isl_mod_info);
@@ -1166,9 +1169,9 @@ anv_formats_gather_format_features(
          const struct anv_format *anv_view_format =
             anv_get_format(vk_view_format);
          VkFormatFeatureFlags2KHR view_format_features =
-            anv_get_image_format_features2(devinfo, vk_view_format,
-                                           anv_view_format, tiling,
-                                           isl_mod_info);
+            anv_get_image_format_features2(physical_device,
+                                           vk_view_format, anv_view_format,
+                                           tiling, isl_mod_info);
          all_formats_feature_flags |= view_format_features;
       }
    }
@@ -1264,8 +1267,9 @@ anv_get_image_format_properties(
     * different usage than the image, so we can't always filter on usage.
     * There is one exception to this below for storage.
     */
-   format_feature_flags = anv_get_image_format_features2(devinfo, info->format,
-                                                         format, info->tiling,
+   format_feature_flags = anv_get_image_format_features2(physical_device,
+                                                         info->format, format,
+                                                         info->tiling,
                                                          isl_mod_info);
 
    if (!anv_format_supports_usage(format_feature_flags, info->usage)) {
@@ -1289,8 +1293,9 @@ anv_get_image_format_properties(
        * the format list or all the compatible formats.
        */
       VkFormatFeatureFlags2 all_formats_feature_flags = format_feature_flags |
-         anv_formats_gather_format_features(devinfo, format, info->tiling,
-                                            isl_mod_info, format_list_info,
+         anv_formats_gather_format_features(physical_device, format,
+                                            info->tiling, isl_mod_info,
+                                            format_list_info,
                                             info->flags & VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT);
 
       if (!anv_format_supports_usage(all_formats_feature_flags, info->usage))
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_private.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_private.h
--- mesa-23.1.3/src/intel/vulkan/anv_private.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_private.h	2023-07-18 23:48:05.000000000 +0200
@@ -2097,11 +2097,13 @@ enum anv_pipe_bits {
  * based on PIPE_CONTROL emissions.
  */
 enum anv_query_bits {
-   ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH      = (1 << 0),
+   ANV_QUERY_WRITES_RT_FLUSH      = (1 << 0),
 
-   ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH    = (1 << 1),
+   ANV_QUERY_WRITES_TILE_FLUSH    = (1 << 1),
 
-   ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL      = (1 << 2),
+   ANV_QUERY_WRITES_CS_STALL      = (1 << 2),
+
+   ANV_QUERY_WRITES_DATA_FLUSH    = (1 << 3),
 };
 
 /* Things we need to flush before accessing query data using the command
@@ -2116,17 +2118,24 @@ enum anv_query_bits {
  */
 #define ANV_QUERY_RENDER_TARGET_WRITES_PENDING_BITS(devinfo) \
    (((devinfo->verx10 >= 120 && \
-      devinfo->verx10 < 125) ? ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH : 0) | \
-   ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH | \
-   ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL)
+      devinfo->verx10 < 125) ? ANV_QUERY_WRITES_TILE_FLUSH : 0) | \
+   ANV_QUERY_WRITES_RT_FLUSH | \
+   ANV_QUERY_WRITES_CS_STALL)
+#define ANV_QUERY_COMPUTE_WRITES_PENDING_BITS \
+   (ANV_QUERY_WRITES_DATA_FLUSH | \
+    ANV_QUERY_WRITES_CS_STALL)
 
 #define ANV_PIPE_QUERY_BITS(pending_query_bits) ( \
-   ((pending_query_bits & ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH) ?   \
+   ((pending_query_bits & ANV_QUERY_WRITES_RT_FLUSH) ?   \
     ANV_PIPE_RENDER_TARGET_CACHE_FLUSH_BIT : 0) | \
-   ((pending_query_bits & ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH) ?   \
+   ((pending_query_bits & ANV_QUERY_WRITES_TILE_FLUSH) ?   \
     ANV_PIPE_TILE_CACHE_FLUSH_BIT : 0) | \
-   ((pending_query_bits & ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL) ?   \
-    ANV_PIPE_CS_STALL_BIT : 0))
+   ((pending_query_bits & ANV_QUERY_WRITES_CS_STALL) ?   \
+    ANV_PIPE_CS_STALL_BIT : 0) | \
+   ((pending_query_bits & ANV_QUERY_WRITES_DATA_FLUSH) ?  \
+    (ANV_PIPE_DATA_CACHE_FLUSH_BIT | \
+     ANV_PIPE_HDC_PIPELINE_FLUSH_BIT | \
+     ANV_PIPE_UNTYPED_DATAPORT_CACHE_FLUSH_BIT) : 0))
 
 #define ANV_PIPE_FLUSH_BITS ( \
    ANV_PIPE_DEPTH_CACHE_FLUSH_BIT | \
@@ -4136,7 +4145,7 @@ anv_is_dual_src_blend_equation(const str
 }
 
 VkFormatFeatureFlags2
-anv_get_image_format_features2(const struct intel_device_info *devinfo,
+anv_get_image_format_features2(const struct anv_physical_device *physical_device,
                                VkFormat vk_format,
                                const struct anv_format *anv_format,
                                VkImageTiling vk_tiling,
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_utrace.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_utrace.c
--- mesa-23.1.3/src/intel/vulkan/anv_utrace.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/anv_utrace.c	2023-07-18 23:48:05.000000000 +0200
@@ -129,9 +129,18 @@ anv_device_utrace_flush_cmd_buffers(stru
       if (result != VK_SUCCESS)
          goto error_trace_buf;
 
+      uint32_t batch_size = 512; /* 128 dwords of setup */
+      if (device->info->verx10 == 120 || intel_device_info_is_dg2(device->info)) {
+         /* Enable/Disable preemption at the begin/end */
+         batch_size += 2 * (250 /* 250 MI_NOOPs*/ +
+                            6   /* PIPE_CONTROL */ +
+                            3   /* MI_LRI */) * 4 /* dwords */;
+      }
+      batch_size += 256 * utrace_copies; /* 64 dwords per copy */
+      batch_size = align(batch_size + 4, 8); /* MI_BATCH_BUFFER_END */
+
       result = anv_bo_pool_alloc(&device->utrace_bo_pool,
-                                 /* 128 dwords of setup + 64 dwords per copy */
-                                 align(512 + 64 * utrace_copies, 4096),
+                                 align(batch_size, 4096),
                                  &submit->batch_bo);
       if (result != VK_SUCCESS)
          goto error_batch_buf;
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_cmd_buffer.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_cmd_buffer.c
--- mesa-23.1.3/src/intel/vulkan/genX_cmd_buffer.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_cmd_buffer.c	2023-07-18 23:48:05.000000000 +0200
@@ -1754,16 +1754,22 @@ genX(emit_apply_pipe_flushes)(struct anv
        */
       if (query_bits != NULL) {
          if (bits & ANV_PIPE_RENDER_TARGET_CACHE_FLUSH_BIT)
-            *query_bits &= ~ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH;
+            *query_bits &= ~ANV_QUERY_WRITES_RT_FLUSH;
 
          if (bits & ANV_PIPE_TILE_CACHE_FLUSH_BIT)
-            *query_bits &= ~ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH;
+            *query_bits &= ~ANV_QUERY_WRITES_TILE_FLUSH;
+
+         if ((bits & ANV_PIPE_DATA_CACHE_FLUSH_BIT) &&
+             (bits & ANV_PIPE_HDC_PIPELINE_FLUSH_BIT) &&
+             (bits & ANV_PIPE_UNTYPED_DATAPORT_CACHE_FLUSH_BIT))
+            *query_bits &= ~ANV_QUERY_WRITES_TILE_FLUSH;
 
          /* Once RT/TILE have been flushed, we can consider the CS_STALL flush */
-         if ((*query_bits & (ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH |
-                             ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH)) == 0 &&
+         if ((*query_bits & (ANV_QUERY_WRITES_TILE_FLUSH |
+                             ANV_QUERY_WRITES_RT_FLUSH |
+                             ANV_QUERY_WRITES_DATA_FLUSH)) == 0 &&
              (bits & (ANV_PIPE_END_OF_PIPE_SYNC_BIT | ANV_PIPE_CS_STALL_BIT)))
-            *query_bits &= ~ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL;
+            *query_bits &= ~ANV_QUERY_WRITES_CS_STALL;
       }
 
       bits &= ~(ANV_PIPE_FLUSH_BITS | ANV_PIPE_STALL_BITS |
@@ -4059,6 +4065,37 @@ genX(CmdExecuteCommands)(
    }
 }
 
+static inline bool
+stage_is_shader(const VkPipelineStageFlags2 stage)
+{
+   return (stage & (VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT |
+                    VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT |
+                    VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR |
+                    VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT |
+                    VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT));
+}
+
+static inline bool
+stage_is_transfer(const VkPipelineStageFlags2 stage)
+{
+   return (stage & (VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT |
+                    VK_PIPELINE_STAGE_2_TRANSFER_BIT));
+}
+
+static inline bool
+mask_is_shader_write(const VkAccessFlags2 access)
+{
+   return (access & (VK_ACCESS_2_SHADER_WRITE_BIT |
+                     VK_ACCESS_2_MEMORY_WRITE_BIT |
+                     VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT));
+}
+
 static void
 cmd_buffer_barrier(struct anv_cmd_buffer *cmd_buffer,
                    const VkDependencyInfo *dep_info,
@@ -4077,11 +4114,31 @@ cmd_buffer_barrier(struct anv_cmd_buffer
    for (uint32_t i = 0; i < dep_info->memoryBarrierCount; i++) {
       src_flags |= dep_info->pMemoryBarriers[i].srcAccessMask;
       dst_flags |= dep_info->pMemoryBarriers[i].dstAccessMask;
+
+      /* Shader writes to buffers that could then be written by a transfer
+       * command (including queries).
+       */
+      if (stage_is_shader(dep_info->pMemoryBarriers[i].srcStageMask) &&
+          mask_is_shader_write(dep_info->pMemoryBarriers[i].srcAccessMask) &&
+          stage_is_transfer(dep_info->pMemoryBarriers[i].dstStageMask)) {
+         cmd_buffer->state.pending_query_bits |=
+            ANV_QUERY_COMPUTE_WRITES_PENDING_BITS;
+      }
    }
 
    for (uint32_t i = 0; i < dep_info->bufferMemoryBarrierCount; i++) {
       src_flags |= dep_info->pBufferMemoryBarriers[i].srcAccessMask;
       dst_flags |= dep_info->pBufferMemoryBarriers[i].dstAccessMask;
+
+      /* Shader writes to buffers that could then be written by a transfer
+       * command (including queries).
+       */
+      if (stage_is_shader(dep_info->pBufferMemoryBarriers[i].srcStageMask) &&
+          mask_is_shader_write(dep_info->pBufferMemoryBarriers[i].srcAccessMask) &&
+          stage_is_transfer(dep_info->pBufferMemoryBarriers[i].dstStageMask)) {
+         cmd_buffer->state.pending_query_bits |=
+            ANV_QUERY_COMPUTE_WRITES_PENDING_BITS;
+      }
    }
 
    for (uint32_t i = 0; i < dep_info->imageMemoryBarrierCount; i++) {
@@ -5595,9 +5652,7 @@ genX(cmd_buffer_ensure_cfe_state)(struct
 
    const struct intel_device_info *devinfo = cmd_buffer->device->info;
    anv_batch_emit(&cmd_buffer->batch, GENX(CFE_STATE), cfe) {
-      const uint32_t subslices = MAX2(devinfo->subslice_total, 1);
-      cfe.MaximumNumberofThreads =
-         devinfo->max_cs_threads * subslices - 1;
+      cfe.MaximumNumberofThreads = devinfo->max_cs_threads * devinfo->subslice_total;
 
       uint32_t scratch_surf = 0xffffffff;
       if (total_scratch > 0) {
@@ -6448,6 +6503,8 @@ cmd_buffer_trace_rays(struct anv_cmd_buf
       }
    }
 
+   genX(cmd_buffer_ensure_cfe_state)(cmd_buffer, pipeline->scratch_size);
+
    const struct brw_cs_prog_data *cs_prog_data =
       brw_cs_prog_data_const(device->rt_trampoline->prog_data);
    struct brw_cs_dispatch_info dispatch =
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_query.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_query.c
--- mesa-23.1.3/src/intel/vulkan/genX_query.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_query.c	2023-07-18 23:48:05.000000000 +0200
@@ -1514,15 +1514,22 @@ void genX(CmdCopyQueryPoolResults)(
     * command streamer.
     */
    if (cmd_buffer->state.pending_query_bits &
-       ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH)
+       ANV_QUERY_WRITES_RT_FLUSH)
       needed_flushes |= ANV_PIPE_RENDER_TARGET_CACHE_FLUSH_BIT;
 
    if (cmd_buffer->state.pending_query_bits &
-       ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH)
+       ANV_QUERY_WRITES_TILE_FLUSH)
       needed_flushes |= ANV_PIPE_TILE_CACHE_FLUSH_BIT;
 
    if (cmd_buffer->state.pending_query_bits &
-       ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL)
+       ANV_QUERY_WRITES_DATA_FLUSH) {
+      needed_flushes |= (ANV_PIPE_DATA_CACHE_FLUSH_BIT |
+                         ANV_PIPE_HDC_PIPELINE_FLUSH_BIT |
+                         ANV_PIPE_UNTYPED_DATAPORT_CACHE_FLUSH_BIT);
+   }
+
+   if (cmd_buffer->state.pending_query_bits &
+       ANV_QUERY_WRITES_CS_STALL)
       needed_flushes |= ANV_PIPE_CS_STALL_BIT;
 
    /* Occlusion & timestamp queries are written using a PIPE_CONTROL and
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_state.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_state.c
--- mesa-23.1.3/src/intel/vulkan/genX_state.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_state.c	2023-07-18 23:48:05.000000000 +0200
@@ -179,6 +179,21 @@ init_common_queue_state(struct anv_queue
    device->l3_config = cfg;
 #endif
 
+#if GFX_VERx10 == 125
+   /* Even though L3 partial write merging is supposed to be enabled
+    * by default on Gfx12.5 according to the hardware spec, i915
+    * appears to accidentally clear the enables during context
+    * initialization, so make sure to enable them here since partial
+    * write merging has a large impact on rendering performance.
+    */
+   anv_batch_write_reg(batch, GENX(L3SQCREG5), reg) {
+      reg.L3CachePartialWriteMergeTimerInitialValue = 0x7f;
+      reg.CompressiblePartialWriteMergeEnable = true;
+      reg.CoherentPartialWriteMergeEnable = true;
+      reg.CrossTilePartialWriteMergeEnable = true;
+   }
+#endif
+
    /* Emit STATE_BASE_ADDRESS on Gfx12+ because we set a default CPS_STATE and
     * those are relative to STATE_BASE_ADDRESS::DynamicStateBaseAddress.
     */
@@ -421,6 +436,35 @@ init_render_queue_state(struct anv_queue
       reg.HZDepthTestLEGEOptimizationDisableMask = true;
    }
 
+#if GFX_VER == 12
+   anv_batch_write_reg(&batch, GENX(FF_MODE2), reg) {
+      /* On Alchemist, the FF_MODE2 docs for the GS timer say:
+       *
+       *    "The timer value must be set to 224."
+       *
+       * and Wa_16011163337 indicates this is the case for all Gfx12 parts,
+       * and that this is necessary to avoid hanging the HS/DS units.  It
+       * also clarifies that 224 is literally 0xE0 in the bits, not 7*32=224.
+       *
+       * The HS timer docs also have the same quote for Alchemist.  I am
+       * unaware of a reason it needs to be set to 224 on Tigerlake, but
+       * we do so for consistency if nothing else.
+       *
+       * For the TDS timer value, the docs say:
+       *
+       *    "For best performance, a value of 4 should be programmed."
+       *
+       * i915 also sets it this way on Tigerlake due to workarounds.
+       *
+       * The default VS timer appears to be 0, so we leave it at that.
+       */
+      reg.GSTimerValue  = 224;
+      reg.HSTimerValue  = 224;
+      reg.TDSTimerValue = 4;
+      reg.VSTimerValue  = 0;
+   }
+#endif
+
    /* Wa_1508744258
     *
     *    Disable RHWO by setting 0x7010[14] by default except during resolve
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_video.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_video.c
--- mesa-23.1.3/src/intel/vulkan/genX_video.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/genX_video.c	2023-07-18 23:48:05.000000000 +0200
@@ -110,8 +110,8 @@ anv_h264_decode_video(struct anv_cmd_buf
       ss.TiledSurface = img->planes[0].primary_surface.isl.tiling != ISL_TILING_LINEAR;
       ss.TileWalk = TW_YMAJOR;
 
-      ss.YOffsetforUCb = align(img->vk.extent.height, 32);
-      ss.YOffsetforVCr = align(img->vk.extent.height, 32);
+      ss.YOffsetforUCb = ss.YOffsetforVCr =
+         img->planes[1].primary_surface.memory_range.offset / img->planes[0].primary_surface.isl.row_pitch_B;
    }
 
    anv_batch_emit(&cmd_buffer->batch, GENX(MFX_PIPE_BUF_ADDR_STATE), buf) {
diff -Npur mesa-23.1.3/src/intel/vulkan/xe/anv_batch_chain.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/xe/anv_batch_chain.c
--- mesa-23.1.3/src/intel/vulkan/xe/anv_batch_chain.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/intel/vulkan/xe/anv_batch_chain.c	2023-07-18 23:48:05.000000000 +0200
@@ -119,7 +119,10 @@ xe_exec_process_syncs(struct anv_queue *
 
    uint32_t count = 0;
 
-   if (utrace_submit) {
+   /* Signal the utrace sync only if it doesn't have a batch. Otherwise the
+    * it's the utrace batch that should signal its own sync.
+    */
+   if (utrace_submit && !utrace_submit->batch_bo) {
       struct drm_xe_sync *xe_sync = &xe_syncs[count++];
 
       xe_exec_fill_sync(xe_sync, utrace_submit->sync, 0, TYPE_SIGNAL);
@@ -217,9 +220,6 @@ xe_queue_exec_locked(struct anv_queue *q
    if (result != VK_SUCCESS)
       return result;
 
-   if (utrace_submit && !utrace_submit->batch_bo)
-      utrace_submit = NULL;
-
    struct drm_xe_sync *xe_syncs = NULL;
    uint32_t xe_syncs_count = 0;
    result = xe_exec_process_syncs(queue, wait_count, waits,
@@ -229,6 +229,10 @@ xe_queue_exec_locked(struct anv_queue *q
    if (result != VK_SUCCESS)
       return result;
 
+   /* If we have no batch for utrace, just forget about it now. */
+   if (utrace_submit && !utrace_submit->batch_bo)
+      utrace_submit = NULL;
+
    struct drm_xe_exec exec = {
       .engine_id = queue->engine_id,
       .num_batch_buffer = 1,
diff -Npur mesa-23.1.3/src/mapi/glapi/tests/check_table.cpp mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mapi/glapi/tests/check_table.cpp
--- mesa-23.1.3/src/mapi/glapi/tests/check_table.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mapi/glapi/tests/check_table.cpp	2023-07-18 23:48:05.000000000 +0200
@@ -1130,8 +1130,8 @@ const struct name_offset known_dispatch[
    { "glGetAttribLocation", _O(GetAttribLocation) },
    { "glDrawBuffers", _O(DrawBuffers) },
    { "glClampColor", _O(ClampColor) },
-   { "glDrawArraysInstancedARB", _O(DrawArraysInstancedARB) },
-   { "glDrawElementsInstancedARB", _O(DrawElementsInstancedARB) },
+   { "glDrawArraysInstanced", _O(DrawArraysInstanced) },
+   { "glDrawElementsInstanced", _O(DrawElementsInstanced) },
    { "glRenderbufferStorageMultisample", _O(RenderbufferStorageMultisample) },
    { "glFramebufferTexture", _O(FramebufferTexture) },
    { "glProgramParameteri", _O(ProgramParameteri) },
diff -Npur mesa-23.1.3/src/mesa/main/draw.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/draw.c
--- mesa-23.1.3/src/mesa/main/draw.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/draw.c	2023-07-18 23:48:05.000000000 +0200
@@ -147,7 +147,6 @@ _mesa_save_and_set_draw_vao(struct gl_co
    ctx->Array._DrawVAO = NULL;
    ctx->VertexProgram._VPModeInputFilter = vp_input_filter;
    _mesa_set_draw_vao(ctx, vao);
-   _mesa_set_varying_vp_inputs(ctx, vp_input_filter & vao->_EnabledWithMapMode);
 }
 
 void
@@ -166,8 +165,6 @@ _mesa_restore_draw_vao(struct gl_context
 
    /* Restore original states. */
    _mesa_update_edgeflag_state_vao(ctx);
-   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
-                               saved->_EnabledWithMapMode);
 }
 
 /**
@@ -1395,6 +1392,8 @@ _mesa_DrawArrays(GLenum mode, GLint star
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1423,6 +1422,8 @@ _mesa_DrawArraysInstanced(GLenum mode, G
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1452,6 +1453,8 @@ _mesa_DrawArraysInstancedBaseInstance(GL
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1480,6 +1483,8 @@ _mesa_MultiDrawArrays(GLenum mode, const
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1720,6 +1725,8 @@ _mesa_DrawRangeElementsBaseVertex(GLenum
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1814,6 +1821,8 @@ _mesa_DrawElements(GLenum mode, GLsizei
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1837,6 +1846,8 @@ _mesa_DrawElementsBaseVertex(GLenum mode
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1860,6 +1871,8 @@ _mesa_DrawElementsInstanced(GLenum mode,
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1886,6 +1899,8 @@ _mesa_DrawElementsInstancedBaseVertex(GL
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1914,6 +1929,8 @@ _mesa_DrawElementsInstancedBaseInstance(
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1944,6 +1961,8 @@ _mesa_DrawElementsInstancedBaseVertexBas
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -1972,6 +1991,8 @@ _mesa_DrawElementsUserBuf(GLintptr index
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2139,6 +2160,8 @@ _mesa_MultiDrawElements(GLenum mode, con
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2164,6 +2187,8 @@ _mesa_MultiDrawElementsBaseVertex(GLenum
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2193,6 +2218,8 @@ _mesa_MultiDrawElementsUserBuf(GLintptr
    GET_CURRENT_CONTEXT(ctx);
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2225,6 +2252,8 @@ _mesa_draw_transform_feedback(struct gl_
 {
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2328,6 +2357,8 @@ _mesa_DrawArraysIndirect(GLenum mode, co
 
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2383,6 +2414,8 @@ _mesa_DrawElementsIndirect(GLenum mode,
 
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2406,6 +2439,8 @@ _mesa_MultiDrawArraysIndirect(GLenum mod
 
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2475,6 +2510,8 @@ _mesa_MultiDrawElementsIndirect(GLenum m
 
    FLUSH_FOR_DRAW(ctx);
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2587,6 +2624,8 @@ _mesa_MultiDrawArraysIndirectCountARB(GL
    if (stride == 0)
       stride = 4 * sizeof(GLuint);      /* sizeof(DrawArraysIndirectCommand) */
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
@@ -2614,6 +2653,8 @@ _mesa_MultiDrawElementsIndirectCountARB(
    if (stride == 0)
       stride = 5 * sizeof(GLuint);      /* sizeof(DrawElementsIndirectCommand) */
 
+   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
    if (ctx->NewState)
       _mesa_update_state(ctx);
 
diff -Npur mesa-23.1.3/src/mesa/main/glthread.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/glthread.c
--- mesa-23.1.3/src/mesa/main/glthread.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/glthread.c	2023-07-18 23:48:05.000000000 +0200
@@ -43,13 +43,8 @@
 #include "state_tracker/st_context.h"
 
 static void
-glthread_unmarshal_batch(void *job, void *gdata, int thread_index)
+glthread_update_global_locking(struct gl_context *ctx)
 {
-   struct glthread_batch *batch = (struct glthread_batch*)job;
-   struct gl_context *ctx = batch->ctx;
-   unsigned pos = 0;
-   unsigned used = batch->used;
-   uint64_t *buffer = batch->buffer;
    struct gl_shared_state *shared = ctx->Shared;
 
    /* Determine if we should lock the global mutexes. */
@@ -102,12 +97,34 @@ glthread_unmarshal_batch(void *job, void
    }
    simple_mtx_unlock(&shared->Mutex);
 
+   ctx->GLThread.LockGlobalMutexes = lock_mutexes;
+}
+
+static void
+glthread_unmarshal_batch(void *job, void *gdata, int thread_index)
+{
+   struct glthread_batch *batch = (struct glthread_batch*)job;
+   struct gl_context *ctx = batch->ctx;
+   unsigned pos = 0;
+   unsigned used = batch->used;
+   uint64_t *buffer = batch->buffer;
+   struct gl_shared_state *shared = ctx->Shared;
+
+   /* Determine once every 64 batches whether shared mutexes should be locked.
+    * We have to do this less frequently because os_time_get_nano() is very
+    * expensive if the clock source is not TSC. See:
+    *    https://gitlab.freedesktop.org/mesa/mesa/-/issues/8910
+    */
+   if (ctx->GLThread.GlobalLockUpdateBatchCounter++ % 64 == 0)
+      glthread_update_global_locking(ctx);
+
    /* Execute the GL calls. */
    _glapi_set_dispatch(ctx->Dispatch.Current);
 
    /* Here we lock the mutexes once globally if possible. If not, we just
     * fallback to the individual API calls doing it.
     */
+   bool lock_mutexes = ctx->GLThread.LockGlobalMutexes;
    if (lock_mutexes) {
       _mesa_HashLockMutex(shared->BufferObjects);
       ctx->BufferObjectsLocked = true;
diff -Npur mesa-23.1.3/src/mesa/main/glthread.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/glthread.h
--- mesa-23.1.3/src/mesa/main/glthread.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/glthread.h	2023-07-18 23:48:05.000000000 +0200
@@ -273,6 +273,10 @@ struct glthread_state
    /** The last added call of the given function. */
    struct marshal_cmd_CallList *LastCallList;
    struct marshal_cmd_BindBuffer *LastBindBuffer;
+
+   /** Global mutex update info. */
+   unsigned GlobalLockUpdateBatchCounter;
+   bool LockGlobalMutexes;
 };
 
 void _mesa_glthread_init(struct gl_context *ctx);
diff -Npur mesa-23.1.3/src/mesa/main/state.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/state.c
--- mesa-23.1.3/src/mesa/main/state.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/state.c	2023-07-18 23:48:05.000000000 +0200
@@ -689,9 +689,6 @@ set_vertex_processing_mode(struct gl_con
    default:
       assert(0);
    }
-
-   _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
-                               ctx->Array._DrawVAO->_EnabledWithMapMode);
 }
 
 
diff -Npur mesa-23.1.3/src/mesa/main/varray.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/varray.c
--- mesa-23.1.3/src/mesa/main/varray.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/main/varray.c	2023-07-18 23:48:05.000000000 +0200
@@ -2159,9 +2159,6 @@ _mesa_enable_vertex_array_attribs(struct
 
       vao->_EnabledWithMapMode =
          _mesa_vao_enable_to_vp_inputs(vao->_AttributeMapMode, vao->Enabled);
-
-      _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
-                                  vao->_EnabledWithMapMode);
    }
 }
 
@@ -2265,9 +2262,6 @@ _mesa_disable_vertex_array_attribs(struc
 
       vao->_EnabledWithMapMode =
          _mesa_vao_enable_to_vp_inputs(vao->_AttributeMapMode, vao->Enabled);
-
-      _mesa_set_varying_vp_inputs(ctx, ctx->VertexProgram._VPModeInputFilter &
-                                  vao->_EnabledWithMapMode);
    }
 }
 
diff -Npur mesa-23.1.3/src/mesa/state_tracker/st_cb_rasterpos.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/state_tracker/st_cb_rasterpos.c
--- mesa-23.1.3/src/mesa/state_tracker/st_cb_rasterpos.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/state_tracker/st_cb_rasterpos.c	2023-07-18 23:48:05.000000000 +0200
@@ -274,6 +274,8 @@ st_RasterPos(struct gl_context *ctx, con
 
    _mesa_save_and_set_draw_vao(ctx, rs->VAO, VERT_BIT_POS,
                                &old_vao, &old_vp_input_filter);
+   _mesa_set_varying_vp_inputs(ctx, VERT_BIT_POS &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
 
    st_feedback_draw_vbo(ctx, &rs->info, 0, &rs->draw, 1);
 
diff -Npur mesa-23.1.3/src/mesa/state_tracker/st_manager.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/state_tracker/st_manager.c
--- mesa-23.1.3/src/mesa/state_tracker/st_manager.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/state_tracker/st_manager.c	2023-07-18 23:48:05.000000000 +0200
@@ -559,6 +559,7 @@ st_visual_to_context_mode(const struct s
       mode->rgbBits = mode->redBits +
          mode->greenBits + mode->blueBits + mode->alphaBits;
       mode->sRGBCapable = util_format_is_srgb(visual->color_format);
+      mode->floatMode = util_format_is_float(visual->color_format);
    }
 
    if (visual->depth_stencil_format != PIPE_FORMAT_NONE) {
diff -Npur mesa-23.1.3/src/mesa/vbo/vbo_exec_draw.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/vbo/vbo_exec_draw.c
--- mesa-23.1.3/src/mesa/vbo/vbo_exec_draw.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/vbo/vbo_exec_draw.c	2023-07-18 23:48:05.000000000 +0200
@@ -151,6 +151,8 @@ vbo_exec_bind_arrays(struct gl_context *
 
    _mesa_save_and_set_draw_vao(ctx, vao, vao_filter,
                                old_vao, old_vp_input_filter);
+   _mesa_set_varying_vp_inputs(ctx, vao_filter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
 }
 
 
diff -Npur mesa-23.1.3/src/mesa/vbo/vbo_save_draw.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/vbo/vbo_save_draw.c
--- mesa-23.1.3/src/mesa/vbo/vbo_save_draw.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/mesa/vbo/vbo_save_draw.c	2023-07-18 23:48:05.000000000 +0200
@@ -291,7 +291,7 @@ vbo_save_playback_vertex_list_gallium(st
                                          NULL, 1);
    }
 
-   /* Restore edge flag state. */
+   /* Restore edge flag state and ctx->VertexProgram._VaryingInputs. */
    _mesa_update_edgeflag_state_vao(ctx);
 
    if (copy_to_current)
@@ -332,6 +332,8 @@ vbo_save_playback_vertex_list(struct gl_
 
    _mesa_save_and_set_draw_vao(ctx, node->cold->VAO[mode], vao_filter,
                                &old_vao, &old_vp_input_filter);
+   _mesa_set_varying_vp_inputs(ctx, vao_filter &
+                               ctx->Array._DrawVAO->_EnabledWithMapMode);
 
    /* Need that at least one time. */
    if (ctx->NewState)
diff -Npur mesa-23.1.3/src/nouveau/codegen/nv50_ir_from_nir.cpp mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/nouveau/codegen/nv50_ir_from_nir.cpp
--- mesa-23.1.3/src/nouveau/codegen/nv50_ir_from_nir.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/nouveau/codegen/nv50_ir_from_nir.cpp	2023-07-18 23:48:05.000000000 +0200
@@ -2723,7 +2723,13 @@ Converter::visit(nir_alu_instr *insn)
       i->sType = sTypes[0];
       break;
    }
-   case nir_op_mov:
+   case nir_op_mov: {
+      LValues &newDefs = convert(&insn->dest);
+      for (LValues::size_type c = 0u; c < newDefs.size(); ++c) {
+         mkMov(newDefs[c], getSrc(&insn->src[0], c), dType);
+      }
+      break;
+   }
    case nir_op_vec2:
    case nir_op_vec3:
    case nir_op_vec4:
diff -Npur mesa-23.1.3/src/panfrost/ci/panfrost-t860-fails.txt mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/panfrost/ci/panfrost-t860-fails.txt
--- mesa-23.1.3/src/panfrost/ci/panfrost-t860-fails.txt	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/panfrost/ci/panfrost-t860-fails.txt	2023-07-18 23:48:05.000000000 +0200
@@ -89,4 +89,3 @@ x11-dEQP-EGL.functional.create_context_e
 x11-dEQP-EGL.functional.create_context_ext.robust_gl_31.rgba8888_no_depth_no_stencil,Fail
 
 wayland-dEQP-EGL.functional.wide_color.window_888_colorspace_default,Fail
-wayland-dEQP-EGL.functional.wide_color.window_fp16_default_colorspace,Fail
diff -Npur mesa-23.1.3/src/panfrost/midgard/midgard_ra.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/panfrost/midgard/midgard_ra.c
--- mesa-23.1.3/src/panfrost/midgard/midgard_ra.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/panfrost/midgard/midgard_ra.c	2023-07-18 23:48:05.000000000 +0200
@@ -519,7 +519,7 @@ allocate_registers(compiler_context *ctx
    int work_count = max_work_registers(ctx);
 
    /* No register allocation to do with no SSA */
-
+   mir_compute_temp_count(ctx);
    if (!ctx->temp_count)
       return NULL;
 
diff -Npur mesa-23.1.3/src/panfrost/midgard/mir.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/panfrost/midgard/mir.c
--- mesa-23.1.3/src/panfrost/midgard/mir.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/panfrost/midgard/mir.c	2023-07-18 23:48:05.000000000 +0200
@@ -484,15 +484,18 @@ mir_flip(midgard_instruction *ins)
 void
 mir_compute_temp_count(compiler_context *ctx)
 {
-   if (ctx->temp_count)
-      return;
-
-   unsigned max_dest = 0;
+   unsigned max_index = 0;
 
    mir_foreach_instr_global(ctx, ins) {
       if (ins->dest < SSA_FIXED_MINIMUM)
-         max_dest = MAX2(max_dest, ins->dest + 1);
+         max_index = MAX2(max_index, ins->dest + 1);
    }
 
-   ctx->temp_count = max_dest;
+   if (ctx->blend_input != ~0)
+      max_index = MAX2(max_index, ctx->blend_input + 1);
+
+   if (ctx->blend_src1 != ~0)
+      max_index = MAX2(max_index, ctx->blend_src1 + 1);
+
+   ctx->temp_count = max_index;
 }
diff -Npur mesa-23.1.3/src/util/disk_cache_os.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/util/disk_cache_os.c
--- mesa-23.1.3/src/util/disk_cache_os.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/util/disk_cache_os.c	2023-07-18 23:48:05.000000000 +0200
@@ -124,7 +124,7 @@ mkdir_if_needed(const char *path)
       }
    }
 
-   int ret = mkdir(path, 0755);
+   int ret = mkdir(path, 0700);
    if (ret == 0 || (ret == -1 && errno == EEXIST))
      return 0;
 
diff -Npur mesa-23.1.3/src/util/u_queue.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/util/u_queue.c
--- mesa-23.1.3/src/util/u_queue.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/util/u_queue.c	2023-07-18 23:48:05.000000000 +0200
@@ -45,7 +45,7 @@
 
 static void
 util_queue_kill_threads(struct util_queue *queue, unsigned keep_num_threads,
-                        bool finish_locked);
+                        bool locked);
 
 /****************************************************************************
  * Wait for all queues to assert idle when exit() is called.
@@ -363,22 +363,27 @@ util_queue_create_thread(struct util_que
 }
 
 void
-util_queue_adjust_num_threads(struct util_queue *queue, unsigned num_threads)
+util_queue_adjust_num_threads(struct util_queue *queue, unsigned num_threads,
+                              bool locked)
 {
    num_threads = MIN2(num_threads, queue->max_threads);
    num_threads = MAX2(num_threads, 1);
 
-   simple_mtx_lock(&queue->finish_lock);
+   if (!locked)
+      mtx_lock(&queue->lock);
+
    unsigned old_num_threads = queue->num_threads;
 
    if (num_threads == old_num_threads) {
-      simple_mtx_unlock(&queue->finish_lock);
+      if (!locked)
+         mtx_unlock(&queue->lock);
       return;
    }
 
    if (num_threads < old_num_threads) {
       util_queue_kill_threads(queue, num_threads, true);
-      simple_mtx_unlock(&queue->finish_lock);
+      if (!locked)
+         mtx_unlock(&queue->lock);
       return;
    }
 
@@ -394,7 +399,9 @@ util_queue_adjust_num_threads(struct uti
          break;
       }
    }
-   simple_mtx_unlock(&queue->finish_lock);
+
+   if (!locked)
+      mtx_unlock(&queue->lock);
 }
 
 bool
@@ -442,7 +449,6 @@ util_queue_init(struct util_queue *queue
    queue->global_data = global_data;
 
    (void) mtx_init(&queue->lock, mtx_plain);
-   (void) simple_mtx_init(&queue->finish_lock, mtx_plain);
 
    queue->num_queued = 0;
    cnd_init(&queue->has_queued_cond);
@@ -490,33 +496,37 @@ fail:
 
 static void
 util_queue_kill_threads(struct util_queue *queue, unsigned keep_num_threads,
-                        bool finish_locked)
+                        bool locked)
 {
-   unsigned i;
-
    /* Signal all threads to terminate. */
-   if (!finish_locked)
-      simple_mtx_lock(&queue->finish_lock);
+   if (!locked)
+      mtx_lock(&queue->lock);
 
    if (keep_num_threads >= queue->num_threads) {
-      simple_mtx_unlock(&queue->finish_lock);
+      if (!locked)
+         mtx_unlock(&queue->lock);
       return;
    }
 
-   mtx_lock(&queue->lock);
    unsigned old_num_threads = queue->num_threads;
    /* Setting num_threads is what causes the threads to terminate.
     * Then cnd_broadcast wakes them up and they will exit their function.
     */
    queue->num_threads = keep_num_threads;
    cnd_broadcast(&queue->has_queued_cond);
-   mtx_unlock(&queue->lock);
 
-   for (i = keep_num_threads; i < old_num_threads; i++)
-      thrd_join(queue->threads[i], NULL);
-
-   if (!finish_locked)
-      simple_mtx_unlock(&queue->finish_lock);
+   /* Wait for threads to terminate. */
+   if (keep_num_threads < old_num_threads) {
+      /* We need to unlock the mutex to allow threads to terminate. */
+      mtx_unlock(&queue->lock);
+      for (unsigned i = keep_num_threads; i < old_num_threads; i++)
+         thrd_join(queue->threads[i], NULL);
+      if (locked)
+         mtx_lock(&queue->lock);
+   } else {
+      if (!locked)
+         mtx_unlock(&queue->lock);
+   }
 }
 
 static void
@@ -538,25 +548,27 @@ util_queue_destroy(struct util_queue *qu
 
    cnd_destroy(&queue->has_space_cond);
    cnd_destroy(&queue->has_queued_cond);
-   simple_mtx_destroy(&queue->finish_lock);
    mtx_destroy(&queue->lock);
    free(queue->jobs);
    free(queue->threads);
 }
 
-void
-util_queue_add_job(struct util_queue *queue,
-                   void *job,
-                   struct util_queue_fence *fence,
-                   util_queue_execute_func execute,
-                   util_queue_execute_func cleanup,
-                   const size_t job_size)
+static void
+util_queue_add_job_locked(struct util_queue *queue,
+                          void *job,
+                          struct util_queue_fence *fence,
+                          util_queue_execute_func execute,
+                          util_queue_execute_func cleanup,
+                          const size_t job_size,
+                          bool locked)
 {
    struct util_queue_job *ptr;
 
-   mtx_lock(&queue->lock);
+   if (!locked)
+      mtx_lock(&queue->lock);
    if (queue->num_threads == 0) {
-      mtx_unlock(&queue->lock);
+      if (!locked)
+         mtx_unlock(&queue->lock);
       /* well no good option here, but any leaks will be
        * short-lived as things are shutting down..
        */
@@ -573,7 +585,7 @@ util_queue_add_job(struct util_queue *qu
        queue->flags & UTIL_QUEUE_INIT_SCALE_THREADS &&
        execute != util_queue_finish_execute &&
        queue->num_threads < queue->max_threads) {
-      util_queue_adjust_num_threads(queue, queue->num_threads + 1);
+      util_queue_adjust_num_threads(queue, queue->num_threads + 1, true);
    }
 
    if (queue->num_queued == queue->max_jobs) {
@@ -625,7 +637,20 @@ util_queue_add_job(struct util_queue *qu
 
    queue->num_queued++;
    cnd_signal(&queue->has_queued_cond);
-   mtx_unlock(&queue->lock);
+   if (!locked)
+      mtx_unlock(&queue->lock);
+}
+
+void
+util_queue_add_job(struct util_queue *queue,
+                   void *job,
+                   struct util_queue_fence *fence,
+                   util_queue_execute_func execute,
+                   util_queue_execute_func cleanup,
+                   const size_t job_size)
+{
+   util_queue_add_job_locked(queue, job, fence, execute, cleanup, job_size,
+                             false);
 }
 
 /**
@@ -680,28 +705,38 @@ util_queue_finish(struct util_queue *que
     * a deadlock would happen, because 1 barrier requires that all threads
     * wait for it exclusively.
     */
-   simple_mtx_lock(&queue->finish_lock);
+   mtx_lock(&queue->lock);
 
    /* The number of threads can be changed to 0, e.g. by the atexit handler. */
    if (!queue->num_threads) {
-      simple_mtx_unlock(&queue->finish_lock);
+      mtx_unlock(&queue->lock);
       return;
    }
 
+   /* We need to disable adding new threads in util_queue_add_job because
+    * the finish operation requires a fixed number of threads.
+    *
+    * Also note that util_queue_add_job can unlock the mutex if there is not
+    * enough space in the queue and wait for space.
+    */
+   unsigned saved_flags = queue->flags;
+   queue->flags &= ~UTIL_QUEUE_INIT_SCALE_THREADS;
+
    fences = malloc(queue->num_threads * sizeof(*fences));
    util_barrier_init(&barrier, queue->num_threads);
 
    for (unsigned i = 0; i < queue->num_threads; ++i) {
       util_queue_fence_init(&fences[i]);
-      util_queue_add_job(queue, &barrier, &fences[i],
-                         util_queue_finish_execute, NULL, 0);
+      util_queue_add_job_locked(queue, &barrier, &fences[i],
+                                util_queue_finish_execute, NULL, 0, true);
    }
+   queue->flags = saved_flags;
+   mtx_unlock(&queue->lock);
 
    for (unsigned i = 0; i < queue->num_threads; ++i) {
       util_queue_fence_wait(&fences[i]);
       util_queue_fence_destroy(&fences[i]);
    }
-   simple_mtx_unlock(&queue->finish_lock);
 
    free(fences);
 }
diff -Npur mesa-23.1.3/src/util/u_queue.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/util/u_queue.h
--- mesa-23.1.3/src/util/u_queue.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/util/u_queue.h	2023-07-18 23:48:05.000000000 +0200
@@ -205,7 +205,6 @@ struct util_queue_job {
 /* Put this into your context. */
 struct util_queue {
    char name[14]; /* 13 characters = the thread name without the index */
-   simple_mtx_t finish_lock; /* for util_queue_finish and protects threads/num_threads */
    mtx_t lock;
    cnd_t has_queued_cond;
    cnd_t has_space_cond;
@@ -249,7 +248,8 @@ void util_queue_finish(struct util_queue
  * and it can't be less than 1.
  */
 void
-util_queue_adjust_num_threads(struct util_queue *queue, unsigned num_threads);
+util_queue_adjust_num_threads(struct util_queue *queue, unsigned num_threads,
+                              bool locked);
 
 int64_t util_queue_get_thread_time_nano(struct util_queue *queue,
                                         unsigned thread_index);
diff -Npur mesa-23.1.3/src/virtio/vulkan/vn_command_buffer.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_command_buffer.c
--- mesa-23.1.3/src/virtio/vulkan/vn_command_buffer.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_command_buffer.c	2023-07-18 23:48:05.000000000 +0200
@@ -638,6 +638,13 @@ vn_DestroyCommandPool(VkDevice device,
                             &pool->command_buffers, head) {
       vn_cs_encoder_fini(&cmd->cs);
       vn_object_base_fini(&cmd->base);
+
+      if (cmd->builder.present_src_images)
+         vk_free(&cmd->allocator, cmd->builder.present_src_images);
+
+      if (cmd->builder.tmp.data)
+         vk_free(&cmd->allocator, cmd->builder.tmp.data);
+
       vk_free(alloc, cmd);
    }
 
@@ -649,6 +656,11 @@ static void
 vn_cmd_reset(struct vn_command_buffer *cmd)
 {
    vn_cs_encoder_reset(&cmd->cs);
+   if (cmd->builder.present_src_images) {
+      vk_free(&cmd->allocator, cmd->builder.present_src_images);
+      cmd->builder.present_src_images = NULL;
+   }
+
    cmd->state = VN_COMMAND_BUFFER_STATE_INITIAL;
    cmd->draw_cmd_batched = 0;
 }
@@ -760,6 +772,9 @@ vn_FreeCommandBuffers(VkDevice device,
       if (cmd->builder.tmp.data)
          vk_free(alloc, cmd->builder.tmp.data);
 
+      if (cmd->builder.present_src_images)
+         vk_free(&cmd->allocator, cmd->builder.present_src_images);
+
       vn_cs_encoder_fini(&cmd->cs);
       list_del(&cmd->head);
 
diff -Npur mesa-23.1.3/src/virtio/vulkan/vn_feedback.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_feedback.c
--- mesa-23.1.3/src/virtio/vulkan/vn_feedback.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_feedback.c	2023-07-18 23:48:05.000000000 +0200
@@ -141,6 +141,13 @@ vn_feedback_buffer_destroy(struct vn_dev
    vk_free(alloc, feedback_buf);
 }
 
+static inline uint32_t
+vn_get_feedback_buffer_alignment(struct vn_feedback_buffer *feedback_buf)
+{
+   struct vn_buffer *buf = vn_buffer_from_handle(feedback_buf->buffer);
+   return buf->requirements.memory.memoryRequirements.alignment;
+}
+
 static VkResult
 vn_feedback_pool_grow_locked(struct vn_feedback_pool *pool)
 {
@@ -154,6 +161,7 @@ vn_feedback_pool_grow_locked(struct vn_f
       return result;
 
    pool->used = 0;
+   pool->alignment = vn_get_feedback_buffer_alignment(feedback_buf);
 
    list_add(&feedback_buf->head, &pool->feedback_buffers);
 
@@ -172,6 +180,7 @@ vn_feedback_pool_init(struct vn_device *
    pool->alloc = alloc;
    pool->size = size;
    pool->used = size;
+   pool->alignment = 1;
    list_inithead(&pool->feedback_buffers);
    list_inithead(&pool->free_slots);
 
@@ -198,18 +207,20 @@ vn_feedback_pool_alloc_locked(struct vn_
                               uint32_t *out_offset)
 {
    VN_TRACE_FUNC();
-   const uint32_t aligned_size = align(size, 4);
 
-   if (unlikely(aligned_size > pool->size - pool->used)) {
+   /* Default values of pool->used and pool->alignment are used to trigger the
+    * initial pool grow, and will be properly initialized after that.
+    */
+   if (unlikely(align(size, pool->alignment) > pool->size - pool->used)) {
       VkResult result = vn_feedback_pool_grow_locked(pool);
       if (result != VK_SUCCESS)
          return NULL;
 
-      assert(aligned_size <= pool->size - pool->used);
+      assert(align(size, pool->alignment) <= pool->size - pool->used);
    }
 
    *out_offset = pool->used;
-   pool->used += aligned_size;
+   pool->used += align(size, pool->alignment);
 
    return list_first_entry(&pool->feedback_buffers, struct vn_feedback_buffer,
                            head);
diff -Npur mesa-23.1.3/src/virtio/vulkan/vn_feedback.h mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_feedback.h
--- mesa-23.1.3/src/virtio/vulkan/vn_feedback.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_feedback.h	2023-07-18 23:48:05.000000000 +0200
@@ -19,6 +19,8 @@ struct vn_feedback_pool {
    uint32_t size;
    /* size in bytes used of the active feedback buffer */
    uint32_t used;
+   /* alignment in bytes for slot suballocation from the feedback buffer */
+   uint32_t alignment;
 
    /* first entry is the active feedback buffer */
    struct list_head feedback_buffers;
diff -Npur mesa-23.1.3/src/virtio/vulkan/vn_pipeline.c mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_pipeline.c
--- mesa-23.1.3/src/virtio/vulkan/vn_pipeline.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-e2406205504bb728aec1a50692846c73c87dfac8/src/virtio/vulkan/vn_pipeline.c	2023-07-18 23:48:05.000000000 +0200
@@ -126,11 +126,22 @@ vn_CreatePipelineLayout(VkDevice device,
    for (uint32_t i = 0; i < pCreateInfo->setLayoutCount; i++) {
       struct vn_descriptor_set_layout *descriptor_set_layout =
          vn_descriptor_set_layout_from_handle(pCreateInfo->pSetLayouts[i]);
-      if (descriptor_set_layout->is_push_descriptor) {
+
+      /* Avoid null derefs. pSetLayouts may contain VK_NULL_HANDLE.
+       *
+       * From the Vulkan 1.3.254 spec:
+       *    VUID-VkPipelineLayoutCreateInfo-pSetLayouts-parameter
+       *
+       *    If setLayoutCount is not 0, pSetLayouts must be a valid pointer to
+       *    an array of setLayoutCount valid or VK_NULL_HANDLE
+       *    VkDescriptorSetLayout handles
+       */
+      if (descriptor_set_layout &&
+          descriptor_set_layout->is_push_descriptor) {
          layout->push_descriptor_set_layout =
             vn_descriptor_set_layout_ref(dev, descriptor_set_layout);
+         break;
       }
-      break;
    }
 
    layout->has_push_constant_ranges = pCreateInfo->pPushConstantRanges > 0;
