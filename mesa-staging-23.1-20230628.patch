diff -Npur mesa-23.1.3/docs/relnotes/23.1.3.rst mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/docs/relnotes/23.1.3.rst
--- mesa-23.1.3/docs/relnotes/23.1.3.rst	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/docs/relnotes/23.1.3.rst	2023-06-28 19:30:05.000000000 +0200
@@ -19,7 +19,7 @@ SHA256 checksum
 
 ::
 
-    TBD.
+    2f6d7381bc10fbd2d6263ad1022785b8b511046c1a904162f8f7da18eea8aed9  mesa-23.1.3.tar.xz
 
 
 New features
diff -Npur mesa-23.1.3/.pick_status.json mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/.pick_status.json
--- mesa-23.1.3/.pick_status.json	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/.pick_status.json	2023-06-28 19:30:05.000000000 +0200
@@ -1,5 +1,2903 @@
 [
     {
+        "sha": "e67337bebf623e67d119f48c2d24f3b831482ede",
+        "description": "vulkan/wsi: check for dri3 buffer initialization failure",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0e51f2de88717e6c4ad0cfbbcff85fed7c3e7ef0",
+        "description": "freedreno/registers: add bitfield for DSI wide bus enablement",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bbcda63564478533ce33a924421a75ab1d042f6e",
+        "description": "draw/i915: move hwfmt array to i915 specific struct",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3f7ea95bc9ed21588876ff166d4bfa94bf0c4230",
+        "description": "radv: inline more values in radv_emit_fb_ds_state()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5010ab8fffc66337a16c7120bcf5196565a5251a",
+        "description": "radv: stop emitting TILE_SURFACE_ENABLE for the ZRANGE_PRECISION workaround",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f8a204738779bcdbd6b02d9f8ebd7962a74cae16",
+        "description": "d3d12: Fixes unused-variable compile error",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4096bd8d8593480303e3cdd8a83b00ae71f740c1",
+        "description": "pvr: Setup ZLS depth and stencil load/store separately",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "59518b6dc637cab22838ef8d67d541dc3ebf30b9",
+        "description": "v3dv: add a linear images to buffer copy codepath",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "74fd2b9dd7f64850e7fcceea9da634ecb24f5117",
+        "description": "v3dv: refactor copy_image_to_buffer_blit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b8c6cedcf8013af097ea6ecd0a5182c55901770",
+        "description": "radv: allow NV_device_generated_commands with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "277b2afd7081fd41fe08db6890f58f2ac1fbe42e",
+        "description": "radv/amdgpu: add support for executing DGC cmdbuf with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "82c60b41e92e79a2a878a791c5fa7686b8fb6c47",
+        "description": "radv/amdgpu: add more small helpers for managing CS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "86785130d18a1e6c603dfbf57559aa2a8a748295",
+        "description": "CI/windows: Update headers and Agility redist to 1.711.3-preview",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "64da736286d0f1cba47ead6d93bb2e7766ef0ad4",
+        "description": "d3d12: AV1 Encode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "314871d57bd24318aa1fa823177206ce04c98aa0",
+        "description": "frontends/va: Extend AV1 Encode params",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "190b1fdc643b82e25347926717712c92cdfe0fc1",
+        "description": "nir: Convert to nir_foreach_function_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "19daa9283c146a8c50fdc0250e73a0bc366c826b",
+        "description": "nir: Add nir_foreach_function_impl helper",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8044110bf627c868cae49fc56505325c85b41bc",
+        "description": "docs/rusticl: add Enabling section",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e2263a645c486a63c72c34864121c713aec249fb",
+        "description": "docs/rusticl: mark building section as such",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7f0ed719aacd56a1ab08ad7bda9063d42b20a9ed",
+        "description": "intel/devinfo/i915: Set has_set_pat_uapi for MTL+",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "463bf134115909d11dc1d9dd440f59fcea93bb7e",
+        "description": "anv: Use set PAT extension on BO creation for MTL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "45278d1988a2fcb6996028f0d9bbf18c3c012ba6",
+        "description": "iris: Use set PAT extension on BO creation for MTL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b66678fb2e5e4e0c4681d7315a7a8133dafb0970",
+        "description": "drm-uapi/i915_drm.h: Update from drm-next (2023-06-09)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fce905f613f13c2419ba9e496ea08f91077692b5",
+        "description": "anv: Swap ordering of memory types on non-LLC platforms to work around application bugs.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79c879d2354f157dec823c317a733261b9f6a8f0",
+        "description": "iris: Map aux-map with WC on MTL+ (has_set_pat_uapi)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "37fc25aa74263e02f0d1e09ddd7f13dd13071442",
+        "description": "iris/bufmgr: Skip bucket allocation if not using writeback cache PAT index",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5e697abc588329c7423de73f8ac184bdf519fbfa",
+        "description": "iris/bufmgr: Add iris_pat_index_for_bo_flags()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b602c14fc529843a6bae4dc2e739bce354554195",
+        "description": "intel/devinfo: Define PAT indices used on MTL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e896b81322b85aa648591cf8e3003f9a02b89ec4",
+        "description": "intel/devinfo: Add has_set_pat_uapi",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "758bf5f7648320eb58e80854074f29088c788e73",
+        "description": "iris: Allocate coherent buffers for resources flagged as persistent/coherent",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b707547535602e2e507e8b9015c07ecc19048fe",
+        "description": "intel/dev: update mesa_defs.json from defect database",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f0569cdba013cf048129b76b448ba6f241972616",
+        "description": "dzn: VK_EXT_external_memory_host",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a831ee51ae6e522295c68a9af7659c9edf9258a8",
+        "description": "anv: Flush untyped dataport cache DC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "215c6c6ce4c82c897ef87d06fb685ed01ee5b8ab",
+        "description": "anv: Flush untyped dataport cache when HDC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c5ca2bed51302ac72f5524afe5403e85421c259f",
+        "description": "anv: Clear untyped dataport cache flush bit if not in GPGPU mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1d1f5f14057fb8c1d2a4eef4dbae8b8c37d84635",
+        "description": "iris: Flush untyped dataport cache DC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "46e1a2b31e04ebd02c3471308521f39335c0c173",
+        "description": "iris: Flush untyped dataport cache when HDC flush is requested on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a4f1c926888aec08ed1de22ae7a9a53d33d7e0b5",
+        "description": "ci: Testing -D shared-glapi=disabled with debian-clang-release",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d5a09bf5944b7762f823cc93debee34bc0afb80b",
+        "description": "mapi: Hide OpenGL functions to be exported when shared-glapi is disabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a8b832449466411e87cab6b9b6e9b4a311498d4c",
+        "description": "intel/aubinator_error_decode: add ccs support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "16c12a9c3b4587d1afe21443923ea17c756e0b9f",
+        "description": "genxml: enable decoding on compute engine",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79d935ceaf63da2fc18e08df0808f858b5eb7471",
+        "description": "radv: use nir_opt_intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8649bde78fcbc3fb7c7284bdbe44ffdc2eb21e19",
+        "description": "nir/opt_intrinsic: optimize quad vote",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "58f8e0e2a0cb033a12ec68065f49e97aca383243",
+        "description": "nir,aco: add INCLUDE_HELPERS index to reduce intrinsic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c5fc89019b5c2b5f52e3e74d0e786fd54c312127",
+        "description": "aco: include helpers in emit_uniform_{reduce,scan}",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "48674a179985d05e91a1c7ca5783058ae9d113b1",
+        "description": "nir/peephole_select: allow some invocation broadcast intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "069cca9d66d1c4fb933c8d82b9d49a831fb43285",
+        "description": "treewide: Remove unused builders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "173b9ee69a55d8ce67d2b1ac588b6121f2f742bf",
+        "description": "treewide: Use nir_builder_create more",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "815efcdf7e2b291532b0e08ba4144ff01f21b418",
+        "description": "nir: Use nir_builder_create",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e5410f9b00e60fb47e7737f7b5357398c3b2f7bc",
+        "description": "nir: Add nir_builder_create returning nir_builder",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ddb7cf7a25ffc8473de1b48452c96b6d00843e91",
+        "description": "nir/builder_opcodes: Remove nir_build_ prefixed helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "400645a5656315d3e48a0bb1c4e9cef12cd7ece2",
+        "description": "nir: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "083f7dba5bb5e52af632a6297766dcc955a7e2dc",
+        "description": "vtn: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "707f92f248bcacfe26bed8ddb6345047c8eb5771",
+        "description": "freedreno: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8f3db26d14d970164811b4dd559e2e3b78a602e6",
+        "description": "intel: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "afd81d5ace4565270dab68198b76c7a31038bd20",
+        "description": "microsoft: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "17f3f5fa851920970173964fb906a9d12ed55149",
+        "description": "amd: Use nir_ instead of nir_build_ helpers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c24b7533781e6c75135230ea717ee2596bb93f14",
+        "description": "nir/lower_blend: Optimize masked out RTs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d4424950ace16da00cc660e0c4106d19e169b04b",
+        "description": "asahi: Use txf for background program",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05adeb850be3129211b79ab06d385d9e59f02636",
+        "description": "agx: Use nir_lower_frag_coord_to_pixel_coord",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "abe5b06a99ef47895e86d5c5fed8545a17fd9720",
+        "description": "pan/bi: Use lower_frag_coord_to_pixel_coord",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f318cab4a1661d08d5596ff72401fe669ff3b04d",
+        "description": "nir: Add lower_frag_coord_to_pixel_coord pass",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c7067660b286636d611a854cb6444c71f0a4aec9",
+        "description": "nir: Add pixel_coord, frag_coord_zw intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "137e8d1cc481519364e2b223c06b74627f600ffa",
+        "description": "ci: add a test-dozen-deqp flake",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9b00867327c2b266fcdebcef8bc7e7497eaab06b",
+        "description": "radv/amdgpu: workaround a kernel bug when replacing sparse mappings",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "51caece74cd54e99a5f89521e8feacd894781ca2",
+        "description": "radv/amdgpu: skip adding per VM BOs for sparse during CS BO list build",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "035e55f5aca9ef2da59bc834c2c0b8c18527e2e2",
+        "description": "mapi: Now _glapi_get_dispatch_table_size always equal to sizeof(struct _glapi_table) / sizeof(void *)",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e72a879de075b21fc44a33a9d95cc4654c35bf50",
+        "description": "mapi: Fixes compile error with build option \"-D shared-glapi=disabled\"",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "398a8d43dc93beed68099e466a46426c927666a1"
+    },
+    {
+        "sha": "d53c7513285cdcd9b5f89bc5fc801c7777b36c92",
+        "description": "pvr: Change winsys flag defines to bitfields",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4e6444af0befbae8c4aac4fe24c1cc3fe66eec4d",
+        "description": "pvr: Fix missing BITFIELD_BIT for winsys frag job flag",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "739ba18c79908f96081935d5536cc88b0e2e04d7",
+        "description": "util: include \"util/compiler.h\" instead of \"pipe/p_compiler.h\"",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0d82c0a026b1a6828d18fb72d361d34d60fae68f",
+        "description": "util: Merge p_compiler.h into src/util/compiler.h",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b7b4e534043a14df2a3974d7c3eed1de339c71b0",
+        "description": "treewide: style fixes after replace the usage of ubyte/ushort with uint8_t/uint16_t",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e53915828f9b2d3f69c04d467a008f25a2904951",
+        "description": "treewide: Replace the usage of ubyte/ushort with uint8_t/uint16_t",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05b840521ab3e621d1664cd91d839914ddabd0db",
+        "description": "treewide: Replace the usage of TRUE/FALSE with true/false",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "49e84fdad2b453460100ea9253015eec437f5405",
+        "description": "treewide: style fixes after replace usage of boolean to bool",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b45a0bd666f54c3b5497ea0db19b5ed2db7dd02",
+        "description": "treewide: replace usage of boolean to bool",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b65e745168df47fad8dd32d4ec2aced0e002fa2f",
+        "description": "llvmpipe: altivec.h inclusion in -std=c++98..11 causes bool to be redefined",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "07cb3c0e312db8256acbc74579e4ef706be5af2f",
+        "description": "gallium/draw: Replace the usage of ushort to uint16_t in files that can not found by tools",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "542f00b5f1886459e0ca04bbcb7f06fbaa4e4108",
+        "description": "hud: Use bool/true/false to replace boolean/TRUE/FALSE in hud/hud_context.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e5aec68ce790b2dca23333989ce5cde61685a415",
+        "description": "aux/indices: use stdint.h types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "96c99bc2d9503b5c64f2a1dbc5333141848097c9",
+        "description": "etnaviv: linker: add fallback lookup to VARYING_SLOT_BFC[n]",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9e60699596080fbcbb91dc6b0306d12810e07ec",
+        "description": "etnaviv: nir: call nir_remove_dead_variables(..) before linking setup",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5f9ac2011652b6864f285fd57ee9bf5ae6f4cab5",
+        "description": "ir3/analyze_ubo_ranges: Move IR3_DBG_NOUBOOPT check",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "03ad1d5ab6fa4290c28a0bfe04ca8f328a82fac1",
+        "description": "v3dv: don't use the TLB path if we might be copying partial tiles",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cec030a2332a4d9f18d8ef80912330fc7742403e",
+        "description": "v3dv: fix slice size for miplevels >= 2",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "1cb2d2a5eedd2962297e877850242260c93dd804"
+    },
+    {
+        "sha": "107d29765b57fb4e6504127759877b45e8c4b7ae",
+        "description": "docs: Update envvars used for tracing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b0beca8c7a4dbc13f4462e67db54603fff5aaf21",
+        "description": "vulkan/rmv,radv: Use common trace trigger",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e0641ed59f1056a5797e4642481bd17d8bd6f569",
+        "description": "radv/rgp: Use common trace trigger",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3e11640127a268271f62e5e7c061712f685632af",
+        "description": "radv/rra: Use common trace trigger",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "291fa055453e2832423e6f82914131fa2c748abc",
+        "description": "vulkan/wsi/x11: Capture traces using a hotkey",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "15d6618a1286cb8c0e091b2a734cf7ee5d939236",
+        "description": "radv: Add radv_trace_mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "70489edce48f90bf86c105fa63a64757a04a9ea4",
+        "description": "vulkan: Common trace capturing infrastructure",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3b83a60c955ca67759d266f18247c476817e75a5",
+        "description": "meson: Add a xcb-keysyms dependency",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a7b1a4f7102e864284e576000a7317171d98e41",
+        "description": "radv: Call radv_pipeline_init_scratch per shader",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "957d7644aa47478024315a20a31a91b32d3e65d6",
+        "description": "intel/ds: Track CCS cache flush bit",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5a272b5ed81e0daae7d2fc3d5ffe9316da00501c",
+        "description": "iris: implement recommended flush/wait of AUX-TT invalidation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6be75d8aa2b2e1696ac7fdc5275c799f1eb3850e",
+        "description": "iris: Fix AUX-TT invalidation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "26a7e997fb141cd15788af64eb228dc138cec2a7",
+        "description": "iris: Add CCS cache flush bits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e88eac5b6cac01e986ee75f572dde5c8512af37e",
+        "description": "anv: implement recommended flush/wait of AUX-TT invalidation on compute",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "012ff791fb842912c4b96d9ca730878abcddad31",
+        "description": "anv: Fix AUX-TT invalidation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0b42a6c3b57b3ffede80e25376e0c0a0a6239b30",
+        "description": "anv: Add CCS cache flush bits to anv_pipe_bits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f5927271301d3f3610efd39f4ee2a2e141d4941c",
+        "description": "intel/genxml: Add Compute/Blitter CCS aux invalidation register",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "55d9959e6743dfc4d3c566d5e39841baa852b3cf",
+        "description": "intel/genxml: Add CCS cache flush field to PIPE_CONTROL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "99502b42b4d09195ba404173baa92d12216b6a96",
+        "description": "vc4/v3d/ci: update expected results",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9e6d35f65c6c5913d54ba5306af391a8701a68a",
+        "description": "radv: Enable VK_EXT_fragment_shader_interlock",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8a8f2edd505da5a8b58e04822b77d89db04c8df6",
+        "description": "zink/ci: Add broken fragment shader interlock test to RADV flakes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ec0778f59ee4a57bbe1e782e9fff4c1aabe966b3",
+        "description": "radv: Disable VRS forcing with Primitive Ordered Pixel Shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "787a5532625004ec83c6d5ee4ed10d7de9d1392f",
+        "description": "radv: Apply the POPS missed overlap hardware bug workaround",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "647952c8e31babd980f6feaaf2ee5cfe70ec72e3",
+        "description": "ac/gpu_info: Check whether the device has the POPS missed overlap bug",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3831860b2019941b9449095777738cd8f959a49c",
+        "description": "radv: Handle Primitive Ordered Pixel Shading in DB_SHADER_CONTROL",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "37e325fe15b3e5f42bcc7e9a5f904ce54e90e9df",
+        "description": "radv: Enable the null export workaround with POPS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7eabc5d6fc08b0be9949289ba4e0227f3d33b74e",
+        "description": "radv: Enable POPS collision wave ID shader argument",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "50e680d05a97cdf27989ac7fecf8f3584fe02376",
+        "description": "radv: Declare POPS collision wave ID shader argument",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1812819e6693e0ca04af27bad0d0b350ecad3e9d",
+        "description": "radv: Ensure 1x1 shading rate on GFX10.3 with interlock execution mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "08c582ea6968b81aae08352188fb1f1d0d13d04d",
+        "description": "radv: Detect the use of Primitive Ordered Pixel Shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5449a2c98840254f07e46da2553a503cbd3dc92e",
+        "description": "radv: Remove unconditional POPS_DRAIN_PS_ON_OVERLAP setting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "266ad83acd164a7dae5b29a727fd223381d60d20",
+        "description": "radeonsi: Remove unconditional POPS_DRAIN_PS_ON_OVERLAP setting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dda425df098d1ef2c00532fafedcbcf8e80bbdd7",
+        "description": "aco: Implement fragment shader interlock intrinsics",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e0f4b52559942bb5a1d1b65e5544a2ec2265d227",
+        "description": "aco: Add Primitive Ordered Pixel Shading waitcnt rules",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a87628cd08860ae8e1e368c50e36f4bf04942531",
+        "description": "aco: Send MSG_ORDERED_PS_DONE where necessary",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2194e8bd82c1bcbcc2002e7d8a03e831c31d870a",
+        "description": "aco: Add Primitive Ordered Pixel Shading scheduling rules",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6082e126ebf157adfbc4b4295ff59e6da6a99a8e",
+        "description": "aco: Skip waitcnt insertion in the discard early exit block",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f8e744f07f1aa5dd2463b5912dc0a6eb83da4d8b",
+        "description": "aco: Add Primitive Ordered Pixel Shading pseudo-instructions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "94d2888da225c4419dc65cbcf5755aaf3eb21caf",
+        "description": "aco: Add s_wait_event argument bit definitions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b892f31e4d728acb87f48d27dce02e2860d75945",
+        "description": "ac: Define POPS collision wave ID argument SGPR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "308a5ea43afeb2373bd4bb43a59e3ce74e264c3a",
+        "description": "aco: Support pops_exiting_wave_id PhysReg usage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "90c88f5933ea71e57fd0741a3a733a9a8735295e",
+        "description": "ac/nir: Support Primitive Ordered Pixel Shading in lower_ps",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "365d342ee6e89973e94bb3bef594859bccd1c808",
+        "description": "docs/amd: Document Primitive Ordered Pixel Shading",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fadcd8d371a027e881cc443eabbbda9d5349be03",
+        "description": "gallivm: Use NIR_PASS macros",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6689c678fe50647c5e3f85b9a6d6c4cc640e473d",
+        "description": "nir/lower_locals_to_regs: Add bool bitsize knob",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5c8f21412f240c5197ee12293eedfba7307627e1",
+        "description": "nir/lower_bool_to_int32: Fix progress reporting",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6a29cb2654ff059dcb59e3fcaa0bcc982656609d"
+    },
+    {
+        "sha": "8887be6206586d5fe048489ce7cb8e00cc31a7a0",
+        "description": "rusticl/api: Wire up CL_DEVICE_PROFILING_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1bb523111b839628c623f81a46eaae56d24dc3a9",
+        "description": "rusticl/api: Implement get_{device_and_}host_timer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2a41b1869f142d871a1e60e3171aa5f19106b422",
+        "description": "rusticl/device: Stash timestamp availability",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "748a1b357d1a6b69c8e2000062b0aed9368f5999",
+        "description": "rusticl/screen: Wrap get_timestamp",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9486b9e7857766fe0a5c984bb3320be5060ab7b8",
+        "description": "draw: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "65591a3b25aaf4adda3adbba666414091c792e6a",
+        "description": "draw: match type of pipe_draw_start_count_bias::count",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b108e47091e70c199c9d0c55e52e3a2607fc6d1f",
+        "description": "cso: use unsigned instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fda6cad85eff13d8af667f1d19dd4a97fdc27b60",
+        "description": "draw: use stdint.h types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f4bd2d35cb21fe1d195fb1917a587ba768b4e2ca",
+        "description": "draw: track vertices and vertex_ptr as byte-pointers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed4bda804485515e9f3ddece1b318da8edeff49e",
+        "description": "draw: use enum for primitive-type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1569507e265df05a76e252864c151687e5437093",
+        "description": "draw: use uint32_t instead of uint",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "57abc7d0379199a75e8721845c8dbc689bf0db3f",
+        "description": "draw: use enum for tgsi-semantic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4844809edbeed44337b4557749c881d47ae5b07f",
+        "description": "cso: use enum for render-conditions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "82e2802b7d69c4b64ba40868466aaf23630d949c",
+        "description": "radv/amdgpu: add a helper to get a new IB",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "148f42be1da84075be13f04658ca6cdd8ace13a9",
+        "description": "radv/amdgpu: rename old_ib_buffers to ib_buffers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d74de6506922b71fc2f7435a7e9735e0ab0393c6",
+        "description": "radv/amdgpu: use cs_finalize() when growing a CS",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "437456b47c222270da850362d027822ac3da17dc",
+        "description": "radv/amdgpu: use the array of IB buffers for the chained IB path",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "81e308df72ce6dd7991e6a4dc542bb5848798cb7",
+        "description": "radv/amdgpu: do not set the IB size when ending a CS with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "df0c742543d7fd256690f7757cd0d2fc6d62aeb5",
+        "description": "radv/amdgpu: rework growing a CS with the chained IB path slightly",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c11a62a7b05a6847d2126911cb0b0f127f5bc2ef",
+        "description": "radv/amdgpu: use the correct IB size when growing a CS with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91143f45b85d625261bf6af1dd3546a0f47439ab",
+        "description": "pvr: Advance entry pointer in pvr_setup_vertex_buffers()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bc2828a436ada4b1264cb92fe2d50c8b833d83be",
+        "description": "compiler: Allow the explicit_stride of aoa types to be zero",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9f4299d6b24a206b059782df1cd40d233c49dcbb",
+        "description": "anv: fix to set predicted weight tables correctly.",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "8d519eb5f5947800279e4c02bf7aa79b0b65cd17"
+    },
+    {
+        "sha": "b8dc7675f27a3851403c3306a09b345c6a47aca5",
+        "description": "intel/genxml: changes the type for predicted weight to unsigned.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e2f95ad296d665891cf455030094e1e9d20d4b43",
+        "description": "vulkan/video: keep delta weight and offsets of predicted weight tables in h265 slice parsing",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c421ecea56e3587d197fd860952eaad72f52e202",
+        "description": "vulkan: Update XML and headers to 1.3.255",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "73af0475cbdfa016392edc5f3d42d3b01aaba53c",
+        "description": "vulkan: Add NV suffix to VK_NV_cooperative_matrix feature names",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "07597596588973cea5bfe064ecc4017dd24357be",
+        "description": "rusticl/program: skip linking compiled binaries",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "18f1087a21c738ad1270557c5541fe796262066b",
+        "description": "rusticl: bump bindgen requirement",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5b29463746d559c926cb84b35c749625123dec82",
+        "description": "nir: Add function nir_function_set_impl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9fa38cf142716644cbe8e2ae2fcdea717e45062f",
+        "description": "vtn: Do not assign main_entry_point->impl twice",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0d9f474381b48fa3f0b695ea51298e3efbf86ca1",
+        "description": "draw: Update the comment and function name to match the type",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e7f0dd27107bac50aadef9cb56aa93b332597095",
+        "description": "draw: Replace usage of ubyte/ushort/uint with uint8_t/uint16_t/uint32_t in draw_pt_vsplit.c",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f35ebd221f5d269fdf57da67cd2ea018c87027f9",
+        "description": "draw: Replace usage of boolean/TRUE/FALSE with bool/true/false in draw_pt_vsplit*",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fbe9a7ca3e78b683266dac706d156c110dcefdfc",
+        "description": "rusticl/mesa: create proper build-id hash for the disk cache",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "29b932512a873abb932e2fde99081d705bf9d465",
+        "description": "rusticl/meson: extract common bindgen rust args",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c89637388967d83fa621cc674c414eceb299b776",
+        "description": "rusticl: generate bindings for build-id stuff",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d14af0043217150c299e6a6731caba30795ed1a6",
+        "description": "rusticl: structurize and reorder mesa binding args",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "337908440eefc95abef9fa4464e29d299072df73",
+        "description": "v3dv: replace boolean and uint with bool and size_t",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fa8a2326910f2c2ea2695c147e9170e157d90d45",
+        "description": "docs/coding-style: add pre-commit hook fallback for clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "270d898e754f7ea8e4a55c138f5b59b47219f009",
+        "description": "docs/coding-style: add example emacs config for clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "342196f7b05e8d618ff4119de353eda1292b1d45",
+        "description": "docs/coding-style: add example vim config for clang-format",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "89873e5e5ce98c811968f38eb7d1a7953476fe97",
+        "description": "r300: properly count maximum used register index",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "561cce32f142d65364d9e48c7469ba9e605f5f21",
+        "description": "anv: Only expose video decode bits with KHR_video_decode_queue",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "93614817806b7a58b1dbbd0229d1a9c52df58746"
+    },
+    {
+        "sha": "727335045dd7bba6d835cb0a3b9cad2dfc3171f9",
+        "description": "anv: Pipe anv_physical_device to anv_get_image_format_features2",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "02aaf589083a768d9d1db8500c3b4495ed98df29",
+        "description": "nv50/ir/nir: set numBarriers if we emit an OP_BAR",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "a2d7a4f9788e62270af8c14b2eee5452a1e0945f"
+    },
+    {
+        "sha": "69c452781b32c1e4138c9454ce110e561e7de019",
+        "description": "nvc0: fix printing shaders",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "45d86b419bf681f3c0444a6c44eade4957fe3eee",
+        "description": "rusticl/program: add debugging option to disable SPIR-V validation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2b2a51389009a5a844cd001a4746d4d6e1f8d63a",
+        "description": "rusticl/program: add debugging for OpenCL C compilation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2362fd502bb07fa515518e5d9c783382f8015d3e",
+        "description": "docs: document CLC_DEBUG",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1b3669a1ed320549a09185700e7e56086fc1064a",
+        "description": "intel: Initialize FF_MODE2 on all Gfx12 platforms",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "427fee3507973dee8c85fd684f0a704928c9251c",
+        "description": "intel/gfx12.5: Enable L3 partial write merging for compressible surfaces among other cases.",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d7ec6f172465a25be73bb2b30cf586a88aa4928d",
+        "description": "ci/fastboot: use gzipped Image to avoid compressing on the runner",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7d3c29dc60044ea35141e5f9fcd06c89e17fdb91",
+        "description": "frontends/va: fix some coverity scan reported issues",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "dc93f205c11cb16fab52872c61221992b79cc122",
+        "description": "meson: Explicitly add \"check : false\" to a couple instances of run_command",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d3e5e04a75e90bd321ae6e2b840fc46d08fd666a",
+        "description": "amd/drm-shim: use fixed-width types",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "766535c8671e3b4d6595c8ede233b6316e4518c1",
+        "description": "agx: Implement vector live range splitting",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "72e6b683f37f91c9af4027a5d3f4f8ae7ca9ba3e",
+        "description": "agx/lower_parallel_copy: Lower 64-bit copies",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bfdaab65121a3f5cef8915090a865dab685da23e",
+        "description": "agx: Validate predecessor information",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "923b966775f7994317578237172bc7e246152661",
+        "description": "agx: Add loop header? flag",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a2dbe6b688d5931139012074e17dd93fb0b4e91e",
+        "description": "agx: Recollect stored vectors at their use",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "91d98975a6889ce0f1e2306245356cd3c0a9393a",
+        "description": "agx: Extract coordinate register size calculation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "eef7fff852978f23434bcaf6bc6af1ada215e4ff",
+        "description": "asahi: Pass through surface sample count",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "87bbaf680aa58c9ecef0a368ce2d22c669bb16a4",
+        "description": "asahi: Disable PIPE_CAP_SURFACE_SAMPLE_COUNT",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "af895692b3b52599e456f14e08a3beaa32b5a4c8",
+        "description": "asahi: Revert \"Advertise ARB_texture_barrier\"",
+        "nominated": true,
+        "nomination_type": 2,
+        "resolution": 2,
+        "main_sha": null,
+        "because_sha": "9e67d3f23780a818b9fc764105f39c6d595c6530"
+    },
+    {
+        "sha": "b5fccfa1977cbad1afd6cdfb8836c7bf392244da",
+        "description": "agx: Fix discards",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "baf67144bd1862247042f6f5abca43c32d22f60f",
+        "description": "agx: Update explanation of sample_mask behaviour",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "942c206cd17325a0710dceeb17fa917fb7b6d5e1",
+        "description": "nir: Add discard_agx intrinsic",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0f8864e04713db0000f1f41458737314ddd9f512",
+        "description": "radv: adjust alignment of the preprocess buffer with DGC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "06cdf222a6c3052eed6510d14b962dd8775769d4",
+        "description": "radv: only dirty the active push constant stages with DGC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3b329e195e340b64d090c57a291d7ed9d41686c7",
+        "description": "radv: only dirty the index type when necessary with DGC",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2d97cc89fb621de4cd9b4fdf93ab46fd13a21251",
+        "description": "radv/amdgpu: dump all cs with RADV_DEBUG=noibs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8af705a856793313c6dfcc5d46d7b2e37828c442",
+        "description": "radv/amdgpu: fix dumping cs with RADV_DEBUG=noibs",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "50e6b16855d5f72c3a8e16bc131d6d88b5cddfff"
+    },
+    {
+        "sha": "a1e2e01f62f247ebeae4a4230c49067c431fe5f3",
+        "description": "pvr: Correctly read dynamic state setup during blend constant setup",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "036d3dc0660b3b54d6ee2a833a637d096d279834",
+        "description": "radeonsi: disable H264HIGH10 profile",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ae7721d1637b3e231929bc7bca7ce2b569ae2841",
+        "description": "radv: reserve more space in CS for SQTT",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "7893040f807f2b81d03a6a19c577d6d98bcc116c"
+    },
+    {
+        "sha": "bbdbab15fc45b2cc303c87c2848ecd367d3db6cd",
+        "description": "aco: Drop NIR parallel copy handling",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3b21c59fc3eb9cf1406a6fa8365fca77b17cfeec",
+        "description": "aco: Remove unneeded stage related info fields.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "bc971ba2c7d8cb869f38f069306112bdb75cb7e0",
+        "description": "aco: Use aco_shader_info::hw_stage instead of guessing.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6028c146d54f14277000f98daf94c629a64cb19f",
+        "description": "radv: Set aco_shader_info::hw_stage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "016370b4f912437f2e6129ff46cb9bca59f5d682",
+        "description": "radeonsi: Set aco_shader_info::hw_stage",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0fef6b95caabb03923d68a8cfdceb7f16b07a837",
+        "description": "aco: Add hw_stage field to aco_shader_info.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "05928f42004a136ea951580e77d952149a4035b1",
+        "description": "aco: Use ac_hw_stage instead of aco-specific HWStage.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "cc2307008a345fbbacefcbaa69699c93deaea8fe",
+        "description": "ac: Add ac_hw_stage enum.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "231fa269eac6c6d88a8a6516515681d551854c9f",
+        "description": "treewide: spelling fixes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a13ac83f1b95ba3829f1f39ec932df8ddd8733de",
+        "description": "anv: fix utrace batch allocation",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "b9aa66d5d0a8c166e5b0008337fdaca2b97a37f4"
+    },
+    {
+        "sha": "8e729a2f578a2433a4c0489e7feec665d05bf7bb",
+        "description": "freedreno/decode: Correctly handle chip_id",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3111a70a554ad0f95379ca6686c0e97ec1ffc478",
+        "description": "freedreno,ir3: Don't call fd_dev_64b more than necessary",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "00900b76e0f45a98d073e04fd51cff759fa870a5",
+        "description": "freedreno: Decouple GPU gen from gpu_id/chip_id",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a8d92e25f6cfa45af4bde427f77472469d0cd1b",
+        "description": "freedreno/perfcntrs: Link with libfreedreno_common",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f18afc886a793e53fec8063dc6543b8231ab2f16",
+        "description": "ci: Upref virglrenderer",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "90bc0ccf4ab6974ffc5a95d4071bfbf3ab61c3f0",
+        "description": "virgl/ci: Drop duplicate runs",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b69a1b4153a955eb9991bea0d2595246a7c61c15",
+        "description": "vulkan: Migrate shader module hash to BLAKE3.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e5173e62d719d78cc0f782f013af17381ef52aec",
+        "description": "util/blake3: Add blake3_hash typedef.",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0823ab43c527fab4e1059d2b175422c60628e614",
+        "description": "Revert \"egl: return correct error for EGL_KHR_image_pixmap\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "5db031bf3ea3e37983f3ab17f2b550e1949d95a9"
+    },
+    {
+        "sha": "34163e19f7a64621a7995b92fa2f79a0f933393d",
+        "description": "r600/sfn: Don't clear clear group flag on vec4 that comes from TEX or FETCH",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "f3415cb26a62289fed9cb5f202088168add43cfd"
+    },
+    {
+        "sha": "23d4e21d835975110e96cd7dface422ef043374f",
+        "description": "anv/video: fix to set U/V offset correctly.",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "98c58a16ef1ab2208693505a88e597202cc3c2a1"
+    },
+    {
+        "sha": "d336bc39260efc1e47bd3e96061d78bd4d0ed8e8",
+        "description": "glsl: call nir_opt_find_array_copies() when linking",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "d75a36a9eeb1606fab19362746f9b5d94b98bd3a"
+    },
+    {
+        "sha": "570c263ea3a2032ed4cb263bb092f55d3ab07be7",
+        "description": "nir/load_libclc: run some opt passes for everybody",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3a981acf55570a9b1e023d2c7ef75d499c2c8fbc",
+        "description": "rusticl/device: create helper context before loading libclc",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "98c8d7b7cfbe7dc66a87bbe8fda56d855053d7cd",
+        "description": "venus: Fix detection of push descriptor set",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "91966f2eff17cc7c95ca8a89ac40d5d211e5b407"
+    },
+    {
+        "sha": "f278b30e94ee94fb9d8f4b0c4e93cc42319e4eef",
+        "description": "nir/opt_if: Use block_ends_in_jump",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7ddfc43fdffb4b38f721c7449fd0c9dcf29749b7",
+        "description": "nir: Remove integer and 64-bit modifiers",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a2fc3213f8965b0a9b739eabcf8671c3df14ad5e",
+        "description": "venus: Advertise 1.3 in ICD file",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2f729ff6aaedcc3f4584830c2f88da2402b76ce7",
+        "description": "venus: suballocate feedback slot with feedback buffer alignment",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b2ed33fb4d0a3c78287d58e8edef6f4576dbf274",
+        "description": "docs: update calendar for 23.1.3",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "86f8e90deb40f00ea225791b5abd8ae9d619207e",
+        "description": "docs/relnotes: add sha256sum for 23.1.3",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7051d4e1d852cc6131abf96149ae4646a2c95839",
+        "description": "docs: add release notes for 23.1.3",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8509ebb68a022bd1b0629c3362638d217ad0c477",
+        "description": "anv: align buffers to a cache line",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9db5da0f388f22a3d705d02e34fe1026c9f176fd",
+        "description": "r300: add partial CMP support on R5xx",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e15a4e6e1a773f83e621ad95689d264d04963a73",
+        "description": "radv: pre-init surface info",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "92dbf454f81ddf2468766837b38e8dcfd31d8fc4",
+        "description": "ci/etnaviv: update ci expectation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "3005c27a92d6daddb1896730618d6af3cb6e3520",
+        "description": "Revert \"amd/ci: temporarily disable some manual jobs that take a long time to run\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "4031ed5c8a0bbda910f22aec5ee3263b8137936a"
+    },
+    {
+        "sha": "33673bcc2ab84de0b1ff35519e7d7a58ef572fba",
+        "description": "rusticl: stop linking with libgalliumvl",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "92fdfea5af8783cae471c510d1fccb1aab4c9a73",
+        "description": "rusticl: specify which symbols to export",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "72fe01a6be92a32392742eb1ba65992b53175bde",
+        "description": "rusticl: add ld_args_gc_sections",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ff290167536347a6831034a996b9ee1a8c3e5d6b",
+        "description": "meson: Guard the glsl tests that only working when OpenGL ES2 is enabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0c298c1bb2181fc90f92ee9701457d62ef8fd010",
+        "description": "mapi: Fixes non-constant-expression cannot be narrowed from type 'unsigned long' to 'unsigned int' in initializer list with clang",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e44773b6d643d24273cf07945a52287a148c0159",
+        "description": "meson: Use consistence disabled/enabled comment for shared-glapi option",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7af2c45947d47f72600bdf2b393faffa290f9cc7",
+        "description": "mapi: Fixes check_table.cpp for DrawArraysInstancedARB and DrawElementsInstancedARB",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "5679ef99b82b7ae8803b91f6dcde19e53c223c5e"
+    },
+    {
+        "sha": "29b4c1a09f23985a8d367b2b95e887f4418ebba7",
+        "description": "rusticl: experimental support for cl_khr_fp16",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6ae801c4d832c490f1c45b2665d2f380dd958c6f",
+        "description": "rusticl/device: rename doubles to fp64 and long to int64",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "0623e1784caaea0deed1f711c3777f2a5b004517",
+        "description": "ci/panfrost: switch panfrost-g52-piglit-gles2 from X to XWayland",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5c120173b3665a740e1d10e5644b1c344b35c1f4",
+        "description": "zink/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "79cd51d0e6d33b518e5b225bd7d91da03b9bee71",
+        "description": "radeonsi/get: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "979f47a04d72d10fceebc1f2c92848f39ae566e8",
+        "description": "r600/pipe: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6e1f873a0c019ee11dc6a1e489a615d270411e76",
+        "description": "iris/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "d27040ed89bc0e05e12ce7457dca6666fa391192",
+        "description": "crocus/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6ec57403dbf6a8c60865caff90f4d850cd73b619",
+        "description": "sofpipe/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "35f5bc0ad47baaaafa36a95b1658c9fb7755e154",
+        "description": "llvmpipe/screen: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "660f2eabe116972b82f2b6fcdf4869962f641d6d",
+        "description": "gallium: add PIPE_CAP_TIMER_RESOLUTION",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "77f5b1cce024a472ffb603bc7dbb7c7f9f5f993f",
+        "description": "radeonsi: clean up #includes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "56c787b36df809740d2cc43919dcd9794901234a",
+        "description": "radeonsi: declare compiler[] and nir_options as pointers to reduce #includes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "620ff256a2c2b3de0f148c107a7eadad45ed09d0",
+        "description": "radeonsi: clean up query functions, make them static, remove forward decls",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "69bc1180b77ae366e05298e892f3e83079414cd8",
+        "description": "radeonsi/gfx11: use SET_SH_REG_PAIRS_PACKED for compute by buffering reg writes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1753b321f8766783b73f153131c575b868c5cd12",
+        "description": "radeonsi/gfx11: use SET_SH_REG_PAIRS_PACKED for gfx by buffering reg writes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a6e6646d918a1110211cebfb634db0bccc69d40e",
+        "description": "radeonsi: reorder compute code to prepare for packed SET_SH_REG packets",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f71607c8d3cea3f2ec5ea6d23ddaec3a2e05a875",
+        "description": "radeonsi/gfx11: enable register shadowing by default",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "aafef61f6a37e22f989eef10fd70399d787ba874",
+        "description": "radeonsi/gfx11: fix GLCTS with register shadowing by keeping the CS preamble",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c7f4ffa401b8b2c43ce59fe4aafe3602060a589b",
+        "description": "radeonsi: remove uses_reg_shadowing parameter from si_init_gfx_preamble_state",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "913c6392f65824b25202bba35c75158e705ca4e1",
+        "description": "radeonsi: remove radeon_winsys::cs_set_preamble",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "c4811edfa693f3b417b41ead67b5b13d32913569",
+        "description": "radeonsi: use si_pm4_create_sized for the shadowing preamble",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "fff585bdb80b83d754aaa61bf5306268a7da5e06",
+        "description": "radeonsi: don't do BREAK_BATCH for context regs with only 1 context per batch",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "835190dd9f6c75c0b50bbb70907ad1aefe83afb7",
+        "description": "radeonsi: keep pipeline statistics disabled when they are not used",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ccb856fbaa1ae9d77e034f6822c9d004837932fa",
+        "description": "radeonsi: determine si_pm4_state::reg_va_low_idx automatically",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "22f3bcfb5a3311a2c61ad26c943976e66b68b09c",
+        "description": "radeonsi/gfx11: use SET_*_REG_PAIRS_PACKED packets for pm4 states",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1aa99437d3784cb1193120d8e069bd168ba9e749",
+        "description": "radeonsi: eliminate redundant TCS user data and RSRC2 register changes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "6959493f8c2a0542d13312069659c3c3e233206e",
+        "description": "radeonsi: move the only tcs_out_lds_offsets field to vs_state_bits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5632d8d1a777d39c7882dcb011aab4619bcff01a",
+        "description": "radeonsi: replace tcs_out_lds_layout with nearly identical tes_offchip_addr",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "1b40ab21503fdeabb37950a73ac630240331a4ca",
+        "description": "radeonsi: move TCS.gl_PatchVerticesIn into the tcs_offchip_layout SGPR",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b4e2073f041174a4dd4de141823d7950ffb78819",
+        "description": "zink/ci: remove 3 tests from the fails list",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "4031ed5c8a0bbda910f22aec5ee3263b8137936a",
+        "description": "amd/ci: temporarily disable some manual jobs that take a long time to run",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a4796a34b192c7d251bd15fc9a13ed15321ef1ba",
+        "description": "Revert \"ci: mark the valve farm as down\"",
+        "nominated": false,
+        "nomination_type": 2,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "2089fc8188635ed0ee72e2ddc009e7a775210bb7"
+    },
+    {
+        "sha": "b4ca45911d234c2fd763ed60cbb74be804dccd31",
+        "description": "nir_opt_algebraic: don't use i32csel without native integer support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f9a4b8e6401a875db7886ad8baeefdd9d1461b21",
+        "description": "docs/ci: fix command to disable/re-enable farms",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "e8533328056f9fe68a4935cd8eaa8038615268a8",
+        "description": "r600/sfn: Add source mod propagation also to fp64 ops",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "255eee10ace253d61570d9b97b44158082ae8de4",
+        "description": "r600/sfn: Implement fsat for 64 bit ops",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "0ff3c4bef21e6768a53610337c39d1e306b3869e"
+    },
+    {
+        "sha": "12d86e9822f97d4a66d8cbb90ba13491153711ef",
+        "description": "anv: update conformanceVersion",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ff52a00553ce6c8dc5398ff4eb9dd923d10ceada",
+        "description": "dzn: Align placed footprints used when copying linear <-> optimal for BC formats",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "9dd106b1137bf94369dfe293cfe800fe2ff642a9",
+        "description": "ci: move .microsoft-farm-container-rules to test-source-dep.yml",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "402ae3b132e026d681cb5e4b8b44d6504998c2b5",
+        "description": "nir/lower_tex: ignore saturate for txf ops",
+        "nominated": true,
+        "nomination_type": 0,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "886b7aaa6be918857c685d980110f35ef57d96df",
+        "description": "zink: add fastpaths for no-op sampler/view rebinds",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8125437acdc104dad6d9b70c4814bed8f5b271d2",
+        "description": "zink: check sampler views pointer before loop",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "58b82d231de91fd9241401c55b6939a9c4f050d0",
+        "description": "zink: don't update tc info directly from cso binds",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7b4c1b3a426ec781c81f48bf57e5e7de07bea2af",
+        "description": "zink: track and apply ds3 states only on change",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5dc2d329cb0130413bbbf3c7500076e7c5f7f065",
+        "description": "zink: use local screen var in blend state bind",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2543fc15a1968e83aa44c90494bbc1d047409494",
+        "description": "zink: clean up rp update tracking on dsa bind",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b65efda50880d4bf03d06b7d2496ac7d9d314e7d",
+        "description": "zink: specialize invalidate_descriptor_state hook for compact mode",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "53542dd12000f0618784204b1ca4633b9f23ef1e",
+        "description": "zink: make invalidate_descriptor_state a ctx hook",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ad04bd81b96bfd41adcf230b161dda24559e2722",
+        "description": "zink: force inlining for a bunch of functions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "14bf10c1adce11c9e208d9269e9e048eef61ef8b",
+        "description": "zink: no-op redundant samplemask changes",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "f759cbb6755e713a8fdaa1f0b26f1144ae482933",
+        "description": "dzn: Fix multisample counts in device limits",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b888ead2f738fa24ccb0cb534a932eb45d67484",
+        "description": "dzn: Remove dynamic check for block-compressed support",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "a3d14e4b0581c9a5a3d84b52566fd628685a5886",
+        "description": "dzn: Use common GetPhysicalDeviceFeatures2",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "7a68617692f3632a87decce1f751196226daabf4",
+        "description": "dzn: Inline D3D12 device creation in physical device creation",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "badb85edb8ff2236f38dbbbdd3aeb9febf02f54f",
+        "description": "util: reinstate ENUM_PACKED",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "86532fa21dee16debf4f96a8b6eb6e894076845e"
+    },
+    {
+        "sha": "4b48d377badc6871237583e2fdea16063e686308",
+        "description": "egl/haiku: Fix potential crash if double buffering is disabled",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2089fc8188635ed0ee72e2ddc009e7a775210bb7",
+        "description": "ci: mark the valve farm as down",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "ed5d3468682d775f2a9e5253d868997cca9ea4b8",
+        "description": "intel/fs: Add missing newline",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "df6749ed56982f056be8c06d7b1af7f84e842fef",
+        "description": "radv: inline radv_can_enable_dual_src()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "8b73109a938cebdc97057518a297f32beed37485",
+        "description": "radv: remove redundant intermediate variable in radv_is_mrt0_dual_src()",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "2a1d97e3fcffa6d38413f8d785afaf9d2278fb71",
+        "description": "dzn: Ignore export access parameters",
+        "nominated": false,
+        "nomination_type": 1,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": "c64f1b6650f9f81a0329390d92f8c27bcb046e7c"
+    },
+    {
+        "sha": "63f44951ac4b4055b4137f57ef10c5fb078bf35e",
+        "description": "asahi: drop unnecessary DRM_FORMAT_MOD_{LINEAR,INVALID} fallbacks",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "afe134a49c5ef79ca6125f0263331b440b9c0e49"
+    },
+    {
+        "sha": "cfa7eec06c713bd4ec1eb91f02cfddc57c7bd2f2",
+        "description": "aco: don't set exec_hi for wave32 scan reductions",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5d03bbc91d10a8ed479d1a68a363e69135f1e6d8",
+        "description": "pvr: Fix csb control stream extension",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "5336cbff3bd0ac73cb03915bb2dad102f15d58a0",
+        "description": "intel/fs: Constant propagate into SHADER_OPCODE_SHUFFLE",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
+        "sha": "b902fb2e14e56bdf914eb175489d3b53ff6fcda0",
+        "description": "pvr: Fix dynamic offset patching",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "aa791961a82e1f5a9dd841c3e0398c3e80d09652"
+    },
+    {
+        "sha": "4071b8e7f32f1801f7e578ce580b22d8ec7b0332",
+        "description": "pvr: Fix barrier insertion on merged subpasses",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "6d672e0336836bdbf3d444f7febc74f5c91e7de1"
+    },
+    {
+        "sha": "822dc384b1364a4a2a67c68a20a00bf324e40380",
+        "description": "pvr: Fix seg fault on empty descriptor set",
+        "nominated": true,
+        "nomination_type": 1,
+        "resolution": 1,
+        "main_sha": null,
+        "because_sha": "ce67f5ac944bdc6ebf27e3b115706bec5b63f002"
+    },
+    {
+        "sha": "9d75795087ce1233e92df2582846ec6f6116d423",
+        "description": "radv: Move most of DB_SHADER_CONTROL to PS, more precise GFX11 blend WA",
+        "nominated": false,
+        "nomination_type": null,
+        "resolution": 4,
+        "main_sha": null,
+        "because_sha": null
+    },
+    {
         "sha": "b687cbe36c12081921e03c8633fedea334642105",
         "description": "isl: add surface creation reporting mechanism",
         "nominated": false,
@@ -688,7 +3586,7 @@
         "description": "anv: track buffer writes from shaders for query results writes",
         "nominated": true,
         "nomination_type": 0,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -2965,7 +5863,7 @@
         "description": "anv: limit ANV_PIPE_RENDER_TARGET_BUFFER_WRITES to blorp operations using 3D",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -6637,7 +9535,7 @@
         "description": "tu: Fix missing unlock",
         "nominated": true,
         "nomination_type": 1,
-        "resolution": 0,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": "c20139c2922276238c12dc6a6cf0fbbc39e9d732"
     },
@@ -10354,7 +13252,7 @@
         "description": "freedreno: Reallocate on unshared export",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -10363,7 +13261,7 @@
         "description": "freedreno: Add aux-context support",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -10372,7 +13270,7 @@
         "description": "freedreno: Handle export error handling",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
@@ -10381,7 +13279,7 @@
         "description": "freedreno/drm: Don't try to export suballoc bo",
         "nominated": false,
         "nomination_type": null,
-        "resolution": 4,
+        "resolution": 1,
         "main_sha": null,
         "because_sha": null
     },
diff -Npur mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c
--- mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_bo.c	2023-06-28 19:30:05.000000000 +0200
@@ -65,6 +65,42 @@ radv_amdgpu_bo_va_op(struct radv_amdgpu_
    return amdgpu_bo_va_op_raw(ws->dev, bo, offset, size, addr, flags, ops);
 }
 
+static void
+radv_amdgpu_winsys_virtual_map(struct radv_amdgpu_winsys *ws, struct radv_amdgpu_winsys_bo *bo,
+                               const struct radv_amdgpu_map_range *range)
+{
+   uint64_t internal_flags = 0;
+   assert(range->size);
+
+   if (!range->bo) {
+      internal_flags |= AMDGPU_VM_PAGE_PRT;
+   }
+
+   int r = radv_amdgpu_bo_va_op(ws, range->bo ? range->bo->bo : NULL, range->bo_offset, range->size,
+                                range->offset + bo->base.va, 0, internal_flags, AMDGPU_VA_OP_MAP);
+   if (r)
+      abort();
+}
+
+static void
+radv_amdgpu_winsys_virtual_unmap(struct radv_amdgpu_winsys *ws, struct radv_amdgpu_winsys_bo *bo,
+                                 const struct radv_amdgpu_map_range *range)
+{
+   uint64_t internal_flags = 0;
+   assert(range->size);
+
+   if (!range->bo) {
+      /* Even though this is an unmap, if we don't set this flag,
+         AMDGPU is going to complain about the missing buffer. */
+      internal_flags |= AMDGPU_VM_PAGE_PRT;
+   }
+
+   int r = radv_amdgpu_bo_va_op(ws, range->bo ? range->bo->bo : NULL, range->bo_offset, range->size,
+                                range->offset + bo->base.va, 0, internal_flags, AMDGPU_VA_OP_UNMAP);
+   if (r)
+      abort();
+}
+
 static int
 bo_comparator(const void *ap, const void *bp)
 {
@@ -107,6 +143,11 @@ radv_amdgpu_winsys_rebuild_bo_list(struc
    return VK_SUCCESS;
 }
 
+/**
+ * TODO: Use OP_REPLACE instead of OP_MAP/OP_UNMAP when
+ * https://lists.freedesktop.org/archives/amd-gfx/2023-June/094648.html is merged in all kernels
+ * we need to support.
+ */
 static VkResult
 radv_amdgpu_winsys_bo_virtual_bind(struct radeon_winsys *_ws, struct radeon_winsys_bo *_parent,
                                    uint64_t offset, uint64_t size, struct radeon_winsys_bo *_bo,
@@ -119,42 +160,10 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    int first = 0, last;
    struct radv_amdgpu_map_range new_first, new_last;
    VkResult result;
-   int r;
 
    assert(parent->is_virtual);
    assert(!bo || !bo->is_virtual);
 
-   /* When the BO is NULL, AMDGPU will reset the PTE VA range to the initial state. Otherwise, it
-    * will first unmap all existing VA that overlap the requested range and then map.
-    */
-   if (bo) {
-      r = radv_amdgpu_bo_va_op(ws, bo->bo, bo_offset, size, parent->base.va + offset, 0, 0,
-                               AMDGPU_VA_OP_REPLACE);
-   } else {
-      r = radv_amdgpu_bo_va_op(ws, NULL, 0, size, parent->base.va + offset, 0, AMDGPU_VM_PAGE_PRT,
-                               AMDGPU_VA_OP_REPLACE);
-   }
-
-   if (r) {
-      fprintf(stderr, "radv/amdgpu: Failed to replace a PRT VA region (%d).\n", r);
-      return VK_ERROR_OUT_OF_DEVICE_MEMORY;
-   }
-
-   /* Do not add the BO to the virtual BO list if it's already in the global list to avoid dangling
-    * BO references because it might have been destroyed without being previously unbound. Resetting
-    * it to NULL clears the old BO ranges if present.
-    *
-    * This is going to be clarified in the Vulkan spec:
-    * https://gitlab.khronos.org/vulkan/vulkan/-/issues/3125
-    *
-    * The issue still exists for non-global BO but it will be addressed later, once we are 100% it's
-    * RADV fault (mostly because the solution looks more complicated).
-    */
-   if (bo && bo->base.use_global_list) {
-      bo = NULL;
-      bo_offset = 0;
-   }
-
    /* We have at most 2 new ranges (1 by the bind, and another one by splitting a range that
     * contains the newly bound range). */
    if (parent->range_capacity - parent->range_count < 2) {
@@ -186,6 +195,7 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
     * whether to not create the corresponding split part. */
    bool remove_first = parent->ranges[first].offset == offset;
    bool remove_last = parent->ranges[last].offset + parent->ranges[last].size == offset + size;
+   bool unmapped_first = false;
 
    assert(parent->ranges[first].offset <= offset);
    assert(parent->ranges[last].offset + parent->ranges[last].size >= offset + size);
@@ -211,6 +221,11 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    range_count_delta = 1 - (last - first + 1) + !remove_first + !remove_last;
    new_idx = first + !remove_first;
 
+   /* Any range between first and last is going to be entirely covered by the new range so just
+    * unmap them. */
+   for (int i = first + 1; i < last; ++i)
+      radv_amdgpu_winsys_virtual_unmap(ws, parent, parent->ranges + i);
+
    /* If the first/last range are not left alone we unmap then and optionally map
     * them again after modifications. Not that this implicitly can do the splitting
     * if first == last. */
@@ -218,16 +233,24 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    new_last = parent->ranges[last];
 
    if (parent->ranges[first].offset + parent->ranges[first].size > offset || remove_first) {
+      radv_amdgpu_winsys_virtual_unmap(ws, parent, parent->ranges + first);
+      unmapped_first = true;
+
       if (!remove_first) {
          new_first.size = offset - new_first.offset;
+         radv_amdgpu_winsys_virtual_map(ws, parent, &new_first);
       }
    }
 
    if (parent->ranges[last].offset < offset + size || remove_last) {
+      if (first != last || !unmapped_first)
+         radv_amdgpu_winsys_virtual_unmap(ws, parent, parent->ranges + last);
+
       if (!remove_last) {
          new_last.size -= offset + size - new_last.offset;
          new_last.bo_offset += (offset + size - new_last.offset);
          new_last.offset = offset + size;
+         radv_amdgpu_winsys_virtual_map(ws, parent, &new_last);
       }
    }
 
@@ -247,6 +270,8 @@ radv_amdgpu_winsys_bo_virtual_bind(struc
    parent->ranges[new_idx].bo = bo;
    parent->ranges[new_idx].bo_offset = bo_offset;
 
+   radv_amdgpu_winsys_virtual_map(ws, parent, parent->ranges + new_idx);
+
    parent->range_count += range_count_delta;
 
    result = radv_amdgpu_winsys_rebuild_bo_list(parent);
@@ -430,15 +455,7 @@ radv_amdgpu_winsys_bo_create(struct rade
       bo->ranges[0].bo = NULL;
       bo->ranges[0].bo_offset = 0;
 
-      /* Reserve a PRT VA region. */
-      r = radv_amdgpu_bo_va_op(ws, NULL, 0, size, bo->base.va, 0, AMDGPU_VM_PAGE_PRT,
-                               AMDGPU_VA_OP_MAP);
-      if (r) {
-         fprintf(stderr, "radv/amdgpu: Failed to reserve a PRT VA region (%d).\n", r);
-         result = VK_ERROR_OUT_OF_DEVICE_MEMORY;
-         goto error_ranges_alloc;
-      }
-
+      radv_amdgpu_winsys_virtual_map(ws, bo, bo->ranges);
       radv_amdgpu_log_bo(ws, bo, false);
 
       *out_bo = (struct radeon_winsys_bo *)bo;
diff -Npur mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c
--- mesa-23.1.3/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/amd/vulkan/winsys/amdgpu/radv_amdgpu_cs.c	2023-06-28 19:30:05.000000000 +0200
@@ -739,6 +739,20 @@ radv_amdgpu_add_cs_to_bo_list(struct rad
       for (unsigned k = 0; k < virtual_bo->bo_count; ++k) {
          struct radv_amdgpu_winsys_bo *bo = virtual_bo->bos[k];
          bool found = false;
+
+         /* Do not add the BO to the virtual BO list if it's already in the global list to avoid
+          * dangling BO references because it might have been destroyed without being previously
+          * unbound. Resetting it to NULL clears the old BO ranges if present.
+          *
+          * This is going to be clarified in the Vulkan spec:
+          * https://gitlab.khronos.org/vulkan/vulkan/-/issues/3125
+          *
+          * The issue still exists for non-global BO but it will be addressed later, once we are
+          * 100% it's RADV fault (mostly because the solution looks more complicated).
+          */
+         if (bo->base.use_global_list)
+            continue;
+
          for (unsigned m = 0; m < num_handles; ++m) {
             if (handles[m].bo_handle == bo->bo_handle) {
                found = true;
@@ -1224,8 +1238,15 @@ radv_amdgpu_winsys_cs_dump(struct radeon
                            int trace_id_count)
 {
    struct radv_amdgpu_cs *cs = (struct radv_amdgpu_cs *)_cs;
-   void *ib = radv_amdgpu_winsys_get_cpu_addr(cs, cs->ib.ib_mc_address);
    int num_dw = cs->base.cdw;
+   void *ib;
+
+   if (cs->use_ib) {
+      ib = radv_amdgpu_winsys_get_cpu_addr(cs, cs->ib.ib_mc_address);
+   } else {
+      ib = cs->base.buf;
+   }
+
    assert(ib);
    ac_parse_ib(file, ib, num_dw, trace_ids, trace_id_count, "main IB", cs->ws->info.gfx_level,
                cs->ws->info.family, radv_amdgpu_winsys_get_cpu_addr, cs);
diff -Npur mesa-23.1.3/src/compiler/glsl/gl_nir_linker.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/glsl/gl_nir_linker.c
--- mesa-23.1.3/src/compiler/glsl/gl_nir_linker.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/glsl/gl_nir_linker.c	2023-06-28 19:30:05.000000000 +0200
@@ -56,6 +56,7 @@ gl_nir_opts(nir_shader *nir)
                nir_var_mem_shared,
                NULL);
 
+      NIR_PASS(progress, nir, nir_opt_find_array_copies);
       NIR_PASS(progress, nir, nir_opt_copy_prop_vars);
       NIR_PASS(progress, nir, nir_opt_dead_write_vars);
 
@@ -117,6 +118,8 @@ gl_nir_opts(nir_shader *nir)
          NIR_PASS(progress, nir, nir_opt_loop_unroll);
       }
    } while (progress);
+
+   NIR_PASS_V(nir, nir_lower_var_copies);
 }
 
 static void
diff -Npur mesa-23.1.3/src/compiler/glsl_types.cpp mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/glsl_types.cpp
--- mesa-23.1.3/src/compiler/glsl_types.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/glsl_types.cpp	2023-06-28 19:30:05.000000000 +0200
@@ -2495,7 +2495,7 @@ glsl_type::explicit_size(bool align_to_s
 
       assert(this->length > 0);
       unsigned elem_size = align_to_stride ? this->explicit_stride : this->fields.array->explicit_size();
-      assert(this->explicit_stride >= elem_size);
+      assert(this->explicit_stride == 0 || this->explicit_stride >= elem_size);
 
       return this->explicit_stride * (this->length - 1) + elem_size;
    } else if (this->is_matrix()) {
diff -Npur mesa-23.1.3/src/compiler/nir/nir_lower_bool_to_int32.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/nir/nir_lower_bool_to_int32.c
--- mesa-23.1.3/src/compiler/nir/nir_lower_bool_to_int32.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/nir/nir_lower_bool_to_int32.c	2023-06-28 19:30:05.000000000 +0200
@@ -169,15 +169,20 @@ nir_lower_bool_to_int32_instr(UNUSED nir
 bool
 nir_lower_bool_to_int32(nir_shader *shader)
 {
+   bool progress = false;
    nir_foreach_function(func, shader) {
       for (unsigned idx = 0; idx < func->num_params; idx++) {
          nir_parameter *param = &func->params[idx];
-         if (param->bit_size == 1)
+         if (param->bit_size == 1) {
             param->bit_size = 32;
+            progress = true;
+         }
       }
    }
-   return nir_shader_instructions_pass(shader, nir_lower_bool_to_int32_instr,
-                                       nir_metadata_block_index |
-                                       nir_metadata_dominance,
-                                       NULL);
+
+   progress |=
+      nir_shader_instructions_pass(shader, nir_lower_bool_to_int32_instr,
+                                   nir_metadata_block_index |
+                                   nir_metadata_dominance, NULL);
+   return progress;
 }
diff -Npur mesa-23.1.3/src/compiler/nir/nir_lower_tex.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/nir/nir_lower_tex.c
--- mesa-23.1.3/src/compiler/nir/nir_lower_tex.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/compiler/nir/nir_lower_tex.c	2023-06-28 19:30:05.000000000 +0200
@@ -1419,13 +1419,15 @@ nir_lower_tex_block(nir_block *block, ni
 
       /* mask of src coords to saturate (clamp): */
       unsigned sat_mask = 0;
-
-      if ((1 << tex->sampler_index) & options->saturate_r)
-         sat_mask |= (1 << 2);    /* .z */
-      if ((1 << tex->sampler_index) & options->saturate_t)
-         sat_mask |= (1 << 1);    /* .y */
-      if ((1 << tex->sampler_index) & options->saturate_s)
-         sat_mask |= (1 << 0);    /* .x */
+      /* ignore saturate for txf ops: these don't use samplers and can't GL_CLAMP */
+      if (nir_tex_instr_need_sampler(tex)) {
+         if ((1 << tex->sampler_index) & options->saturate_r)
+            sat_mask |= (1 << 2);    /* .z */
+         if ((1 << tex->sampler_index) & options->saturate_t)
+            sat_mask |= (1 << 1);    /* .y */
+         if ((1 << tex->sampler_index) & options->saturate_s)
+            sat_mask |= (1 << 0);    /* .x */
+      }
 
       if (options->lower_index_to_offset)
          progress |= lower_index_to_offset(b, tex);
diff -Npur mesa-23.1.3/src/freedreno/drm/freedreno_bo.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/freedreno/drm/freedreno_bo.c
--- mesa-23.1.3/src/freedreno/drm/freedreno_bo.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/freedreno/drm/freedreno_bo.c	2023-06-28 19:30:05.000000000 +0200
@@ -490,6 +490,9 @@ bo_flush(struct fd_bo *bo)
 int
 fd_bo_get_name(struct fd_bo *bo, uint32_t *name)
 {
+   if (suballoc_bo(bo))
+      return -1;
+
    if (!bo->name) {
       struct drm_gem_flink req = {
          .handle = bo->handle,
@@ -517,6 +520,8 @@ fd_bo_get_name(struct fd_bo *bo, uint32_
 uint32_t
 fd_bo_handle(struct fd_bo *bo)
 {
+   if (suballoc_bo(bo))
+      return 0;
    bo->bo_reuse = NO_CACHE;
    bo->alloc_flags |= FD_BO_SHARED;
    bo_flush(bo);
@@ -528,6 +533,9 @@ fd_bo_dmabuf(struct fd_bo *bo)
 {
    int ret, prime_fd;
 
+   if (suballoc_bo(bo))
+      return -1;
+
    ret = drmPrimeHandleToFD(bo->dev->fd, bo->handle, DRM_CLOEXEC | DRM_RDWR,
                             &prime_fd);
    if (ret) {
diff -Npur mesa-23.1.3/src/freedreno/vulkan/tu_knl_drm_msm.cc mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/freedreno/vulkan/tu_knl_drm_msm.cc
--- mesa-23.1.3/src/freedreno/vulkan/tu_knl_drm_msm.cc	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/freedreno/vulkan/tu_knl_drm_msm.cc	2023-06-28 19:30:05.000000000 +0200
@@ -267,6 +267,7 @@ tu_allocate_userspace_iova(struct tu_dev
                                       size)) {
             *iova = client_iova;
          } else {
+            mtx_unlock(&dev->physical_device->vma_mutex);
             return VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
          }
       } else {
diff -Npur mesa-23.1.3/src/gallium/drivers/asahi/agx_pipe.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/asahi/agx_pipe.c
--- mesa-23.1.3/src/gallium/drivers/asahi/agx_pipe.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/asahi/agx_pipe.c	2023-06-28 19:30:05.000000000 +0200
@@ -40,12 +40,6 @@
 #include "agx_state.h"
 
 /* Fake values, pending UAPI upstreaming */
-#ifndef DRM_FORMAT_MOD_LINEAR
-#define DRM_FORMAT_MOD_LINEAR 1
-#endif
-#ifndef DRM_FORMAT_MOD_INVALID
-#define DRM_FORMAT_MOD_INVALID ((1ULL << 56) - 1)
-#endif
 #ifndef DRM_FORMAT_MOD_APPLE_TWIDDLED
 #define DRM_FORMAT_MOD_APPLE_TWIDDLED (2)
 #endif
diff -Npur mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_resource.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/freedreno/freedreno_resource.c
--- mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_resource.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/freedreno/freedreno_resource.c	2023-06-28 19:30:05.000000000 +0200
@@ -1103,6 +1103,7 @@ static bool
 fd_resource_get_handle(struct pipe_screen *pscreen, struct pipe_context *pctx,
                        struct pipe_resource *prsc, struct winsys_handle *handle,
                        unsigned usage)
+   assert_dt
 {
    struct fd_resource *rsc = fd_resource(prsc);
 
@@ -1115,8 +1116,38 @@ fd_resource_get_handle(struct pipe_scree
 
    DBG("%" PRSC_FMT ", modifier=%" PRIx64, PRSC_ARGS(prsc), handle->modifier);
 
-   return fd_screen_bo_get_handle(pscreen, rsc->bo, rsc->scanout,
-                                  fd_resource_pitch(rsc, 0), handle);
+   bool ret = fd_screen_bo_get_handle(pscreen, rsc->bo, rsc->scanout,
+                                      fd_resource_pitch(rsc, 0), handle);
+
+   if (!ret && !(prsc->bind & PIPE_BIND_SHARED)) {
+
+      pctx = threaded_context_unwrap_sync(pctx);
+
+      struct fd_context *ctx = pctx ?
+            fd_context(pctx) : fd_screen_aux_context_get(pscreen);
+
+      /* Since gl is horrible, we can end up getting asked to export a handle
+       * for a rsc which was not originally allocated in a way that can be
+       * exported (for ex, sub-allocation or in the case of virtgpu we need
+       * to tell the kernel at allocation time that the buffer can be shared)
+       *
+       * If we get into this scenario we can try to reallocate.
+       */
+
+      prsc->bind |= PIPE_BIND_SHARED;
+
+      ret = fd_try_shadow_resource(ctx, rsc, 0, NULL, handle->modifier);
+
+      if (!pctx)
+         fd_screen_aux_context_put(pscreen);
+
+      if (!ret)
+         return false;
+
+      return fd_resource_get_handle(pscreen, pctx, prsc, handle, usage);
+   }
+
+   return ret;
 }
 
 /* special case to resize query buf after allocated.. */
diff -Npur mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/freedreno/freedreno_screen.c
--- mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/freedreno/freedreno_screen.c	2023-06-28 19:30:05.000000000 +0200
@@ -146,6 +146,9 @@ fd_screen_destroy(struct pipe_screen *ps
 {
    struct fd_screen *screen = fd_screen(pscreen);
 
+   if (screen->aux_ctx)
+      screen->aux_ctx->destroy(screen->aux_ctx);
+
    if (screen->tess_bo)
       fd_bo_del(screen->tess_bo);
 
@@ -880,11 +883,17 @@ fd_screen_bo_get_handle(struct pipe_scre
       if (screen->ro) {
          return renderonly_get_handle(scanout, whandle);
       } else {
-         whandle->handle = fd_bo_handle(bo);
+         uint32_t handle = fd_bo_handle(bo);
+         if (!handle)
+            return false;
+         whandle->handle = handle;
          return true;
       }
    } else if (whandle->type == WINSYS_HANDLE_TYPE_FD) {
-      whandle->handle = fd_bo_dmabuf(bo);
+      int fd = fd_bo_dmabuf(bo);
+      if (fd < 0)
+         return false;
+      whandle->handle = fd;
       return true;
    } else {
       return false;
@@ -1221,9 +1230,34 @@ fd_screen_create(int fd,
 
    slab_create_parent(&screen->transfer_pool, sizeof(struct fd_transfer), 16);
 
+   simple_mtx_init(&screen->aux_ctx_lock, mtx_plain);
+
    return pscreen;
 
 fail:
    fd_screen_destroy(pscreen);
    return NULL;
 }
+
+struct fd_context *
+fd_screen_aux_context_get(struct pipe_screen *pscreen)
+{
+   struct fd_screen *screen = fd_screen(pscreen);
+
+   simple_mtx_lock(&screen->aux_ctx_lock);
+
+   if (!screen->aux_ctx) {
+      screen->aux_ctx = pscreen->context_create(pscreen, NULL, 0);
+   }
+
+   return fd_context(screen->aux_ctx);
+}
+
+void
+fd_screen_aux_context_put(struct pipe_screen *pscreen)
+{
+   struct fd_screen *screen = fd_screen(pscreen);
+
+   screen->aux_ctx->flush(screen->aux_ctx, NULL, 0);
+   simple_mtx_unlock(&screen->aux_ctx_lock);
+}
diff -Npur mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.h mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/freedreno/freedreno_screen.h
--- mesa-23.1.3/src/gallium/drivers/freedreno/freedreno_screen.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/freedreno/freedreno_screen.h	2023-06-28 19:30:05.000000000 +0200
@@ -170,6 +170,9 @@ struct fd_screen {
     */
    const enum pc_di_primtype *primtypes;
    uint32_t primtypes_mask;
+
+   simple_mtx_t aux_ctx_lock;
+   struct pipe_context *aux_ctx;
 };
 
 static inline struct fd_screen *
@@ -178,6 +181,10 @@ fd_screen(struct pipe_screen *pscreen)
    return (struct fd_screen *)pscreen;
 }
 
+struct fd_context;
+struct fd_context * fd_screen_aux_context_get(struct pipe_screen *pscreen);
+void fd_screen_aux_context_put(struct pipe_screen *pscreen);
+
 static inline void
 fd_screen_lock(struct fd_screen *screen)
 {
diff -Npur mesa-23.1.3/src/gallium/drivers/iris/iris_state.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/iris/iris_state.c
--- mesa-23.1.3/src/gallium/drivers/iris/iris_state.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/iris/iris_state.c	2023-06-28 19:30:05.000000000 +0200
@@ -1082,6 +1082,21 @@ iris_init_common_context(struct iris_bat
 #else
 #define IRIS_BT_OFFSET_SHIFT 0
 #endif
+
+#if GFX_VERx10 == 125
+   /* Even though L3 partial write merging is supposed to be enabled
+    * by default on Gfx12.5 according to the hardware spec, i915
+    * appears to accidentally clear the enables during context
+    * initialization, so make sure to enable them here since partial
+    * write merging has a large impact on rendering performance.
+    */
+   iris_emit_reg(batch, GENX(L3SQCREG5), reg) {
+      reg.L3CachePartialWriteMergeTimerInitialValue = 0x7f;
+      reg.CompressiblePartialWriteMergeEnable = true;
+      reg.CoherentPartialWriteMergeEnable = true;
+      reg.CrossTilePartialWriteMergeEnable = true;
+   }
+#endif
 }
 
 static void
@@ -1188,6 +1203,35 @@ iris_init_render_context(struct iris_bat
    }
 #endif
 
+#if GFX_VER == 12
+   iris_emit_reg(batch, GENX(FF_MODE2), reg) {
+      /* On Alchemist, the FF_MODE2 docs for the GS timer say:
+       *
+       *    "The timer value must be set to 224."
+       *
+       * and Wa_16011163337 indicates this is the case for all Gfx12 parts,
+       * and that this is necessary to avoid hanging the HS/DS units.  It
+       * also clarifies that 224 is literally 0xE0 in the bits, not 7*32=224.
+       *
+       * The HS timer docs also have the same quote for Alchemist.  I am
+       * unaware of a reason it needs to be set to 224 on Tigerlake, but
+       * we do so for consistency if nothing else.
+       *
+       * For the TDS timer value, the docs say:
+       *
+       *    "For best performance, a value of 4 should be programmed."
+       *
+       * i915 also sets it this way on Tigerlake due to workarounds.
+       *
+       * The default VS timer appears to be 0, so we leave it at that.
+       */
+      reg.GSTimerValue  = 224;
+      reg.HSTimerValue  = 224;
+      reg.TDSTimerValue = 4;
+      reg.VSTimerValue  = 0;
+   }
+#endif
+
 #if GFX_VERx10 == 120
    /* Wa_1508744258
     *
diff -Npur mesa-23.1.3/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp
--- mesa-23.1.3/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/gallium/drivers/r600/sfn/sfn_optimizer.cpp	2023-06-28 19:30:05.000000000 +0200
@@ -733,6 +733,36 @@ public:
    bool progress;
 };
 
+class HasVecDestVisitor : public ConstInstrVisitor {
+public:
+   HasVecDestVisitor():
+       has_group_dest(false)
+   {
+   }
+
+   void visit(const AluInstr& instr) override { (void)instr; }
+   void visit(const AluGroup& instr) override { (void)instr; }
+   void visit(const TexInstr& instr) override  {  (void)instr; has_group_dest = true; };
+   void visit(const ExportInstr& instr) override { (void)instr; }
+   void visit(const FetchInstr& instr) override  {  (void)instr; has_group_dest = true; };
+   void visit(const Block& instr) override { (void)instr; };
+   void visit(const ControlFlowInstr& instr) override{ (void)instr; }
+   void visit(const IfInstr& instr) override{ (void)instr; }
+   void visit(const ScratchIOInstr& instr) override  { (void)instr; };
+   void visit(const StreamOutInstr& instr) override { (void)instr; }
+   void visit(const MemRingOutInstr& instr) override { (void)instr; }
+   void visit(const EmitVertexInstr& instr) override { (void)instr; }
+   void visit(const GDSInstr& instr) override { (void)instr; }
+   void visit(const WriteTFInstr& instr) override { (void)instr; };
+   void visit(const LDSAtomicInstr& instr) override { (void)instr; };
+   void visit(const LDSReadInstr& instr) override { (void)instr; };
+   void visit(const RatInstr& instr) override {  (void)instr; };
+
+   bool has_group_dest;
+};
+
+
+
 bool
 simplify_source_vectors(Shader& sh)
 {
@@ -758,6 +788,16 @@ SimplifySourceVecVisitor::visit(TexInstr
       if (nvals == 1) {
          for (int i = 0; i < 4; ++i)
             if (src[i]->chan() < 4) {
+               HasVecDestVisitor check_dests;
+               for (auto p : src[i]->parents()) {
+                  p->accept(check_dests);
+                  if (check_dests.has_group_dest)
+                     break;
+               }
+
+               if (check_dests.has_group_dest)
+                  break;
+
                if (src[i]->pin() == pin_group)
                   src[i]->set_pin(pin_free);
                else if (src[i]->pin() == pin_chgr)
diff -Npur mesa-23.1.3/src/imagination/vulkan/pvr_cmd_buffer.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/imagination/vulkan/pvr_cmd_buffer.c
--- mesa-23.1.3/src/imagination/vulkan/pvr_cmd_buffer.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/imagination/vulkan/pvr_cmd_buffer.c	2023-06-28 19:30:05.000000000 +0200
@@ -3391,6 +3391,7 @@ static VkResult pvr_cmd_buffer_upload_pa
    struct pvr_device *device = cmd_buffer->device;
    struct pvr_bo *patched_desc_set_bo;
    uint32_t *mem_ptr;
+   uint32_t desc_idx_offset = 0;
    VkResult result;
 
    assert(desc_set->layout->dynamic_buffer_count > 0);
@@ -3465,7 +3466,7 @@ static VkResult pvr_cmd_buffer_upload_pa
             /* clang-format on */
             const pvr_dev_addr_t addr =
                PVR_DEV_ADDR_OFFSET(descriptors[desc_idx].buffer_dev_addr,
-                                   dynamic_offsets[desc_idx]);
+                                   dynamic_offsets[desc_idx + desc_idx_offset]);
             const VkDeviceSize range =
                MIN2(descriptors[desc_idx].buffer_desc_range,
                     descriptors[desc_idx].buffer_whole_range -
@@ -3507,6 +3508,8 @@ static VkResult pvr_cmd_buffer_upload_pa
                    size_info->secondary * sizeof(uint32_t));
          }
       }
+
+      desc_idx_offset += binding->descriptor_count;
    }
 
    pvr_bo_cpu_unmap(device, patched_desc_set_bo);
@@ -3571,6 +3574,10 @@ pvr_cmd_buffer_upload_desc_set_table(str
 
       desc_set = desc_state->descriptor_sets[set];
 
+      /* TODO: Is it better if we don't set the valid_mask for empty sets? */
+      if (desc_set->layout->descriptor_count == 0)
+         continue;
+
       if (desc_set->layout->dynamic_buffer_count > 0) {
          struct pvr_bo *new_desc_set_bo;
 
@@ -7294,9 +7301,9 @@ void pvr_CmdPipelineBarrier2(VkCommandBu
 
       switch (src_stage_mask) {
       case PVR_PIPELINE_STAGE_FRAG_BIT:
-         is_barrier_needed = true;
+         is_barrier_needed = !render_pass;
 
-         if (!render_pass)
+         if (is_barrier_needed)
             break;
 
          assert(current_sub_cmd->type == PVR_SUB_CMD_TYPE_GRAPHICS);
diff -Npur mesa-23.1.3/src/intel/genxml/gen125.xml mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/genxml/gen125.xml
--- mesa-23.1.3/src/intel/genxml/gen125.xml	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/genxml/gen125.xml	2023-06-28 19:30:05.000000000 +0200
@@ -7440,6 +7440,12 @@
   <register name="DS_INVOCATION_COUNT" length="2" num="0x2308">
     <field name="DS Invocation Count Report" start="0" end="63" type="uint" />
   </register>
+  <register name="FF_MODE2" length="1" num="0x6604">
+    <field name="VS Timer Value" start="0" end="7" type="uint" />
+    <field name="HS Timer Value" start="8" end="15" type="uint" />
+    <field name="TDS Timer Value" start="16" end="23" type="uint" />
+    <field name="GS Timer Value" start="24" end="31" type="uint" />
+  </register>
   <register name="GFX_AUX_TABLE_BASE_ADDR" length="2" num="0x4200">
     <field name="Address" start="0" end="63" type="uint" />
   </register>
@@ -7519,6 +7525,12 @@
     <field name="DC Allocation" start="18" end="24" type="uint" />
     <field name="All Allocation" start="25" end="31" type="uint" />
   </register>
+  <register name="L3SQCREG5" length="1" num="0xB158">
+    <field name="L3 Cache Partial Write Merge Timer Initial Value" start="0" end="9" type="uint" />
+    <field name="Compressible Partial Write Merge Enable" start="21" end="21" type="uint" />
+    <field name="Coherent Partial Write Merge Enable" start="22" end="22" type="uint" />
+    <field name="Cross-Tile Partial Write Merge Enable" start="23" end="23" type="uint" />
+  </register>
   <register name="PS_INVOCATION_COUNT" length="2" num="0x2348">
     <field name="PS Invocation Count Report" start="0" end="63" type="uint" />
   </register>
diff -Npur mesa-23.1.3/src/intel/genxml/gen12.xml mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/genxml/gen12.xml
--- mesa-23.1.3/src/intel/genxml/gen12.xml	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/genxml/gen12.xml	2023-06-28 19:30:05.000000000 +0200
@@ -6940,6 +6940,12 @@
   <register name="DS_INVOCATION_COUNT" length="2" num="0x2308">
     <field name="DS Invocation Count Report" start="0" end="63" type="uint" />
   </register>
+  <register name="FF_MODE2" length="1" num="0x6604">
+    <field name="VS Timer Value" start="0" end="7" type="uint" />
+    <field name="HS Timer Value" start="8" end="15" type="uint" />
+    <field name="TDS Timer Value" start="16" end="23" type="uint" />
+    <field name="GS Timer Value" start="24" end="31" type="uint" />
+  </register>
   <register name="GFX_AUX_TABLE_BASE_ADDR" length="2" num="0x4200">
     <field name="Address" start="0" end="63" type="uint" />
   </register>
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_android.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_android.c
--- mesa-23.1.3/src/intel/vulkan/anv_android.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_android.c	2023-06-28 19:30:05.000000000 +0200
@@ -205,7 +205,7 @@ get_ahw_buffer_format_properties2(
       tiling = VK_IMAGE_TILING_LINEAR;
 
    p->formatFeatures =
-      anv_get_image_format_features2(device->info, p->format, anv_format,
+      anv_get_image_format_features2(device->physical, p->format, anv_format,
                                      tiling, NULL);
 
    /* "Images can be created with an external format even if the Android hardware
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_blorp.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_blorp.c
--- mesa-23.1.3/src/intel/vulkan/anv_blorp.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_blorp.c	2023-06-28 19:30:05.000000000 +0200
@@ -541,6 +541,8 @@ anv_add_buffer_write_pending_bits(struct
    const struct intel_device_info *devinfo = cmd_buffer->device->info;
 
    cmd_buffer->state.pending_query_bits |=
+      (cmd_buffer->queue_family->queueFlags & VK_QUEUE_GRAPHICS_BIT) == 0 ?
+      ANV_QUERY_COMPUTE_WRITES_PENDING_BITS :
       ANV_QUERY_RENDER_TARGET_WRITES_PENDING_BITS(devinfo);
 }
 
@@ -561,9 +563,9 @@ void anv_CmdCopyImageToBuffer2(
                            &pCopyImageToBufferInfo->pRegions[r], false);
    }
 
-   anv_blorp_batch_finish(&batch);
-
    anv_add_buffer_write_pending_bits(cmd_buffer, "after copy image to buffer");
+
+   anv_blorp_batch_finish(&batch);
 }
 
 static bool
@@ -786,9 +788,9 @@ void anv_CmdCopyBuffer2(
                   &pCopyBufferInfo->pRegions[r]);
    }
 
-   anv_blorp_batch_finish(&batch);
-
    anv_add_buffer_write_pending_bits(cmd_buffer, "after copy buffer");
+
+   anv_blorp_batch_finish(&batch);
 }
 
 
@@ -848,9 +850,9 @@ void anv_CmdUpdateBuffer(
       pData = (void *)pData + copy_size;
    }
 
-   anv_blorp_batch_finish(&batch);
-
    anv_add_buffer_write_pending_bits(cmd_buffer, "update buffer");
+
+   anv_blorp_batch_finish(&batch);
 }
 
 void
@@ -959,7 +961,6 @@ void anv_CmdFillBuffer(
                             fillSize, data);
 
    anv_add_buffer_write_pending_bits(cmd_buffer, "after fill buffer");
-
 }
 
 void anv_CmdClearColorImage(
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_device.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_device.c
--- mesa-23.1.3/src/intel/vulkan/anv_device.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_device.c	2023-06-28 19:30:05.000000000 +0200
@@ -4303,11 +4303,11 @@ anv_get_buffer_memory_requirements(struc
     */
    uint32_t memory_types = (1ull << device->physical->memory.type_count) - 1;
 
-   /* Base alignment requirement of a cache line */
-   uint32_t alignment = 16;
-
-   if (usage & VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
-      alignment = MAX2(alignment, ANV_UBO_ALIGNMENT);
+   /* The GPU appears to write back to main memory in cachelines. Writes to a
+    * buffers should not clobber with writes to another buffers so make sure
+    * those are in different cachelines.
+    */
+   uint32_t alignment = 64;
 
    pMemoryRequirements->memoryRequirements.size = size;
    pMemoryRequirements->memoryRequirements.alignment = alignment;
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_formats.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_formats.c
--- mesa-23.1.3/src/intel/vulkan/anv_formats.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_formats.c	2023-06-28 19:30:05.000000000 +0200
@@ -516,12 +516,13 @@ anv_get_format_aspect(const struct intel
 // Format capabilities
 
 VkFormatFeatureFlags2
-anv_get_image_format_features2(const struct intel_device_info *devinfo,
+anv_get_image_format_features2(const struct anv_physical_device *physical_device,
                                VkFormat vk_format,
                                const struct anv_format *anv_format,
                                VkImageTiling vk_tiling,
                                const struct isl_drm_modifier_info *isl_mod_info)
 {
+   const struct intel_device_info *devinfo = &physical_device->info;
    VkFormatFeatureFlags2 flags = 0;
 
    if (anv_format == NULL)
@@ -555,7 +556,8 @@ anv_get_image_format_features2(const str
 
    assert(aspects & VK_IMAGE_ASPECT_ANY_COLOR_BIT_ANV);
 
-   if (vk_format == VK_FORMAT_G8_B8R8_2PLANE_420_UNORM) {
+   if (physical_device->video_decode_enabled &&
+       vk_format == VK_FORMAT_G8_B8R8_2PLANE_420_UNORM) {
       flags |= VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR |
                VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR;
    }
@@ -870,7 +872,6 @@ get_drm_format_modifier_properties_list(
                                         VkFormat vk_format,
                                         VkDrmFormatModifierPropertiesListEXT *list)
 {
-   const struct intel_device_info *devinfo = &physical_device->info;
    const struct anv_format *anv_format = anv_get_format(vk_format);
 
    VK_OUTARRAY_MAKE_TYPED(VkDrmFormatModifierPropertiesEXT, out,
@@ -879,7 +880,7 @@ get_drm_format_modifier_properties_list(
 
    isl_drm_modifier_info_for_each(isl_mod_info) {
       VkFormatFeatureFlags2 features2 =
-         anv_get_image_format_features2(devinfo, vk_format, anv_format,
+         anv_get_image_format_features2(physical_device, vk_format, anv_format,
                                         VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
                                         isl_mod_info);
       VkFormatFeatureFlags features = vk_format_features2_to_features(features2);
@@ -905,7 +906,6 @@ get_drm_format_modifier_properties_list_
                                           VkFormat vk_format,
                                           VkDrmFormatModifierPropertiesList2EXT *list)
 {
-   const struct intel_device_info *devinfo = &physical_device->info;
    const struct anv_format *anv_format = anv_get_format(vk_format);
 
    VK_OUTARRAY_MAKE_TYPED(VkDrmFormatModifierProperties2EXT, out,
@@ -914,7 +914,7 @@ get_drm_format_modifier_properties_list_
 
    isl_drm_modifier_info_for_each(isl_mod_info) {
       VkFormatFeatureFlags2 features2 =
-         anv_get_image_format_features2(devinfo, vk_format, anv_format,
+         anv_get_image_format_features2(physical_device, vk_format, anv_format,
                                         VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
                                         isl_mod_info);
       if (!features2)
@@ -946,9 +946,11 @@ void anv_GetPhysicalDeviceFormatProperti
    assert(pFormatProperties->sType == VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2);
 
    VkFormatFeatureFlags2 linear2, optimal2, buffer2;
-   linear2 = anv_get_image_format_features2(devinfo, vk_format, anv_format,
+   linear2 = anv_get_image_format_features2(physical_device, vk_format,
+                                            anv_format,
                                             VK_IMAGE_TILING_LINEAR, NULL);
-   optimal2 = anv_get_image_format_features2(devinfo, vk_format, anv_format,
+   optimal2 = anv_get_image_format_features2(physical_device, vk_format,
+                                             anv_format,
                                              VK_IMAGE_TILING_OPTIMAL, NULL);
    buffer2 = get_buffer_format_features2(devinfo, vk_format, anv_format);
 
@@ -1117,13 +1119,14 @@ anv_formats_are_compatible(
  */
 static VkFormatFeatureFlags2
 anv_formats_gather_format_features(
-   const struct intel_device_info *devinfo,
+   const struct anv_physical_device *physical_device,
    const struct anv_format *format,
    VkImageTiling tiling,
    const struct isl_drm_modifier_info *isl_mod_info,
    const VkImageFormatListCreateInfo *format_list_info,
    bool allow_texel_compatible)
 {
+   const struct intel_device_info *devinfo = &physical_device->info;
    VkFormatFeatureFlags2KHR all_formats_feature_flags = 0;
 
    /* We need to check that each of the usage bits are allowed for at least
@@ -1147,7 +1150,7 @@ anv_formats_gather_format_features(
                                            devinfo, tiling,
                                            allow_texel_compatible)) {
                VkFormatFeatureFlags2KHR view_format_features =
-                  anv_get_image_format_features2(devinfo,
+                  anv_get_image_format_features2(physical_device,
                                                  possible_anv_format->vk_format,
                                                  possible_anv_format, tiling,
                                                  isl_mod_info);
@@ -1166,9 +1169,9 @@ anv_formats_gather_format_features(
          const struct anv_format *anv_view_format =
             anv_get_format(vk_view_format);
          VkFormatFeatureFlags2KHR view_format_features =
-            anv_get_image_format_features2(devinfo, vk_view_format,
-                                           anv_view_format, tiling,
-                                           isl_mod_info);
+            anv_get_image_format_features2(physical_device,
+                                           vk_view_format, anv_view_format,
+                                           tiling, isl_mod_info);
          all_formats_feature_flags |= view_format_features;
       }
    }
@@ -1264,8 +1267,9 @@ anv_get_image_format_properties(
     * different usage than the image, so we can't always filter on usage.
     * There is one exception to this below for storage.
     */
-   format_feature_flags = anv_get_image_format_features2(devinfo, info->format,
-                                                         format, info->tiling,
+   format_feature_flags = anv_get_image_format_features2(physical_device,
+                                                         info->format, format,
+                                                         info->tiling,
                                                          isl_mod_info);
 
    if (!anv_format_supports_usage(format_feature_flags, info->usage)) {
@@ -1289,8 +1293,9 @@ anv_get_image_format_properties(
        * the format list or all the compatible formats.
        */
       VkFormatFeatureFlags2 all_formats_feature_flags = format_feature_flags |
-         anv_formats_gather_format_features(devinfo, format, info->tiling,
-                                            isl_mod_info, format_list_info,
+         anv_formats_gather_format_features(physical_device, format,
+                                            info->tiling, isl_mod_info,
+                                            format_list_info,
                                             info->flags & VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT);
 
       if (!anv_format_supports_usage(all_formats_feature_flags, info->usage))
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_private.h mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_private.h
--- mesa-23.1.3/src/intel/vulkan/anv_private.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_private.h	2023-06-28 19:30:05.000000000 +0200
@@ -2097,11 +2097,13 @@ enum anv_pipe_bits {
  * based on PIPE_CONTROL emissions.
  */
 enum anv_query_bits {
-   ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH      = (1 << 0),
+   ANV_QUERY_WRITES_RT_FLUSH      = (1 << 0),
 
-   ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH    = (1 << 1),
+   ANV_QUERY_WRITES_TILE_FLUSH    = (1 << 1),
 
-   ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL      = (1 << 2),
+   ANV_QUERY_WRITES_CS_STALL      = (1 << 2),
+
+   ANV_QUERY_WRITES_DATA_FLUSH    = (1 << 3),
 };
 
 /* Things we need to flush before accessing query data using the command
@@ -2116,17 +2118,24 @@ enum anv_query_bits {
  */
 #define ANV_QUERY_RENDER_TARGET_WRITES_PENDING_BITS(devinfo) \
    (((devinfo->verx10 >= 120 && \
-      devinfo->verx10 < 125) ? ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH : 0) | \
-   ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH | \
-   ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL)
+      devinfo->verx10 < 125) ? ANV_QUERY_WRITES_TILE_FLUSH : 0) | \
+   ANV_QUERY_WRITES_RT_FLUSH | \
+   ANV_QUERY_WRITES_CS_STALL)
+#define ANV_QUERY_COMPUTE_WRITES_PENDING_BITS \
+   (ANV_QUERY_WRITES_DATA_FLUSH | \
+    ANV_QUERY_WRITES_CS_STALL)
 
 #define ANV_PIPE_QUERY_BITS(pending_query_bits) ( \
-   ((pending_query_bits & ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH) ?   \
+   ((pending_query_bits & ANV_QUERY_WRITES_RT_FLUSH) ?   \
     ANV_PIPE_RENDER_TARGET_CACHE_FLUSH_BIT : 0) | \
-   ((pending_query_bits & ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH) ?   \
+   ((pending_query_bits & ANV_QUERY_WRITES_TILE_FLUSH) ?   \
     ANV_PIPE_TILE_CACHE_FLUSH_BIT : 0) | \
-   ((pending_query_bits & ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL) ?   \
-    ANV_PIPE_CS_STALL_BIT : 0))
+   ((pending_query_bits & ANV_QUERY_WRITES_CS_STALL) ?   \
+    ANV_PIPE_CS_STALL_BIT : 0) | \
+   ((pending_query_bits & ANV_QUERY_WRITES_DATA_FLUSH) ?  \
+    (ANV_PIPE_DATA_CACHE_FLUSH_BIT | \
+     ANV_PIPE_HDC_PIPELINE_FLUSH_BIT | \
+     ANV_PIPE_UNTYPED_DATAPORT_CACHE_FLUSH_BIT) : 0))
 
 #define ANV_PIPE_FLUSH_BITS ( \
    ANV_PIPE_DEPTH_CACHE_FLUSH_BIT | \
@@ -4136,7 +4145,7 @@ anv_is_dual_src_blend_equation(const str
 }
 
 VkFormatFeatureFlags2
-anv_get_image_format_features2(const struct intel_device_info *devinfo,
+anv_get_image_format_features2(const struct anv_physical_device *physical_device,
                                VkFormat vk_format,
                                const struct anv_format *anv_format,
                                VkImageTiling vk_tiling,
diff -Npur mesa-23.1.3/src/intel/vulkan/anv_utrace.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_utrace.c
--- mesa-23.1.3/src/intel/vulkan/anv_utrace.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/anv_utrace.c	2023-06-28 19:30:05.000000000 +0200
@@ -129,9 +129,18 @@ anv_device_utrace_flush_cmd_buffers(stru
       if (result != VK_SUCCESS)
          goto error_trace_buf;
 
+      uint32_t batch_size = 512; /* 128 dwords of setup */
+      if (device->info->verx10 == 120 || intel_device_info_is_dg2(device->info)) {
+         /* Enable/Disable preemption at the begin/end */
+         batch_size += 2 * (250 /* 250 MI_NOOPs*/ +
+                            6   /* PIPE_CONTROL */ +
+                            3   /* MI_LRI */) * 4 /* dwords */;
+      }
+      batch_size += 256 * utrace_copies; /* 64 dwords per copy */
+      batch_size = align(batch_size + 4, 8); /* MI_BATCH_BUFFER_END */
+
       result = anv_bo_pool_alloc(&device->utrace_bo_pool,
-                                 /* 128 dwords of setup + 64 dwords per copy */
-                                 align(512 + 64 * utrace_copies, 4096),
+                                 align(batch_size, 4096),
                                  &submit->batch_bo);
       if (result != VK_SUCCESS)
          goto error_batch_buf;
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_cmd_buffer.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_cmd_buffer.c
--- mesa-23.1.3/src/intel/vulkan/genX_cmd_buffer.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_cmd_buffer.c	2023-06-28 19:30:05.000000000 +0200
@@ -1754,16 +1754,22 @@ genX(emit_apply_pipe_flushes)(struct anv
        */
       if (query_bits != NULL) {
          if (bits & ANV_PIPE_RENDER_TARGET_CACHE_FLUSH_BIT)
-            *query_bits &= ~ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH;
+            *query_bits &= ~ANV_QUERY_WRITES_RT_FLUSH;
 
          if (bits & ANV_PIPE_TILE_CACHE_FLUSH_BIT)
-            *query_bits &= ~ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH;
+            *query_bits &= ~ANV_QUERY_WRITES_TILE_FLUSH;
+
+         if ((bits & ANV_PIPE_DATA_CACHE_FLUSH_BIT) &&
+             (bits & ANV_PIPE_HDC_PIPELINE_FLUSH_BIT) &&
+             (bits & ANV_PIPE_UNTYPED_DATAPORT_CACHE_FLUSH_BIT))
+            *query_bits &= ~ANV_QUERY_WRITES_TILE_FLUSH;
 
          /* Once RT/TILE have been flushed, we can consider the CS_STALL flush */
-         if ((*query_bits & (ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH |
-                             ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH)) == 0 &&
+         if ((*query_bits & (ANV_QUERY_WRITES_TILE_FLUSH |
+                             ANV_QUERY_WRITES_RT_FLUSH |
+                             ANV_QUERY_WRITES_DATA_FLUSH)) == 0 &&
              (bits & (ANV_PIPE_END_OF_PIPE_SYNC_BIT | ANV_PIPE_CS_STALL_BIT)))
-            *query_bits &= ~ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL;
+            *query_bits &= ~ANV_QUERY_WRITES_CS_STALL;
       }
 
       bits &= ~(ANV_PIPE_FLUSH_BITS | ANV_PIPE_STALL_BITS |
@@ -4059,6 +4065,37 @@ genX(CmdExecuteCommands)(
    }
 }
 
+static inline bool
+stage_is_shader(const VkPipelineStageFlags2 stage)
+{
+   return (stage & (VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT |
+                    VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT |
+                    VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT |
+                    VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR |
+                    VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT |
+                    VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT));
+}
+
+static inline bool
+stage_is_transfer(const VkPipelineStageFlags2 stage)
+{
+   return (stage & (VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT |
+                    VK_PIPELINE_STAGE_2_TRANSFER_BIT));
+}
+
+static inline bool
+mask_is_shader_write(const VkAccessFlags2 access)
+{
+   return (access & (VK_ACCESS_2_SHADER_WRITE_BIT |
+                     VK_ACCESS_2_MEMORY_WRITE_BIT |
+                     VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT));
+}
+
 static void
 cmd_buffer_barrier(struct anv_cmd_buffer *cmd_buffer,
                    const VkDependencyInfo *dep_info,
@@ -4077,11 +4114,31 @@ cmd_buffer_barrier(struct anv_cmd_buffer
    for (uint32_t i = 0; i < dep_info->memoryBarrierCount; i++) {
       src_flags |= dep_info->pMemoryBarriers[i].srcAccessMask;
       dst_flags |= dep_info->pMemoryBarriers[i].dstAccessMask;
+
+      /* Shader writes to buffers that could then be written by a transfer
+       * command (including queries).
+       */
+      if (stage_is_shader(dep_info->pMemoryBarriers[i].srcStageMask) &&
+          mask_is_shader_write(dep_info->pMemoryBarriers[i].srcAccessMask) &&
+          stage_is_transfer(dep_info->pMemoryBarriers[i].dstStageMask)) {
+         cmd_buffer->state.pending_query_bits |=
+            ANV_QUERY_COMPUTE_WRITES_PENDING_BITS;
+      }
    }
 
    for (uint32_t i = 0; i < dep_info->bufferMemoryBarrierCount; i++) {
       src_flags |= dep_info->pBufferMemoryBarriers[i].srcAccessMask;
       dst_flags |= dep_info->pBufferMemoryBarriers[i].dstAccessMask;
+
+      /* Shader writes to buffers that could then be written by a transfer
+       * command (including queries).
+       */
+      if (stage_is_shader(dep_info->pBufferMemoryBarriers[i].srcStageMask) &&
+          mask_is_shader_write(dep_info->pBufferMemoryBarriers[i].srcAccessMask) &&
+          stage_is_transfer(dep_info->pBufferMemoryBarriers[i].dstStageMask)) {
+         cmd_buffer->state.pending_query_bits |=
+            ANV_QUERY_COMPUTE_WRITES_PENDING_BITS;
+      }
    }
 
    for (uint32_t i = 0; i < dep_info->imageMemoryBarrierCount; i++) {
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_query.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_query.c
--- mesa-23.1.3/src/intel/vulkan/genX_query.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_query.c	2023-06-28 19:30:05.000000000 +0200
@@ -1514,15 +1514,22 @@ void genX(CmdCopyQueryPoolResults)(
     * command streamer.
     */
    if (cmd_buffer->state.pending_query_bits &
-       ANV_QUERY_RENDER_TARGET_WRITES_RT_FLUSH)
+       ANV_QUERY_WRITES_RT_FLUSH)
       needed_flushes |= ANV_PIPE_RENDER_TARGET_CACHE_FLUSH_BIT;
 
    if (cmd_buffer->state.pending_query_bits &
-       ANV_QUERY_RENDER_TARGET_WRITES_TILE_FLUSH)
+       ANV_QUERY_WRITES_TILE_FLUSH)
       needed_flushes |= ANV_PIPE_TILE_CACHE_FLUSH_BIT;
 
    if (cmd_buffer->state.pending_query_bits &
-       ANV_QUERY_RENDER_TARGET_WRITES_CS_STALL)
+       ANV_QUERY_WRITES_DATA_FLUSH) {
+      needed_flushes |= (ANV_PIPE_DATA_CACHE_FLUSH_BIT |
+                         ANV_PIPE_HDC_PIPELINE_FLUSH_BIT |
+                         ANV_PIPE_UNTYPED_DATAPORT_CACHE_FLUSH_BIT);
+   }
+
+   if (cmd_buffer->state.pending_query_bits &
+       ANV_QUERY_WRITES_CS_STALL)
       needed_flushes |= ANV_PIPE_CS_STALL_BIT;
 
    /* Occlusion & timestamp queries are written using a PIPE_CONTROL and
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_state.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_state.c
--- mesa-23.1.3/src/intel/vulkan/genX_state.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_state.c	2023-06-28 19:30:05.000000000 +0200
@@ -179,6 +179,21 @@ init_common_queue_state(struct anv_queue
    device->l3_config = cfg;
 #endif
 
+#if GFX_VERx10 == 125
+   /* Even though L3 partial write merging is supposed to be enabled
+    * by default on Gfx12.5 according to the hardware spec, i915
+    * appears to accidentally clear the enables during context
+    * initialization, so make sure to enable them here since partial
+    * write merging has a large impact on rendering performance.
+    */
+   anv_batch_write_reg(batch, GENX(L3SQCREG5), reg) {
+      reg.L3CachePartialWriteMergeTimerInitialValue = 0x7f;
+      reg.CompressiblePartialWriteMergeEnable = true;
+      reg.CoherentPartialWriteMergeEnable = true;
+      reg.CrossTilePartialWriteMergeEnable = true;
+   }
+#endif
+
    /* Emit STATE_BASE_ADDRESS on Gfx12+ because we set a default CPS_STATE and
     * those are relative to STATE_BASE_ADDRESS::DynamicStateBaseAddress.
     */
@@ -421,6 +436,35 @@ init_render_queue_state(struct anv_queue
       reg.HZDepthTestLEGEOptimizationDisableMask = true;
    }
 
+#if GFX_VER == 12
+   anv_batch_write_reg(&batch, GENX(FF_MODE2), reg) {
+      /* On Alchemist, the FF_MODE2 docs for the GS timer say:
+       *
+       *    "The timer value must be set to 224."
+       *
+       * and Wa_16011163337 indicates this is the case for all Gfx12 parts,
+       * and that this is necessary to avoid hanging the HS/DS units.  It
+       * also clarifies that 224 is literally 0xE0 in the bits, not 7*32=224.
+       *
+       * The HS timer docs also have the same quote for Alchemist.  I am
+       * unaware of a reason it needs to be set to 224 on Tigerlake, but
+       * we do so for consistency if nothing else.
+       *
+       * For the TDS timer value, the docs say:
+       *
+       *    "For best performance, a value of 4 should be programmed."
+       *
+       * i915 also sets it this way on Tigerlake due to workarounds.
+       *
+       * The default VS timer appears to be 0, so we leave it at that.
+       */
+      reg.GSTimerValue  = 224;
+      reg.HSTimerValue  = 224;
+      reg.TDSTimerValue = 4;
+      reg.VSTimerValue  = 0;
+   }
+#endif
+
    /* Wa_1508744258
     *
     *    Disable RHWO by setting 0x7010[14] by default except during resolve
diff -Npur mesa-23.1.3/src/intel/vulkan/genX_video.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_video.c
--- mesa-23.1.3/src/intel/vulkan/genX_video.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/intel/vulkan/genX_video.c	2023-06-28 19:30:05.000000000 +0200
@@ -110,8 +110,8 @@ anv_h264_decode_video(struct anv_cmd_buf
       ss.TiledSurface = img->planes[0].primary_surface.isl.tiling != ISL_TILING_LINEAR;
       ss.TileWalk = TW_YMAJOR;
 
-      ss.YOffsetforUCb = align(img->vk.extent.height, 32);
-      ss.YOffsetforVCr = align(img->vk.extent.height, 32);
+      ss.YOffsetforUCb = ss.YOffsetforVCr =
+         img->planes[1].primary_surface.memory_range.offset / img->planes[0].primary_surface.isl.row_pitch_B;
    }
 
    anv_batch_emit(&cmd_buffer->batch, GENX(MFX_PIPE_BUF_ADDR_STATE), buf) {
diff -Npur mesa-23.1.3/src/mapi/glapi/tests/check_table.cpp mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/mapi/glapi/tests/check_table.cpp
--- mesa-23.1.3/src/mapi/glapi/tests/check_table.cpp	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/mapi/glapi/tests/check_table.cpp	2023-06-28 19:30:05.000000000 +0200
@@ -1130,8 +1130,8 @@ const struct name_offset known_dispatch[
    { "glGetAttribLocation", _O(GetAttribLocation) },
    { "glDrawBuffers", _O(DrawBuffers) },
    { "glClampColor", _O(ClampColor) },
-   { "glDrawArraysInstancedARB", _O(DrawArraysInstancedARB) },
-   { "glDrawElementsInstancedARB", _O(DrawElementsInstancedARB) },
+   { "glDrawArraysInstanced", _O(DrawArraysInstanced) },
+   { "glDrawElementsInstanced", _O(DrawElementsInstanced) },
    { "glRenderbufferStorageMultisample", _O(RenderbufferStorageMultisample) },
    { "glFramebufferTexture", _O(FramebufferTexture) },
    { "glProgramParameteri", _O(ProgramParameteri) },
diff -Npur mesa-23.1.3/src/virtio/vulkan/vn_feedback.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/virtio/vulkan/vn_feedback.c
--- mesa-23.1.3/src/virtio/vulkan/vn_feedback.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/virtio/vulkan/vn_feedback.c	2023-06-28 19:30:05.000000000 +0200
@@ -141,6 +141,13 @@ vn_feedback_buffer_destroy(struct vn_dev
    vk_free(alloc, feedback_buf);
 }
 
+static inline uint32_t
+vn_get_feedback_buffer_alignment(struct vn_feedback_buffer *feedback_buf)
+{
+   struct vn_buffer *buf = vn_buffer_from_handle(feedback_buf->buffer);
+   return buf->requirements.memory.memoryRequirements.alignment;
+}
+
 static VkResult
 vn_feedback_pool_grow_locked(struct vn_feedback_pool *pool)
 {
@@ -154,6 +161,7 @@ vn_feedback_pool_grow_locked(struct vn_f
       return result;
 
    pool->used = 0;
+   pool->alignment = vn_get_feedback_buffer_alignment(feedback_buf);
 
    list_add(&feedback_buf->head, &pool->feedback_buffers);
 
@@ -172,6 +180,7 @@ vn_feedback_pool_init(struct vn_device *
    pool->alloc = alloc;
    pool->size = size;
    pool->used = size;
+   pool->alignment = 1;
    list_inithead(&pool->feedback_buffers);
    list_inithead(&pool->free_slots);
 
@@ -198,18 +207,20 @@ vn_feedback_pool_alloc_locked(struct vn_
                               uint32_t *out_offset)
 {
    VN_TRACE_FUNC();
-   const uint32_t aligned_size = align(size, 4);
 
-   if (unlikely(aligned_size > pool->size - pool->used)) {
+   /* Default values of pool->used and pool->alignment are used to trigger the
+    * initial pool grow, and will be properly initialized after that.
+    */
+   if (unlikely(align(size, pool->alignment) > pool->size - pool->used)) {
       VkResult result = vn_feedback_pool_grow_locked(pool);
       if (result != VK_SUCCESS)
          return NULL;
 
-      assert(aligned_size <= pool->size - pool->used);
+      assert(align(size, pool->alignment) <= pool->size - pool->used);
    }
 
    *out_offset = pool->used;
-   pool->used += aligned_size;
+   pool->used += align(size, pool->alignment);
 
    return list_first_entry(&pool->feedback_buffers, struct vn_feedback_buffer,
                            head);
diff -Npur mesa-23.1.3/src/virtio/vulkan/vn_feedback.h mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/virtio/vulkan/vn_feedback.h
--- mesa-23.1.3/src/virtio/vulkan/vn_feedback.h	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/virtio/vulkan/vn_feedback.h	2023-06-28 19:30:05.000000000 +0200
@@ -19,6 +19,8 @@ struct vn_feedback_pool {
    uint32_t size;
    /* size in bytes used of the active feedback buffer */
    uint32_t used;
+   /* alignment in bytes for slot suballocation from the feedback buffer */
+   uint32_t alignment;
 
    /* first entry is the active feedback buffer */
    struct list_head feedback_buffers;
diff -Npur mesa-23.1.3/src/virtio/vulkan/vn_pipeline.c mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/virtio/vulkan/vn_pipeline.c
--- mesa-23.1.3/src/virtio/vulkan/vn_pipeline.c	2023-06-22 18:42:08.000000000 +0200
+++ mesa-836d642c34e648ec3283fdc74f79d374cc8aad9a/src/virtio/vulkan/vn_pipeline.c	2023-06-28 19:30:05.000000000 +0200
@@ -126,11 +126,22 @@ vn_CreatePipelineLayout(VkDevice device,
    for (uint32_t i = 0; i < pCreateInfo->setLayoutCount; i++) {
       struct vn_descriptor_set_layout *descriptor_set_layout =
          vn_descriptor_set_layout_from_handle(pCreateInfo->pSetLayouts[i]);
-      if (descriptor_set_layout->is_push_descriptor) {
+
+      /* Avoid null derefs. pSetLayouts may contain VK_NULL_HANDLE.
+       *
+       * From the Vulkan 1.3.254 spec:
+       *    VUID-VkPipelineLayoutCreateInfo-pSetLayouts-parameter
+       *
+       *    If setLayoutCount is not 0, pSetLayouts must be a valid pointer to
+       *    an array of setLayoutCount valid or VK_NULL_HANDLE
+       *    VkDescriptorSetLayout handles
+       */
+      if (descriptor_set_layout &&
+          descriptor_set_layout->is_push_descriptor) {
          layout->push_descriptor_set_layout =
             vn_descriptor_set_layout_ref(dev, descriptor_set_layout);
+         break;
       }
-      break;
    }
 
    layout->has_push_constant_ranges = pCreateInfo->pPushConstantRanges > 0;
